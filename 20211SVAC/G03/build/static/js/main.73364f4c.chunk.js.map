{"version":3,"sources":["estructuras/EstructurasLineales/ListaSimple.js","components/Cargar.js","components/Navbar.js","components/Division.js","components/Divisiones.js","estructuras/EstructurasLineales/Cola.js","estructuras/EstructurasLineales/ColaPrioridad.js","estructuras/Estructuras_Arboreas/AVL.js","estructuras/Estructuras_Arboreas/ABB.js","estructuras/Estructuras_Arboreas/merkleTree.js","estructuras/EstructurasLineales/Pila.js","estructuras/EstructurasLineales/ListaCirD.js","estructuras/EstructurasLineales/ListaCirS.js","estructuras/EstructurasLineales/ListaDoble.js","estructuras/Estructuras_Arboreas/ArbolB.js","estructuras/Estructuras_Arboreas/ArbolBplus.js","components/Agregar.js","components/Eliminar.js","components/Actualizar.js","components/GraficaListas.js","components/GraficaListaCircular.js","components/GraficoOrdenamientos.js","components/Dibujar.js","components/Buscar.js","estructuras/Ordenamientos/Seleccion.js","estructuras/Ordenamientos/Insercion.js","estructuras/Ordenamientos/OrdRapido.js","estructuras/Ordenamientos/OrdBurbuja.js","components/GraficarArboles.js","components/GraficarArbol.js","components/NavbarInter.js","App.js","reportWebVitals.js","index.js"],"names":["Nodo","require","valor","this","siguiente","ListaSimple","primero","elemento","accion","agregarOrdenado","agregarFinal","agregarInicio","nodo","temporal","console","log","siguienteT","id","arreglo","map","agregar","archivojs","push","datoBuscar","contador","dato","label","toString","color","propsG","Navbar","Menu","className","Item","to","Component","colorcard","background","Division","Card","props","style","Image","src","imagen","wrapped","ui","Content","Header","title","Description","descripcion","extra","Icon","pathname","state","nombre","Divisiones","Group","itemsPerRow","Cola","ultimo","longitud","nuevoNodo","estaVacia","eliminado","nodoActual","text","datoAnterior","datoNuevo","nodoanterior","arr","e","Agregar","prioridad","ColaPrioridad","temp","temp1","colaP","derecha","izquierda","altura","ArbolAVL","raiz","valor1","valor2","_agregar","r_izquierda","r_dobleizquierda","r_derecha","r_doblederecha","al_der","al_izq","MAX","aux","_eliminar","balancear","anterior","_encontrarReemplazo","tempEliminar","anteriorValor","anteriorAux","encicla","balancearAlturas","_balancear","valorNuevo","eliminar","variable","_buscar","buscar","preOrden","vector","recorridoPre","graficarNodos","graficarApuntadores","edge","from","ABB","add","imprimir","tmp","maxiz","enlace","nodmax","maxIzq","trasiz","trasder","minder","nodmin","minDer","mandardato","datoborr","datoin","eliminando","insertar","etiqueta","graficar","sha256","NodoListaTemporal","datTemporal","contadorglobal","salida","ListaTemporal","cabeza","cola","size","recarga","nodohijo","hash","MerkleTree","listatmp","insertLista","construirArbol","ObtenerLista","hashing","obtenerlista","lista","cant","operacion","Float64Array","length","vectorTotal","totalnodos","Math","pow","floor","segundo","eliminarLista","nodo1","nodo2","suma","nuevo","subHashing","hasheo","create","update","String","hex","noha","cargaArbolLista","i","cargandoArbolLista","datoelim","nuevodato","modificando","guardar","valorBuscar","graficando","Pila","contadorPilas","nodonuevo","inicio","valoranterior","ListaCD","opcion","insertarInicio","insertFinal","datoins","contadoraux","ListaCS","datoinse","ListaDoble","reemplazo","izquierdo","derecho","idRama","Rama","hoja","ArbolB","orden","rama","divRam","der","izq","mitad","medio","parseInt","final","subprint","recorrido","buscando","aux2","elimin","creando","dat","datelim","datins","encuentra","rama_Izq","rama_Der","permiso","indice","ramaContinua","ramaPadre","ArbolBplus","NodoAux","cuentaRamas","cuentaNodos","ramaAux","agregarNodo","dividirRama","buscarInsercion","valorMedio","rama_derAux","rama_izAux","nuevaRaiz","tempContinua","arbolAux","nodotemp","Encontrado","_recorrer","onChange","files","target","reader","FileReader","onload","result","trim","data","JSON","parse","datos","edd","grado","posicion","cargar","Imprimir","ListaCirD","arrString","obtenerNodos","obtenerAputadores","obtenerDatos","structW","valores","readAsText","newarr","charCodeAt","newValor","ASCII","getCharCodes","s","charCodeArr","Cargar","React","useState","open","setOpen","Modal","basic","onClose","onOpen","trigger","icon","name","Input","fluid","type","accept","Actions","Button","inverted","onClick","countryOptions","key","value","textoDato","opciones","swtEdd","obtenerText","setState","placeholder","options","Eliminar","Actualizar","actualizar","modificar","GraficaListas","nodosAfuera","Recorrido","uniones","edgefuera","edgeF","graph","nodes","node","index","angle","x","y","edges","physics","width","shadow","shape","font","borderWidth","interaction","navigationButtons","keyboard","height","events","select","event","getNetwork","network","GraficaListaCircular","PI","cos","sin","GraficoOrdenamientos","BarChart","margin","top","right","left","bottom","XAxis","dataKey","YAxis","Tooltip","Bar","fill","animationDuration","Dibujar","valorBusqueda","estructura","Buscar","retornarValor","busqueda","Seleccion","menor","Insercion","ordRapido","pivote","partIzq","partDer","slice","el","fs","Ordenamiento","contadorArreglos","j","archivo","ordenar","contadorListas","json","stringify","writeFile","GraficarArboles","dot","Graphviz","zoom","GraficarArbol","layout","hierarchical","direction","sortMethod","count","NavbarInter","estrutura","fileDownloadUrl","handleItemClick","activeItem","obtenerBusqueda","ordenarDatos","arregloOrdenado","desencolar","Pop","guardarOrdenamiento","preventDefault","archivoJSON","blob","Blob","URL","createObjectURL","dofileDownload","click","revokeObjectURL","guardarEstructuras","location","position","download","href","ref","sectionStyle","backgroundImage","App","exact","path","render","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"4IACMA,GADGC,EAAQ,IAEb,WAAYC,GAAO,oBACfC,KAAKD,MAAQA,EACbC,KAAKC,UAAY,OAInBC,E,WAEF,aAAc,oBACXF,KAAKG,QAAU,K,2CAIlB,SAAQC,EAAUC,GACd,OAAOA,GACH,IAAK,WACDL,KAAKM,gBAAgBF,GACrB,MACJ,IAAK,QACDJ,KAAKO,aAAaH,GAClB,MACJ,IAAK,SACDJ,KAAKQ,cAAcJ,M,2BAM/B,SAAcA,GACV,IAAIK,EAAO,IAAIZ,EAAKO,GACD,MAAhBJ,KAAKG,UAGJM,EAAKR,UAAYD,KAAKG,SAFtBH,KAAKG,QAAUM,I,6BAOvB,SAAgBL,GACZ,IAAIK,EAAO,IAAIZ,EAAKO,GACpB,GAAmB,MAAhBJ,KAAKG,QACJH,KAAKG,QAAUM,MACd,CAED,IADA,IAAIC,EAAWV,KAAKG,QACQ,MAAtBO,EAAST,WAAmB,CAC9B,GAAGS,EAASX,OAASK,GAAYM,EAAST,UAAUF,OAASK,EAAS,CAClEK,EAAKR,UAAYS,EAAST,UAC1BS,EAAST,UAAYQ,EACrB,MACE,GAAGC,GAAYV,KAAKG,SAAWO,EAASX,OAASK,EAAS,CAC5DK,EAAKR,UAAYD,KAAKG,QACtBH,KAAKG,QAAUM,EACf,MAEJC,EAAWA,EAAST,UAEE,MAAtBS,EAAST,WAAqBS,EAASX,OAASK,IAChDM,EAAST,UAAYQ,M,0BAMjC,SAAaL,GAET,IAAIK,EAAO,IAAIZ,EAAKO,GACpB,GAAoB,MAAhBJ,KAAKG,QACLH,KAAKG,QAAUM,MAGd,CAGD,IADA,IAAIC,EAAWV,KAAKG,QACS,MAAtBO,EAAST,WACZS,EAAWA,EAAST,UAExBS,EAAST,UAAYQ,K,sBAK7B,SAASL,GACL,GAAoB,MAAhBJ,KAAKG,QACLQ,QAAQC,IAAI,iCAIZ,IADA,IAAIF,EAAWV,KAAKG,QACD,MAAZO,GAAkB,CACrB,GAAIA,EAASX,OAASK,EAClBM,EAAWA,EAAST,eAGpB,GAA0B,MAAtBS,EAAST,WACLS,EAAST,UAAUF,OAASK,EAAU,CACtC,IAAIS,EAAaH,EAAST,UAG1B,OAFAS,EAAST,UAAYY,EAAWZ,eAChCY,EAAWZ,UAAY,MAKnCS,EAAWA,EAAST,a,wBAMhC,SAAWa,EAAIf,GACX,GAAoB,MAAhBC,KAAKG,QACLQ,QAAQC,IAAI,iCAIZ,IADA,IAAIF,EAAWV,KAAKG,QACD,MAAZO,GACCA,EAASX,OAASe,IAClBJ,EAASX,MAAQA,GAErBW,EAAWA,EAAST,Y,oBAOhC,SAAOF,GACH,GAAoB,MAAhBC,KAAKG,QACLQ,QAAQC,IAAI,qCAKZ,IADA,IAAIF,EAAWV,KAAKG,QACF,MAAZO,GAAiB,CACnB,GAAGA,EAASX,OAASA,EACjB,OAAOW,EAEXA,EAAWA,EAAST,a,oBAMhC,SAAOc,EAAQV,GAAS,IAAD,OACnBU,EAAQC,KAAI,SAAAZ,GACR,EAAKa,QAAQb,EAAUC,Q,qBAK/B,WAGI,IAFA,IAAIa,EAAW,GACXR,EAAWV,KAAKG,QACD,MAAZO,GACHQ,EAAUC,KAAKT,EAASX,OACxBW,EAAWA,EAAST,UAGxB,OAAOiB,I,sBAIX,WAEI,IADA,IAAIR,EAAWV,KAAKG,QACF,MAAZO,GACFC,QAAQC,IAAIF,EAASX,OACrBW,EAAWA,EAAST,Y,uBAI5B,SAAUmB,GAKF,IAHJ,IAAIL,EAAU,GACVM,EAAW,EACXX,EAAWV,KAAKG,QACE,MAAZO,GAAiB,CACnB,IAAIY,EAAO,CAACR,GAAIO,EAAUE,MAAOb,EAASX,MAAMyB,YAGhD,GAFAT,EAAQM,GAAYC,EAEjBZ,EAASX,OAASqB,EAAW,CAE5B,IAAIE,EAAO,CAACR,GAAIO,EAAUE,MAAOb,EAASX,MAAMyB,WAAaC,MAAO,QACpEV,EAAQM,GAAYC,EAExBZ,EAAWA,EAAST,UACpBoB,IAGJ,OAAON,M,KAMJb,a,4OC/KXwB,E,gHCfiBC,E,4JAGjB,WACI,OACI,8BACI,cAACC,EAAA,EAAD,CAAMC,UAAU,gCAAhB,SACI,cAACD,EAAA,EAAKE,KAAN,UACI,cAAC,IAAD,CAAMC,GAAG,gCAAT,+B,GARYC,a,2BCAhCC,EAAW,CACXC,WAAY,sBAIKC,E,4JAGjB,WACI,OACS,eAACC,EAAA,EAAD,CAAMX,MAASzB,KAAKqC,MAAMZ,MAAOa,MAAOL,EAAxC,UACG,cAACM,EAAA,EAAD,CAAOC,IAAKxC,KAAKqC,MAAMI,OAAQC,SAAO,EAACC,IAAI,IAC3C,eAACP,EAAA,EAAKQ,QAAN,WACA,cAACR,EAAA,EAAKS,OAAN,CAAaP,MAAO,CAAEb,MAAO,SAA7B,SAAyCzB,KAAKqC,MAAMS,QACpD,cAACV,EAAA,EAAKW,YAAN,CAAkBT,MAAO,CAAEb,MAAO,SAAlC,SACKzB,KAAKqC,MAAMW,iBAGhB,cAACZ,EAAA,EAAKQ,QAAN,CAAcK,OAAK,EAAnB,SACA,4BACI,cAACC,EAAA,EAAD,CAAMrB,UAAU,0BAA0BS,MAAO,CAAEb,MAAO,SAA1D,SACI,cAAC,IAAD,CAAMa,MAAO,CAAEb,MAAO,SAAWM,GAAI,CAACoB,SAAS,0CAA2CC,MAAM,CAACC,OAAQrD,KAAKqC,MAAMS,QAApH,6B,GAhBUd,aCHjBsB,G,mKACjB,WACI,OACI,sBAAKzB,UAAU,aAAf,UACA,qBAAKA,UAAU,MAAf,SACI,oBAAIS,MAAO,CAAEb,MAAO,SAApB,uBAGJ,uBACA,uBACA,eAACW,EAAA,EAAKmB,MAAN,CAAYC,YAAa,EAAzB,UACQ,cAAC,EAAD,CAAUV,MAAM,uBAAuBE,YAAY,qBAAqBvB,MAAM,MAAMgB,OAAO,qFAC3F,cAAC,EAAD,CAAUK,MAAM,4BAAyBE,YAAY,qBAAqBvB,MAAM,QAAQgB,OAAO,uEAC/F,cAAC,EAAD,CAAUK,MAAM,4BAAyBE,YAAY,qBAAqBvB,MAAM,SAASgB,OAAO,4EAChG,cAAC,EAAD,CAAUK,MAAM,sBAAsBE,YAAY,qBAAqBvB,MAAM,OAAOgB,OAAO,oFAE3F,cAAC,EAAD,CAAUK,MAAM,6BAA6BE,YAAY,qBAAqBvB,MAAM,QAAQgB,OAAO,wCACnG,cAAC,EAAD,CAAUK,MAAM,4BAA4BE,YAAY,qBAAqBvB,MAAM,SAASgB,OAAO,wCACnG,cAAC,EAAD,CAAUK,MAAM,sCAAsCE,YAAY,qBAAqBvB,MAAM,OAAOgB,OAAO,wCAC3G,cAAC,EAAD,CAAUK,MAAM,qCAAqCE,YAAY,qBAAqBvB,MAAM,SAASgB,OAAO,wCAE5G,cAAC,EAAD,CAAUK,MAAM,OAAOE,YAAY,qBAAqBvB,MAAM,QAAQgB,OAAO,yCAC7E,cAAC,EAAD,CAAUK,MAAM,OAAOE,YAAY,qBAAqBvB,MAAM,SAASgB,OAAO,yCAC9E,cAAC,EAAD,CAAUK,MAAM,oBAAoBE,YAAY,qBAAqBvB,MAAM,OAAOgB,OAAO,sDAGzF,cAAC,EAAD,CAAUK,MAAM,YAAYE,YAAY,qBAAqBvB,MAAM,SAASgB,OAAO,8CACnF,cAAC,EAAD,CAAUK,MAAM,YAAYE,YAAY,qBAAqBvB,MAAQ,QAAQgB,OAAO,8CACpF,cAAC,EAAD,CAAUK,MAAM,UAAUE,YAAY,qBAAoBvB,MAAM,OAAOgB,OAAO,4CAC9E,cAAC,EAAD,CAAUK,MAAM,WAAWE,YAAY,qBAAqBvB,MAAM,SAASgB,OAAO,4DAClF,cAAC,EAAD,CAAUK,MAAM,eAAeE,YAAY,qBAAqBvB,MAAM,QAAQgB,OAAO,2D,GA9BjET,c,4CCLlCnC,GADGC,EAAQ,IAEb,WAAYwB,GAAM,oBACdtB,KAAKsB,KAAOA,EACZtB,KAAKC,UAAY,OAuKVwD,E,WAlKX,aAAc,oBACVzD,KAAKG,QAAU,KACfH,KAAK0D,OAAS,KACd1D,KAAK2D,SAAW,E,6CAGvB,WACO,OAAoB,MAAhB3D,KAAKG,U,qBAOb,SAAQmB,GACJ,IAAIsC,EAAY,IAAI/D,EAAKyB,GAEtBtB,KAAK6D,aACJ7D,KAAKG,QAAUyD,EACf5D,KAAK0D,OAASE,IAEdA,EAAU3D,UAAYD,KAAKG,QAC3BH,KAAKG,QAAUyD,GAGnB5D,KAAK2D,a,iBAGZ,WACO,IAAIG,EAAY9D,KAAK0D,OACrB,GAAI1D,KAAKG,SAAWH,KAAK0D,OACrB1D,KAAKG,QAAU,KACfH,KAAK0D,OAAS,SACb,CAED,IADA,IAAIK,EAAa/D,KAAKG,QACf4D,EAAW9D,WAAa6D,GAC3BC,EAAaA,EAAW9D,UAG5BD,KAAK0D,OAASK,EACd/D,KAAK0D,OAAOzD,UAAY,KAE5BD,KAAK2D,a,sBAGZ,WAIO,IAHA,IAAIK,EAAO,GACPD,EAAa/D,KAAKG,QAED,MAAd4D,GACHC,GAAQD,EAAWzC,KAAO,KAEtByC,EADuB,MAAxBA,EAAW9D,UACG8D,EAAW9D,UAEX,KAMrB,OAFA+D,GAAQ,S,wBAKf,SAAWC,EAAcC,GAGlB,IAFA,IAAIH,EAAa/D,KAAKG,QAEF,MAAd4D,GACCA,EAAWzC,MAAQ2C,IAClBF,EAAWzC,KAAO4C,GAGtBH,EAAaA,EAAW9D,Y,oBAInC,SAAQqB,GAID,IAHA,IACIyC,EAAa/D,KAAKG,QAEF,MAAd4D,GAAmB,CACrB,GAAGA,EAAWzC,MAAQA,EAElB,MADiB,2BAAyByC,EAAWzC,KAIzDyC,EAAaA,EAAW9D,UAG5B,MADiB,2B,sBAIxB,SAASqB,GACH,IAAIyC,EAAa/D,KAAKG,QACjBgE,EAAe,KAEnB,GAAiB,MAAdJ,GAAsBA,EAAWzC,MAAQA,EAA5C,CAKA,KAAoB,MAAdyC,GAAsBA,EAAWzC,MAAQA,GAC3C6C,EAAeJ,EACfA,EAAaA,EAAW9D,UAGV,MAAd8D,IAIJI,EAAalE,UAAY8D,EAAW9D,gBAbhCD,KAAKG,QAAU4D,EAAW9D,Y,oBAgBrC,SAAOmE,GAAK,IAAD,OACJA,EAAIpD,KAAI,SAAAqD,GACJ,EAAKC,QAAQD,Q,qBAIrB,WAII,IAHA,IAAItD,EAAU,GACVgD,EAAa/D,KAAKG,QAED,MAAd4D,GACHhD,EAAQI,KAAK4C,EAAWzC,MAEpByC,EADuB,MAAxBA,EAAW9D,UACG8D,EAAW9D,UAEX,KAKrB,OAAOc,I,uBAGd,SAAUK,GAKH,IAJA,IAAIL,EAAU,GACVgD,EAAa/D,KAAKG,QAClBkB,EAAW,EAEM,MAAd0C,GAAmB,CACtB,IAAIzC,EAAO,CAACR,GAAIO,EAAUE,MAAOwC,EAAWzC,KAAKE,YAGjD,GAFAT,EAAQM,GAAYC,EAEjByC,EAAWzC,MAAQF,EAAW,CAC7B,IAAIE,EAAO,CAACR,GAAIO,EAAUE,MAAOwC,EAAWzC,KAAKE,WAAaC,MAAO,QACrEV,EAAQM,GAAYC,EAIpByC,EADuB,MAAxBA,EAAW9D,UACG8D,EAAW9D,UAEX,KAEjBoB,IAGJ,OAAON,M,KCrKTlB,GADGC,EAAQ,IAEb,WAAYwB,EAAMiD,GAAW,oBACzBvE,KAAKsB,KAAOA,EACZtB,KAAKuE,UAAYA,EACjBvE,KAAKC,UAAY,OA8LVuE,E,WAzLX,aAAc,oBACVxE,KAAKG,QAAU,KACfH,KAAK0D,OAAS,KACd1D,KAAK2D,SAAW,E,6CAGvB,WACO,OAAoB,MAAhB3D,KAAKG,U,qBAOb,SAAQmB,EAAKiD,GACT,IAAIX,EAAY,IAAI/D,EAAKyB,EAAKiD,GAE9B,GAAGvE,KAAK6D,YACJ7D,KAAKG,QAAUyD,EACf5D,KAAK0D,OAASE,MACb,CAKD,IAAIa,EAAKV,EAAWW,EAHpBd,EAAU3D,UAAYD,KAAKG,QAC3BH,KAAKG,QAAUyD,EAKf,IADA,IAAI3D,GADJ8D,EAAa/D,KAAKG,SACSF,UACG,MAAxB8D,EAAW9D,WAEV8D,EAAWQ,UAAYtE,EAAUsE,WAChCE,EAAOV,EAAWzC,KAClBoD,EAAQX,EAAWQ,UACnBR,EAAWzC,KAAOrB,EAAUqB,KAC5ByC,EAAWQ,UAAYtE,EAAUsE,UACjCtE,EAAUqB,KAAOmD,EACjBxE,EAAUsE,UAAYG,EAEtBX,EAAaA,EAAW9D,UACxBA,EAAYA,EAAUA,YAEtB8D,EAAaA,EAAW9D,UACxBA,EAAYA,EAAUA,WAKlCD,KAAK2D,a,iBAGX,WACM,IAAIG,EAAY9D,KAAK0D,OACrB,GAAI1D,KAAKG,SAAWH,KAAK0D,OACrB1D,KAAKG,QAAU,KACfH,KAAK0D,OAAS,SACb,CAED,IADA,IAAIK,EAAa/D,KAAKG,QACf4D,EAAW9D,WAAa6D,GAC3BC,EAAaA,EAAW9D,UAG5BD,KAAK0D,OAASK,EACd/D,KAAK0D,OAAOzD,UAAY,KAE5BD,KAAK2D,a,sBAGX,WAIM,IAHA,IAAIK,EAAO,GACPD,EAAa/D,KAAKG,QAED,MAAd4D,GACHC,GAAQD,EAAWzC,KAAO,KAEtByC,EADuB,MAAxBA,EAAW9D,UACG8D,EAAW9D,UAEX,KAIrB+D,GAAQ,OAERrD,QAAQC,IAAIoD,K,wBAGhB,SAAWC,EAAcC,GAGrB,IAFA,IAAIH,EAAa/D,KAAKG,QAEF,MAAd4D,GACCA,EAAWzC,MAAQ2C,IAClBF,EAAWzC,KAAO4C,GAGtBH,EAAaA,EAAW9D,Y,oBAIhC,SAAQqB,GAIJ,IAHA,IACIyC,EAAa/D,KAAKG,QAEF,MAAd4D,GAAmB,CACrB,GAAGA,EAAWzC,MAAQA,EAElB,MADiB,2BAAyByC,EAAWzC,KAIzDyC,EAAaA,EAAW9D,UAG5B,MADiB,2B,sBAIxB,SAASqB,GACH,IAAIyC,EAAa/D,KAAKG,QACjBgE,EAAe,KAEnB,GAAiB,MAAdJ,GAAsBA,EAAWzC,MAAQA,EAA5C,CAKA,KAAoB,MAAdyC,GAAsBA,EAAWzC,MAAQA,GAC3C6C,EAAeJ,EACfA,EAAaA,EAAW9D,UAGV,MAAd8D,IAIJI,EAAalE,UAAY8D,EAAW9D,gBAbhCD,KAAKG,QAAU4D,EAAW9D,Y,oBAgBlC,SAAOmE,GAAK,IAAD,OACPA,EAAIpD,KAAI,SAAAqD,GACJ,EAAKC,QAAQD,EAAEtE,MAAMsE,EAAEE,gB,qBAI/B,WAII,IAHA,IAAIxD,EAAU,GACVgD,EAAa/D,KAAKG,QAED,MAAd4D,GAAmB,CACtB,IAAIY,EAAQ,CAAC5E,MAAOgE,EAAWzC,KAAMiD,UAAWR,EAAWQ,WAC3DxD,EAAQI,KAAKwD,GAETZ,EADuB,MAAxBA,EAAW9D,UACG8D,EAAW9D,UAEX,KAKrB,OAAOc,I,uBAGd,SAAUK,GAKH,IAJA,IAAIL,EAAU,GACVgD,EAAa/D,KAAKG,QAClBkB,EAAW,EAEM,MAAd0C,GAAmB,CACtB,IAAIzC,EAAO,CAACR,GAAIO,EAAUE,MAAOwC,EAAWzC,KAAKE,YAGjD,GAFAT,EAAQM,GAAYC,EAEjByC,EAAWzC,MAAQF,EAAW,CAC7B,IAAIE,EAAO,CAACR,GAAIO,EAAUE,MAAOwC,EAAWzC,KAAKE,WAAaC,MAAO,QACrEV,EAAQM,GAAYC,EAIpByC,EADuB,MAAxBA,EAAW9D,UACG8D,EAAW9D,UAEX,KAEjBoB,IAGJ,OAAON,M,KC9LTlB,EACF,WAAYE,GAAQ,oBAChBC,KAAKD,MAAQA,EACbC,KAAK4E,QAAU,KACf5E,KAAK6E,UAAY,KACjB7E,KAAK8E,OAAS,GA2WPC,E,WArWX,aAAe,oBACX/E,KAAKgF,KAAO,K,uCAIhB,SAAIC,EAAQC,GACR,OAAID,EAASC,EACFD,EAEAC,I,oBAIf,SAAOzE,GACH,OAAY,MAARA,GACQ,EAGDA,EAAKqE,S,qBAMpB,SAAQ/E,GAEJC,KAAKgF,KAAOhF,KAAKmF,SAASpF,EAAOC,KAAKgF,Q,sBAI1C,SAASjF,EAAOW,GACZ,GAAgB,MAAZA,EACA,OAAO,IAAIb,EAAKE,GAMZA,EAAQW,EAASX,OACjBW,EAASmE,UAAY7E,KAAKmF,SAASpF,EAAOW,EAASmE,WAC9C7E,KAAK8E,OAAOpE,EAASkE,SAAW5E,KAAK8E,OAAOpE,EAASmE,aAAgB,IAElEnE,EADAX,EAAQW,EAASmE,UAAU9E,MAChBC,KAAKoF,YAAY1E,GAEjBV,KAAKqF,iBAAiB3E,KAGlCX,EAAQW,EAASX,OACxBW,EAASkE,QAAU5E,KAAKmF,SAASpF,EAAOW,EAASkE,SAC5C5E,KAAK8E,OAAOpE,EAASkE,SAAW5E,KAAK8E,OAAOpE,EAASmE,YAAe,IAEjEnE,EADAX,EAAQW,EAASkE,QAAQ7E,MACdC,KAAKsF,UAAU5E,GAEfV,KAAKuF,eAAe7E,KAOvCA,EAASX,MAAQA,EAIzB,IAAIyF,EAASxF,KAAK8E,OAAOpE,EAASkE,SAC9Ba,EAASzF,KAAK8E,OAAOpE,EAASmE,WAElC,OADAnE,EAASoE,OAAS9E,KAAK0F,IAAIF,EAAOC,GAAQ,EACnC/E,I,yBAKX,SAAYD,GACR,IAAIkF,EAMJ,OALAA,EAAMlF,EAAKoE,UACXpE,EAAKoE,UAAYc,EAAIf,QACrBe,EAAIf,QAAUnE,EACdA,EAAKqE,OAAS9E,KAAK0F,IAAI1F,KAAK8E,OAAOrE,EAAKmE,SAAU5E,KAAK8E,OAAOrE,EAAKoE,YAAa,EAChFc,EAAIb,OAAS9E,KAAK0F,IAAI1F,KAAK8E,OAAOrE,EAAKoE,WAAWpE,EAAKqE,QAAU,EAC1Da,I,uBAKX,SAAUlF,GACN,IAAIkF,EAMJ,OALAA,EAAMlF,EAAKmE,QACXnE,EAAKmE,QAAUe,EAAId,UACnBc,EAAId,UAAYpE,EAChBA,EAAKqE,OAAS9E,KAAK0F,IAAI1F,KAAK8E,OAAOrE,EAAKmE,SAAU5E,KAAK8E,OAAOrE,EAAKoE,YAAa,EAChFc,EAAIb,OAAS9E,KAAK0F,IAAI1F,KAAK8E,OAAOrE,EAAKmE,SAAUnE,EAAKqE,QAAU,EACzDa,I,8BAKX,SAAiBlF,GAEb,OADAA,EAAKoE,UAAa7E,KAAKsF,UAAU7E,EAAKoE,WAC/B7E,KAAKoF,YAAY3E,K,4BAK5B,SAAeA,GAEX,OADAA,EAAKmE,QAAU5E,KAAKoF,YAAY3E,EAAKmE,SAC9B5E,KAAKsF,UAAU7E,K,oBAI1B,SAAOM,GAAU,IAAD,OAEZA,EAAQC,KAAI,SAAAqD,GACR,EAAKpD,QAAQoD,Q,sBAKrB,SAAStE,GACLC,KAAK4F,UAAU7F,EAAOC,KAAKgF,KAAM,MACjChF,KAAK6F,UAAU7F,KAAKgF,Q,uBAKxB,SAAUjF,EAAOW,EAAUoF,GACnB/F,GAASW,EAASX,QACO,MAApBW,EAASkE,SAA2C,MAAtBlE,EAASmE,UACrCiB,EAASlB,SAAWlE,EACnBoF,EAASlB,QAAU,KACdkB,EAASjB,WAAanE,IAC3BoF,EAASjB,UAAY,MAII,MAAtBnE,EAASmE,UAChB7E,KAAK+F,oBAAoBrF,EAAUA,EAASmE,UAAWiB,GAEzB,MAAtBpF,EAASmE,WAA0C,MAApBnE,EAASkE,WAC5CkB,EAASlB,QAAUlE,IACnBoF,EAASlB,QAAUlE,EAASkE,QAC5BlE,EAAW,OACJoF,EAASjB,UAAYnE,KAC5BoF,EAASjB,UAAYnE,EAASkE,QAC9BlE,EAAW,QAKR,MAAZA,GAC2B,MAAtBA,EAASmE,YACL9E,GAASW,EAASmE,UAAU9E,OAC5BC,KAAK4F,UAAU7F,EAAOW,EAASmE,UAAWnE,GAEtB,MAApBA,EAASkE,SACL7E,GAASW,EAASkE,QAAQ7E,OAC1BC,KAAK4F,UAAU7F,EAAOW,EAASkE,QAASlE,M,iCAS5D,SAAoBsF,EAActF,EAAUuF,GAMxC,IAJA,IAAIN,EAAMjF,EACNwF,EAAc,KACdC,GAAU,EAEQ,MAAfR,EAAIf,SACPuB,GAAU,EACVD,EAAcP,EACdA,EAAMA,EAAIf,QAEO,MAAjBe,EAAId,UACJqB,EAAYtB,QAAUe,EAAId,UACR,GAAXsB,EACPD,EAAYtB,QAAU,KACJ,GAAXuB,GACHH,EAAanB,WAAanE,IAC1BsF,EAAanB,UAAYnE,EAASmE,WAItCoB,EAAcrB,SAAWoB,EACzBC,EAAcrB,QAAQ7E,MAAQ4F,EAAI5F,MAC3BkG,EAAcpB,WAAamB,IAClCC,EAAcpB,UAAU9E,MAAQ4F,EAAI5F,OAExC4F,EAAM,O,uBAIV,WACI3F,KAAKoG,iBAAiBpG,KAAKgF,MAC3BhF,KAAKgF,KAAOhF,KAAKqG,WAAWrG,KAAKgF,Q,wBAIrC,SAAWtE,GACP,GAA0B,MAAtBA,EAASmE,UACT,OAAOnE,EACL,GAAuB,MAApBA,EAASkE,QACd,OAAOlE,EAIPA,EAASmE,UAAY7E,KAAKqG,WAAW3F,EAASmE,WACzC7E,KAAK8E,OAAOpE,EAASmE,WAAa7E,KAAK8E,OAAOpE,EAASkE,UAAa,IAEjElE,EAD8B,MAA9BA,EAASmE,UAAUD,QACR5E,KAAKoF,YAAY1E,GAEjBV,KAAKqF,iBAAiB3E,IAGzCA,EAASkE,QAAU5E,KAAKqG,WAAW3F,EAASkE,SACvC5E,KAAK8E,OAAOpE,EAASkE,SAAW5E,KAAK8E,OAAOpE,EAASmE,YAAe,IAEjEnE,EAD8B,MAA9BA,EAASkE,QAAQC,UACN7E,KAAKsF,UAAU5E,GAEfV,KAAKuF,eAAe7E,IAK3C,IAAI8E,EAASxF,KAAK8E,OAAOpE,EAASkE,SAC9Ba,EAASzF,KAAK8E,OAAOpE,EAASmE,WAElC,OADAnE,EAASoE,OAAS9E,KAAK0F,IAAIF,EAAQC,GAAU,EACtC/E,I,8BAGX,SAAiBA,GACa,MAAtBA,EAASmE,UACT7E,KAAKoG,iBAAiB1F,EAASmE,WACJ,MAApBnE,EAASkE,SAChB5E,KAAKoG,iBAAiB1F,EAASkE,SAEnClE,EAASoE,OAAS9E,KAAK0F,IAAI1F,KAAK8E,OAAOpE,EAASkE,SAAU5E,KAAK8E,OAAOpE,EAASmE,YAAc,I,wBAKjG,SAAW9E,EAAOuG,GACdtG,KAAKuG,SAASxG,GACdC,KAAKiB,QAAQqF,K,oBAGjB,SAAOvG,GACJ,IAAIyG,EAAWxG,KAAKyG,QAAQ1G,EAAMC,KAAKgF,MACvCrE,QAAQC,IAAI,WACZD,QAAQC,IAAI4F,EAASzG,OACrBY,QAAQC,IAAI,a,qBAIf,SAAQb,EAAOW,GACX,GAAGA,EAASX,MAAQA,EAChBW,EAAWV,KAAKyG,QAAQ1G,EAAOW,EAASmE,gBACtC,GAAGnE,EAASX,MAAQA,EACtBW,EAAWV,KAAK0G,OAAO3G,EAAOW,EAASkE,cACrC,GAAGlE,EAASX,OAASA,EACvB,OAAOW,I,qBAMf,WAEI,OAAOV,KAAK2G,SAAS3G,KAAKgF,KADb,M,sBAIjB,SAASvE,EAAKmG,GAMV,OALW,MAARnG,IACHmG,EAAOzF,KAAKV,EAAKV,OACjBC,KAAK2G,SAASlG,EAAKoE,UAAU+B,GAC7B5G,KAAK2G,SAASlG,EAAKmE,QAAQgC,IAEpBA,I,0BAGX,SAAanG,GACE,MAARA,IACHE,QAAQC,IAAIH,EAAKV,OACjBC,KAAK6G,aAAapG,EAAKoE,WACvB7E,KAAK6G,aAAapG,EAAKmE,Y,2BAI3B,SAAcnE,EAAKmG,EAAOxF,GAGlB,IAAIE,EASAA,EAVa,MAAlBb,EAAKoE,WAAqC,MAAhBpE,EAAKmE,SAG1BtD,EADDF,GAAcX,EAAKV,MACX,CAACe,GAAIL,EAAKV,MAAOwB,MAAOd,EAAKV,MAAMyB,WAAYC,MAAO,QAEtD,CAACX,GAAIL,EAAKV,MAAOwB,MAAOd,EAAKV,MAAMyB,YAG9CoF,EAAOzF,KAAKG,KAIRA,EADDF,GAAcX,EAAKV,MACX,CAACe,GAAIL,EAAKV,MAAOwB,MAAOd,EAAKV,MAAMyB,WAAYC,MAAO,QAEtD,CAACX,GAAIL,EAAKV,MAAOwB,MAAOd,EAAKV,MAAMyB,YAG9CoF,EAAOzF,KAAKG,IAWhB,OARqB,MAAlBb,EAAKoE,WACJ7E,KAAK8G,cAAcrG,EAAKoE,UAAU+B,EAAOxF,GAGzB,MAAhBX,EAAKmE,SACL5E,KAAK8G,cAAcrG,EAAKmE,QAAQgC,EAAOxF,GAGpCwF,I,0BAGX,SAAaxF,GAGT,OAAOpB,KAAK8G,cAAc9G,KAAKgF,KAFlB,GAE8B5D,K,iCAG/C,SAAoBX,EAAKmG,GAErB,GAAqB,MAAlBnG,EAAKoE,UAAkB,CACtB7E,KAAK+G,oBAAoBtG,EAAKoE,UAAU+B,GACxC,IAAII,EAAO,CAACC,KAAKxG,EAAKV,MAAOgC,GAAGtB,EAAKoE,UAAU9E,OAC/C6G,EAAOzF,KAAK6F,GAGhB,GAAoB,MAAhBvG,EAAKmE,QAAgB,CACrB5E,KAAK+G,oBAAoBtG,EAAKmE,QAAQgC,GACtC,IAAII,EAAO,CAACC,KAAKxG,EAAKV,MAAOgC,GAAGtB,EAAKmE,QAAQ7E,OAC7C6G,EAAOzF,KAAK6F,GAGhB,OAAOJ,I,+BAGX,WAGI,OAAO5G,KAAK+G,oBAAoB/G,KAAKgF,KAFxB,Q,KCpWfnF,GADGC,EAAQ,IAEb,WAAYwB,GAAM,oBACdtB,KAAKsB,KAAOA,EACZtB,KAAK6E,UAAY,KACjB7E,KAAK4E,QAAU,OA6fRsC,E,WAvfX,aAAc,oBACVlH,KAAKgF,KAAO,K,4CAIhB,SAAS1D,GACLtB,KAAKgF,KAAOhF,KAAKmH,IAAI7F,EAAMtB,KAAKgF,MAChCrE,QAAQC,IAAI,qB,iBAIhB,SAAIU,EAAMb,GACN,OAAW,MAARA,EACQ,IAAIZ,EAAKyB,IAEbA,EAAOb,EAAKa,KACXb,EAAKmE,QAAW5E,KAAKmH,IAAI7F,EAAKb,EAAKmE,SAEnCnE,EAAKoE,UAAa7E,KAAKmH,IAAI7F,EAAKb,EAAKoE,WAGtCpE,K,oBAIX,SAAOa,EAAMb,GACT,GAAU,MAAPA,EAAY,CACX,GAAGa,GAAQb,EAAKa,KAEZ,YADAX,QAAQC,IAAIH,EAAKa,KAAO,mBAG5BtB,KAAK0G,OAAOpF,EAAMb,EAAKoE,WACvB7E,KAAK0G,OAAOpF,EAAMb,EAAKmE,Y,sBAK/B,SAAStD,GACL,GAAe,MAAZtB,KAAKgF,KAIR,GAAG1D,GAAQtB,KAAKgF,KAAK1D,KAArB,CAIA,IAAIb,EAAOT,KAAKgF,KAChBhF,KAAK0G,OAAOpF,EAAMb,QAJdE,QAAQC,IAAIZ,KAAKgF,KAAK1D,WAJtBX,QAAQC,IAAI,qB,sBAYpB,SAASH,GACM,MAARA,IACCE,QAAQC,IAAIH,EAAKa,MACjBtB,KAAKoH,SAAS3G,EAAKoE,WACnB7E,KAAKoH,SAAS3G,EAAKmE,Y,yBAK3B,WACmB,MAAZ5E,KAAKgF,KAIRhF,KAAKoH,SAASpH,KAAKgF,MAHfrE,QAAQC,IAAI,qB,wBAOpB,SAAWU,GAEP,GAAe,MAAZtB,KAAKgF,KAAR,CAKA,IAAIvE,EAAOT,KAAKgF,KAChBhF,KAAKuG,SAASjF,EAAMb,QALhBE,QAAQC,IAAI,qB,sBASpB,SAASU,EAAMb,GAEX,GAAGa,GAAQtB,KAAKgF,KAAK1D,KAArB,CA+EA,GAAoB,MAAjBb,EAAKoE,WAEDvD,GAAQb,EAAKoE,UAAUvD,KAAK,CAC3B,IAAI+F,EAAM5G,EAAKoE,UAEf,GAAoB,MAAjBwC,EAAIxC,WAAoC,MAAfwC,EAAIzC,QAG5B,OAFAnE,EAAKoE,UAAY,UACjBlE,QAAQC,IAAI,qCAGZ,GAAoB,MAAjByG,EAAIxC,UAAkB,CACrB,IACIyC,EAAO,KACX,GAAoB,MAFRD,EAAIxC,UAEPD,QAEJ,CAED,GADA0C,EAAQD,EAAIxC,UACM,MAAfwC,EAAIzC,QAAgB,CACnB,IAAI2C,EAASF,EAAIzC,QACjB0C,EAAM1C,QAAU2C,EAChBF,EAAIzC,QAAU,KAKlB,OAHAyC,EAAIxC,UAAY,KAChBpE,EAAKoE,UAAYyC,OACjB3G,QAAQC,IAAI,sBAGhB,IAAI4G,EAAS,IAAI/G,EAbb6G,EAAQtH,KAAKyH,OAAOJ,EAAIxC,YAcxB6C,EAAS,KACTC,EAAU,KAiBd,OAhBkB,MAAfN,EAAIxC,YACH6C,EAASL,EAAIxC,WAEC,MAAfwC,EAAIzC,UACH+C,EAAUN,EAAIzC,SAEL,MAAV8C,IACCF,EAAO3C,UAAY6C,EACnBL,EAAIxC,UAAY,MAEN,MAAX8C,IACCH,EAAO5C,QAAU+C,EACjBN,EAAIzC,QAAU,MAElBnE,EAAKoE,UAAY2C,OACjB7G,QAAQC,IAAI,sBAEV,GAAoB,MAAjByG,EAAIxC,WAAoC,MAAfwC,EAAIzC,QAAgB,CAClD,IACIgD,EAAQ,KACZ,GAAsB,MAFVP,EAAIzC,QAEPC,UAEJ,CAED,GADA+C,EAASP,EAAIzC,QACO,MAAjByC,EAAIxC,UAAkB,CACrB,IAAI0C,EAASF,EAAIxC,UACjB+C,EAAO/C,UAAY0C,EACnBF,EAAIxC,UAAY,KAKpB,OAHApE,EAAKmE,QAAUgD,EACfP,EAAIzC,QAAU,UACdjE,QAAQC,IAAI,sBAGhB,IAAIiH,EAAS,IAAIpH,EAbbmH,EAAS5H,KAAK8H,OAAOT,EAAIzC,UAczB8C,EAAS,KACTC,EAAU,KAiBd,OAhBkB,MAAfN,EAAIxC,YACH6C,EAASL,EAAIxC,WAEC,MAAfwC,EAAIzC,UACH+C,EAAUN,EAAIzC,SAEL,MAAV8C,IACCG,EAAOhD,UAAY6C,EACnBL,EAAIxC,UAAY,MAEN,MAAX8C,IACCE,EAAOjD,QAAU+C,EACjBN,EAAIzC,QAAU,MAElBnE,EAAKmE,QAAUiD,OACflH,QAAQC,IAAI,uBAM5B,GAAmB,MAAhBH,EAAKmE,SAEDtD,GAAQb,EAAKmE,QAAQtD,KAAK,CACzB,IAAI+F,EAAM5G,EAAKmE,QACf,GAAoB,MAAjByC,EAAIxC,WAAoC,MAAfwC,EAAIzC,QAG5B,OAFAnE,EAAKmE,QAAU,UACfjE,QAAQC,IAAI,qCAGZ,GAAkB,MAAfyG,EAAIzC,QAAgB,CACnB,IACIgD,EAAQ,KACZ,GAAsB,MAFVP,EAAIzC,QAEPC,UAEJ,CAED,GADA+C,EAASP,EAAIzC,QACO,MAAjByC,EAAIxC,UAAkB,CACrB,IAAI0C,EAASF,EAAIxC,UACjB+C,EAAO/C,UAAY0C,EACnBF,EAAIxC,UAAY,KAKpB,OAHApE,EAAKmE,QAAUgD,EACfP,EAAIzC,QAAU,UACdjE,QAAQC,IAAI,sBAGhB,IAAIiH,EAAS,IAAIpH,EAbbmH,EAAS5H,KAAK8H,OAAOT,EAAIzC,UAczB8C,EAAS,KACTC,EAAU,KACI,MAAfN,EAAIxC,YACH6C,EAASL,EAAIxC,WAEC,MAAfwC,EAAIzC,UACH+C,EAAUN,EAAIzC,SAEL,MAAV8C,IACCG,EAAOhD,UAAY6C,EACnBL,EAAIxC,UAAY,MAEN,MAAX8C,IACCE,EAAOjD,QAAU+C,EACjBN,EAAIzC,QAAU,MAElBnE,EAAKmE,QAAUiD,OACb,GAAkB,MAAfR,EAAIzC,SAAoC,MAAjByC,EAAIxC,UAAkB,CAClD,IACIyC,EAAO,KACX,GAAoB,MAFRD,EAAIxC,UAEPD,QAEJ,CAED,GADA0C,EAAQD,EAAIxC,UACM,MAAfwC,EAAIzC,QAAgB,CACnB,IAAI2C,EAASF,EAAIzC,QACjB0C,EAAM1C,QAAU2C,EAChBF,EAAIzC,QAAU,KAKlB,OAHAyC,EAAIxC,UAAY,KAChBpE,EAAKoE,UAAYyC,OACjB3G,QAAQC,IAAI,sBAGhB,IAAI4G,EAAS,IAAI/G,EAbb6G,EAAQtH,KAAKyH,OAAOJ,EAAIxC,YAcxB6C,EAAS,KACTC,EAAU,KACI,MAAfN,EAAIxC,YACH6C,EAASL,EAAIxC,WAEC,MAAfwC,EAAIzC,UACH+C,EAAUN,EAAIzC,SAEL,MAAV8C,IACCF,EAAO3C,UAAY6C,EACnBL,EAAIxC,UAAY,MAEN,MAAX8C,IACCH,EAAO5C,QAAU+C,EACjBN,EAAIzC,QAAU,MAElBnE,EAAKoE,UAAY2C,GAKb,MAAjB/G,EAAKoE,WACJ7E,KAAKuG,SAASjF,EAAMb,EAAKoE,WAEX,MAAhBpE,EAAKmE,SACH5E,KAAKuG,SAASjF,EAAMb,EAAKmE,aA9P7B,CACI,GAAqB,MAAlBnE,EAAKoE,UAAkB,CACtB,IACIyC,EAAO,KACX,GAAoB,MAFR7G,EAAKoE,UAERD,QAEJ,CAED,GADA0C,EAAQ7G,EAAKoE,UACM,MAAhBpE,EAAKmE,QAAgB,CACpB,IAAI2C,EAAS9G,EAAKmE,QAClB0C,EAAM1C,QAAU2C,EAChB9G,EAAKmE,QAAU,KAInB,OAFAnE,EAAKoE,UAAY,UACjBlE,QAAQC,IAAI,sBAGhB,IAAI4G,EAAS,IAAI/G,EAZb6G,EAAQtH,KAAKyH,OAAOhH,EAAKoE,YAazB6C,EAAS,KACTC,EAAU,KAgBd,OAfmB,MAAhBlH,EAAKoE,YACJ6C,EAASjH,EAAKoE,WAEC,MAAhBpE,EAAKmE,UACJ+C,EAAUlH,EAAKmE,SAEN,MAAV8C,IACCF,EAAO3C,UAAY6C,EACnBjH,EAAKoE,UAAY,MAEP,MAAX8C,IACCH,EAAO5C,QAAU+C,EACjBlH,EAAKmE,QAAU,WAEnBjE,QAAQC,IAAI,sBAEV,GAAqB,MAAlBH,EAAKoE,WAAqC,MAAhBpE,EAAKmE,QAAgB,CACpD,IACIgD,EAAQ,KACZ,GAAsB,MAFVnH,EAAKmE,QAERC,UAEJ,CAED,GADA+C,EAASnH,EAAKmE,QACO,MAAlBnE,EAAKoE,UAAkB,CACtB,IAAI0C,EAAS9G,EAAKoE,UAClB+C,EAAO/C,UAAY0C,EACnB9G,EAAKoE,UAAY,KAKrB,OAHA7E,KAAKgF,KAAOvE,EAAKmE,QACjBnE,EAAKmE,QAAU,UACfjE,QAAQC,IAAI,sBAGhB,IAAIiH,EAAS,IAAIpH,EAbbmH,EAAS5H,KAAK8H,OAAOrH,EAAKmE,UAc1B8C,EAAS,KACTC,EAAU,KAiBd,OAhBmB,MAAhBlH,EAAKoE,YACJ6C,EAASjH,EAAKoE,WAEC,MAAhBpE,EAAKmE,UACJ+C,EAAUlH,EAAKmE,SAEN,MAAV8C,IACCG,EAAOhD,UAAY6C,EACnBjH,EAAKoE,UAAY,MAEP,MAAX8C,IACCE,EAAOjD,QAAU+C,EACjBlH,EAAKmE,QAAU,MAEnB5E,KAAKgF,KAAO6C,OACZlH,QAAQC,IAAI,sBAGZZ,KAAKgF,KAAO,Q,oBAyLxB,SAAOvE,GACH,GAAoB,MAAhBA,EAAKmE,QAAgB,CACrB,IAAIyC,EAAM5G,EAAKmE,QACf,GAAiB,MAAdyC,EAAIzC,QAEF,CACD,IAAImD,EAAaV,EAAI/F,KAOrB,OANoB,MAAjB+F,EAAIxC,WACHpE,EAAKmE,QAAUyC,EAAIxC,UACnBwC,EAAIxC,UAAY,MAEhBpE,EAAKmE,QAAU,KAEZmD,EATP/H,KAAKyH,OAAOJ,M,oBAexB,SAAO5G,GACH,GAAsB,MAAlBA,EAAKoE,UAAkB,CACvB,IAAIwC,EAAM5G,EAAKoE,UACf,GAAmB,MAAhBwC,EAAIxC,UAEF,CACD,IAAIkD,EAAaV,EAAI/F,KAOrB,OANkB,MAAf+F,EAAIzC,SACHnE,EAAKoE,UAAYwC,EAAIzC,QACrByC,EAAIzC,QAAU,MAEdnE,EAAKoE,UAAY,KAEdkD,EATP/H,KAAK8H,OAAOT,M,wBAexB,SAAWW,EAAUC,GACH,MAAXjI,KAAKgF,MACJrE,QAAQC,IAAI,0BAEhBZ,KAAKkI,WAAWF,GAChBhI,KAAKmI,SAASF,GACdtH,QAAQC,IAAI,iB,oBAGhB,SAAOG,GAAU,IAAD,OACZA,EAAQC,KAAI,SAAAqD,GACR,EAAK8D,SAAS9D,Q,qBAMtB,WAEI,OAAOrE,KAAK2G,SAAS3G,KAAKgF,KADb,M,sBAIjB,SAASvE,EAAKmG,GAMV,OALW,MAARnG,IACHmG,EAAOzF,KAAKV,EAAKa,MACjBtB,KAAK2G,SAASlG,EAAKoE,UAAU+B,GAC7B5G,KAAK2G,SAASlG,EAAKmE,QAAQgC,IAEpBA,I,2BAIX,SAAcnG,EAAKmG,EAAOxF,GAGlB,IAAIE,EASAA,EAVa,MAAlBb,EAAKoE,WAAqC,MAAhBpE,EAAKmE,SAG1BtD,EADDF,GAAcX,EAAKa,KACX,CAACR,GAAIL,EAAKa,KAAMC,MAAOd,EAAKa,KAAKE,WAAYC,MAAO,QAEpD,CAACX,GAAIL,EAAKa,KAAMC,MAAOd,EAAKa,KAAKE,YAG5CoF,EAAOzF,KAAKG,KAIRA,EADDF,GAAcX,EAAKa,KACX,CAACR,GAAIL,EAAKa,KAAMC,MAAOd,EAAKa,KAAKE,WAAYC,MAAO,QAEpD,CAACX,GAAIL,EAAKa,KAAMC,MAAOd,EAAKa,KAAKE,YAG5CoF,EAAOzF,KAAKG,IAWhB,OARqB,MAAlBb,EAAKoE,WACJ7E,KAAK8G,cAAcrG,EAAKoE,UAAU+B,EAAOxF,GAGzB,MAAhBX,EAAKmE,SACL5E,KAAK8G,cAAcrG,EAAKmE,QAAQgC,EAAOxF,GAGpCwF,I,0BAGX,SAAaxF,GAGT,OAAOpB,KAAK8G,cAAc9G,KAAKgF,KAFlB,GAE8B5D,K,iCAG/C,SAAoBX,EAAKmG,GAErB,GAAqB,MAAlBnG,EAAKoE,UAAkB,CACtB7E,KAAK+G,oBAAoBtG,EAAKoE,UAAU+B,GACxC,IAAII,EAAO,CAACC,KAAKxG,EAAKa,KAAMS,GAAGtB,EAAKoE,UAAUvD,MAC9CsF,EAAOzF,KAAK6F,GAGhB,GAAoB,MAAhBvG,EAAKmE,QAAgB,CACrB5E,KAAK+G,oBAAoBtG,EAAKmE,QAAQgC,GACtC,IAAII,EAAO,CAACC,KAAKxG,EAAKa,KAAMS,GAAGtB,EAAKmE,QAAQtD,MAC5CsF,EAAOzF,KAAK6F,GAGhB,OAAOJ,I,+BAGX,WAGI,OAAO5G,KAAK+G,oBAAoB/G,KAAKgF,KAFxB,M,sBAKjB,SAASvE,GACL,IAAI2H,EAAW,GAef,OAZIA,GADiB,MAAlB3H,EAAKoE,WAAqBpE,EAAKmE,QACnB,OAASnE,EAAKa,KAAKE,WAAY,4BAA+Bf,EAAKa,KAAKE,WAAY,UAK9E,MAAlBf,EAAKoE,YACJuD,EAAWA,EAAWpI,KAAKqI,SAAS5H,EAAKoE,WAAa,OAASpE,EAAKa,KAAKE,WAAa,WAAaf,EAAKoE,UAAUvD,KAAKE,WAAa,MAErH,MAAhBf,EAAKmE,UACJwD,EAAWA,EAAWpI,KAAKqI,SAAS5H,EAAKmE,SAAW,OAASnE,EAAKa,KAAKE,WAAa,WAAaf,EAAKmE,QAAQtD,KAAKE,WAAa,MAG7H4G,I,2BAIX,WAII,MAFU,gEAAmEpI,KAAKqI,SAASrI,KAAKgF,MAAO,Q,KC3fvGsD,EAAWxI,EAAQ,KAAnBwI,OAGFC,EAEF,WAAYC,GAAa,oBACrBxI,KAAKwI,YAAcA,EACnBxI,KAAKC,UAAY,KACjBD,KAAK8F,SAAW,MAIpB2C,EAAiB,EACjBC,EAAS,GAGPC,E,WAEF,aAAc,oBACV3I,KAAK4I,OAAS,KACd5I,KAAK6I,KAAO,KACZ7I,KAAK8I,KAAO,E,+CAIhB,SAAYxH,GACR,IAAIb,EAAO,IAAI8H,EAAkBjH,GAEjC,GAAkB,MAAftB,KAAK4I,OACJ5I,KAAK4I,OAASnI,EACdT,KAAK6I,KAAOpI,EACZT,KAAK8I,YACH,GAAkB,MAAf9I,KAAK4I,OAAe,CAEzB,IADA,IAAIjD,EAAM3F,KAAK4I,OACTjD,GAAO3F,KAAK6I,MACdlD,EAAMA,EAAI1F,UAEd0F,EAAI1F,UAAYQ,EAChBA,EAAKqF,SAAWH,EAChB3F,KAAK6I,KAAOpI,EACZT,KAAK8I,U,2BAKb,SAAcxH,GACV,IAAIb,EAAOT,KAAK4I,OAChB,GAAG5I,KAAK4I,OAAOJ,aAAelH,GAAQtB,KAAK4I,QAAU5I,KAAK6I,KAKtD,OAHA7I,KAAK4I,OAAS,KACd5I,KAAK6I,KAAO,UACZ7I,KAAK8I,KAAO,GAGhB,KAAMrI,EAAK+H,aAAelH,GAAQb,GAAQT,KAAK6I,MAC3CpI,EAAOA,EAAKR,UAEhB,GAAGQ,EAAK+H,aAAclH,GAAyB,MAAjBb,EAAKqF,UAAsC,MAAlBrF,EAAKR,UAAkB,CAE1E,IAAIoH,EAAM5G,EAAKR,UAKf,OAJAD,KAAK4I,OAASvB,EACdA,EAAIvB,SAAW,KACfrF,EAAKR,UAAY,UACjBD,KAAK8I,OAEH,GAAGrI,EAAK+H,aAAelH,GAA0B,MAAlBb,EAAKR,WAAsC,MAAjBQ,EAAKqF,SAAiB,CAEjF,IAAIuB,EAAM5G,EAAKR,UAMf,OALAoH,EAAIvB,SAAWrF,EAAKqF,SACpBrF,EAAKqF,SAAS7F,UAAYoH,EAC1B5G,EAAKR,UAAY,KACjBQ,EAAKqF,SAAW,UAChB9F,KAAK8I,OAEH,GAAGrI,EAAK+H,aAAelH,GAA0B,MAAlBb,EAAKR,WAAsC,MAAjBQ,EAAKqF,SAAiB,CAEjF,IAAIuB,EAAM5G,EAAKqF,SAKf,OAJA9F,KAAK6I,KAAOxB,EACZA,EAAIpH,UAAY,KAChBQ,EAAKqF,SAAW,UAChB9F,KAAK8I,OAGE,MAARrI,GAECE,QAAQC,IAAI,yC,KAOpBmI,EAAU,GAGRlJ,EAEF,WAAYyB,EAAMuD,EAAWD,EAASoE,GAAU,oBAC5ChJ,KAAKsB,KAAOA,EACZtB,KAAKiJ,KAAO,KACZjJ,KAAKc,GAAK,EACVd,KAAKgJ,SAAWA,EAChBhJ,KAAK6E,UAAYA,EACjB7E,KAAK4E,QAAUA,GAiYRsE,E,WA1XX,aAAc,oBACVlJ,KAAKgF,KAAO,K,4CAIhB,SAAS1D,GACL,IAAIb,EAAO,IAAIZ,EAAKyB,EAAM,KAAM,MAAM,GAEtC,GAAgB,MAAbtB,KAAKgF,KAAa,CACjB,IAAImE,EAAW,IAAIR,EACnBQ,EAASC,YAAY3I,GACrB0I,EAASC,YAAY,IAAIvJ,GAAM,EAAG,KAAM,MAAM,IAC9CG,KAAKqJ,eAAeF,OACnB,CACD,IAAIA,EAAWnJ,KAAKsJ,eACpBH,EAASC,YAAY3I,GACrBT,KAAKqJ,eAAeF,GAGxBnJ,KAAKuJ,UACLd,EAAiB,I,0BAIrB,WACI,IAAIU,EAAW,IAAIR,EAGnB,OAFA3I,KAAKwJ,aAAaL,EAAUnJ,KAAKgF,KAAKH,WACtC7E,KAAKwJ,aAAaL,EAAUnJ,KAAKgF,KAAKJ,SAC/BuE,I,0BAIX,SAAaM,EAAOhJ,GACL,MAARA,IACCT,KAAKwJ,aAAaC,EAAOhJ,EAAKoE,WACnB,MAARpE,IAA8B,GAAdA,EAAKa,MAA+B,GAAjBb,EAAKuI,UACvCS,EAAML,YAAY3I,GAEtBT,KAAKwJ,aAAaC,EAAOhJ,EAAKmE,Y,4BAKtC,SAAe6E,GAKX,IAJA,IACIC,EAAO,EACPC,EAFU,IAAIC,aAAaH,EAAMX,MAEbe,OAAO,EAExBF,EAAY,GACfD,IACAC,GAAsB,EAK1B,IAHA,IAAIG,EAAc,IAAIF,aAAaF,GAC/BK,EAAaC,KAAKC,IAAI,EAAGH,EAAYD,QAEnCJ,EAAMX,KAAOkB,KAAKE,MAAMH,IAC1BN,EAAML,YAAY,IAAIvJ,GAAM,EAAE,KAAK,MAAK,IAG5C,KAAM4J,EAAMX,KAAK,GAAE,CACf,IAAI3I,EAAUsJ,EAAMb,OAChBuB,EAAUhK,EAAQF,UACtBwJ,EAAMW,cAAcjK,EAAQqI,aAC5BiB,EAAMW,cAAcD,EAAQ3B,aAC5B,IAAI6B,EAAQlK,EAAQqI,YACpB6B,EAAMvJ,GAAK2H,EAAiB,EAC5B,IAAI6B,EAAQH,EAAQ3B,YACpB8B,EAAMxJ,GAAK2H,EAAiB,EAC5B,IAAI8B,EAAOF,EAAM/I,KAAOgJ,EAAMhJ,KAC1BkJ,EAAQ,IAAI3K,EAAK0K,EAAMF,EAAOC,GAAM,GACxCE,EAAM1J,GAAK2H,EACXgB,EAAML,YAAYoB,GAClB/B,GAAkC,EAGtCzI,KAAKgF,KAAOyE,EAAMb,OAAOJ,c,qBAI7B,WACmB,MAAZxI,KAAKgF,KAIRhF,KAAKyK,WAAWzK,KAAKgF,MAHjBrE,QAAQC,IAAI,qB,wBAOpB,SAAWH,GACP,GAAW,MAARA,EAAa,CACZ,IAAIiK,EAASpC,EAAOqC,SACpBD,EAAOE,OAAOC,OAAOpK,EAAKa,OAC1BoJ,EAAOI,MACPrK,EAAKwI,KAAOyB,EACZ1K,KAAKyK,WAAWhK,EAAKoE,WACrB7E,KAAKyK,WAAWhK,EAAKmE,Y,yBAK7B,WACmB,MAAZ5E,KAAKgF,KAIRhF,KAAKoH,SAASpH,KAAKgF,MAHfrE,QAAQC,IAAI,qB,sBAOpB,SAASH,GACM,MAARA,IACCE,QAAQC,IAAIH,EAAKa,KAAO,eACxBX,QAAQC,IAAIH,EAAKwI,KAAO,eACxBjJ,KAAKoH,SAAS3G,EAAKoE,WACnB7E,KAAKoH,SAAS3G,EAAKmE,Y,sBAK3B,SAAStD,GACL,GAAe,MAAZtB,KAAKgF,KAAR,CAIA,IAAI0F,EAASpC,EAAOqC,SACpBD,EAAOE,OAAOC,OAAOvJ,IACrBoJ,EAAOI,MACP,IAAIrK,EAAOT,KAAKgF,KAChBhF,KAAK0G,OAAOgE,EAAQjK,QAPhBE,QAAQC,IAAI,qB,oBAWpB,SAAO8J,EAAQjK,GACX,GAAU,MAAPA,EAAY,CACX,IAAIsK,EAAOtK,EAAKwI,KAAK6B,MAErB,GADUJ,EAAOI,OACPC,GAAyB,GAAjBtK,EAAKuI,SAEnB,YADArI,QAAQC,IAAIH,EAAKwI,KAAO,wBAAwBxI,EAAKa,MAGzDtB,KAAK0G,OAAOgE,EAAQjK,EAAKoE,WACzB7E,KAAK0G,OAAOgE,EAAQjK,EAAKmE,Y,sBAKjC,SAAStD,GACL,GAAe,MAAZtB,KAAKgF,KAAR,CAIA,IAAI0F,EAASpC,EAAOqC,SACpBD,EAAOE,OAAOC,OAAOvJ,IACrBoJ,EAAOI,MACP,IAAIrK,EAAOT,KAAKgF,KAChBhF,KAAKkI,WAAWwC,EAAQjK,QAPpBE,QAAQC,IAAI,qB,wBAWpB,SAAW8J,EAAQjK,GACf,GAAU,MAAPA,EAAY,CACX,IAAIsK,EAAOtK,EAAKwI,KAAK6B,MAErB,GADUJ,EAAOI,OACPC,GAAyB,GAAjBtK,EAAKuI,SAAiB,CACpCvI,EAAKuI,UAAW,EAChBhJ,KAAKgL,kBACLhL,KAAKgF,KAAO,KACZ,IAAI,IAAIiG,EAAI,EAAEA,EAAElC,EAAQc,OAAOoB,IAC3BjL,KAAKmI,SAASY,EAAQkC,IAK1B,OAHAlC,EAAU,GACV/I,KAAKuJ,eACL5I,QAAQC,IAAI,kBAGhBZ,KAAKkI,WAAWwC,EAAQjK,EAAKoE,WAC7B7E,KAAKkI,WAAWwC,EAAQjK,EAAKmE,Y,6BAKrC,WACI,GAAe,MAAZ5E,KAAKgF,KAAR,CAIA,IAAIvE,EAAOT,KAAKgF,KAChBhF,KAAKkL,mBAAmBzK,QAJpBE,QAAQC,IAAI,qB,gCAQpB,SAAmBH,GACL,MAAPA,IACqB,GAAjBA,EAAKuI,WAAkC,GAAdvI,EAAKa,MAC7ByH,EAAQ5H,KAAKV,EAAKa,MAEtBtB,KAAKkL,mBAAmBzK,EAAKoE,WAC7B7E,KAAKkL,mBAAmBzK,EAAKmE,Y,uBAKrC,SAAUuG,EAAUC,GAChB,GAAe,MAAZpL,KAAKgF,KAAR,CAIA,IAAI0F,EAASpC,EAAOqC,SACpBD,EAAOE,OAAOC,OAAOM,IACrBT,EAAOI,MACP,IAAIrK,EAAOT,KAAKgF,KAChBhF,KAAKqL,YAAYX,EAAQU,EAAW3K,QAPhCE,QAAQC,IAAI,qB,yBAepB,SAAY8J,EAAQU,EAAW3K,GAC3B,GAAU,MAAPA,EAAY,CACX,IAAIsK,EAAOtK,EAAKwI,KAAK6B,MAErB,GADWJ,EAAOI,OACPC,GAAyB,GAAjBtK,EAAKuI,SAAiB,CACrCvI,EAAKa,KAAO8J,EACZpL,KAAKgL,kBACLhL,KAAKgF,KAAO,KACZ,IAAI,IAAIiG,EAAI,EAAEA,EAAElC,EAAQc,OAAOoB,IAC3BjL,KAAKmI,SAASY,EAAQkC,IAK1B,OAHAlC,EAAU,GACV/I,KAAKuJ,eACL5I,QAAQC,IAAI,mBAGhBZ,KAAKqL,YAAYX,EAAQU,EAAW3K,EAAKoE,WACzC7E,KAAKqL,YAAYX,EAAQU,EAAW3K,EAAKmE,Y,oBAKjD,SAAO7D,GAAU,IAAD,OACZA,EAAQC,KAAI,SAAAZ,GACR,EAAK+H,SAAS/H,Q,uBAKtB,WACI,GAAc,MAAXJ,KAAKgF,KAAR,CAIA,IAAIvE,EAAOT,KAAKgF,KAChBhF,KAAKsL,QAAQ7K,QAJTE,QAAQC,IAAI,qB,qBAQpB,WAEI,OAAOZ,KAAK2G,SAAS3G,KAAKgF,KADb,M,sBAIjB,SAASvE,EAAKmG,GAMV,OALW,MAARnG,IACHmG,EAAOzF,KAAKV,EAAKa,MACjBtB,KAAK2G,SAASlG,EAAKoE,UAAU+B,GAC7B5G,KAAK2G,SAASlG,EAAKmE,QAAQgC,IAEpBA,I,2BAGX,SAAcnG,EAAKmG,EAAOxF,GAGlB,IAAIE,EASAA,EAVa,MAAlBb,EAAKoE,WAAqC,MAAhBpE,EAAKmE,SAG1BtD,EADDF,GAAcX,EAAKa,KACX,CAACR,GAAIL,EAAKa,KAAMC,MAAOd,EAAKa,KAAKE,WAAYC,MAAO,QAEpD,CAACX,GAAIL,EAAKa,KAAMC,MAAOd,EAAKa,KAAKE,YAG5CoF,EAAOzF,KAAKG,KAIRA,EADDF,GAAcX,EAAKa,KACX,CAACR,GAAIL,EAAKa,KAAMC,MAAOd,EAAKa,KAAKE,WAAYC,MAAO,QAEpD,CAACX,GAAIL,EAAKa,KAAMC,MAAOd,EAAKa,KAAKE,YAG5CoF,EAAOzF,KAAKG,IAWhB,OARqB,MAAlBb,EAAKoE,WACJ7E,KAAK8G,cAAcrG,EAAKoE,UAAU+B,EAAOxF,GAGzB,MAAhBX,EAAKmE,SACL5E,KAAK8G,cAAcrG,EAAKmE,QAAQgC,EAAOxF,GAGpCwF,I,0BAGX,SAAaxF,GAGT,OAAOpB,KAAK8G,cAAc9G,KAAKgF,KAFlB,GAE8B5D,K,iCAG/C,SAAoBX,EAAKmG,GAErB,GAAqB,MAAlBnG,EAAKoE,UAAkB,CACtB7E,KAAK+G,oBAAoBtG,EAAKoE,UAAU+B,GACxC,IAAII,EAAO,CAACC,KAAKxG,EAAKa,KAAMS,GAAGtB,EAAKoE,UAAUvD,MAC9CsF,EAAOzF,KAAK6F,GAGhB,GAAoB,MAAhBvG,EAAKmE,QAAgB,CACrB5E,KAAK+G,oBAAoBtG,EAAKmE,QAAQgC,GACtC,IAAII,EAAO,CAACC,KAAKxG,EAAKa,KAAMS,GAAGtB,EAAKmE,QAAQtD,MAC5CsF,EAAOzF,KAAK6F,GAGhB,OAAOJ,I,+BAGX,WAGI,OAAO5G,KAAK+G,oBAAoB/G,KAAKgF,KAFxB,M,sBAMjB,SAASuG,GAGL,GADA7C,EAAS,GACO,MAAb1I,KAAKgF,KAAR,CAIA,IAAIvE,EAAOT,KAAKgF,KAQhB,OANA0D,GAAS,wDACT1I,KAAKwL,WAAW/K,EAAK8K,GACrB7C,GAAS,IACT/H,QAAQC,IAAI8H,GACD,EAEJA,EAXH/H,QAAQC,IAAI,qB,wBAepB,SAAWH,EAAK8K,GACF,MAAP9K,IACI8K,GAAe9K,EAAKa,KACnBoH,GAAU,OAAOjI,EAAKK,GAAG,iCAAoCL,EAAKa,KAAK,IAAIb,EAAKwI,KAAK6B,MAAM,cAE3FpC,GAAU,OAAOjI,EAAKK,GAAG,mBAAoBL,EAAKa,KAAK,IAAIb,EAAKwI,KAAK6B,MAAM,cAE5D,MAAhBrK,EAAKmE,UACJ8D,GAAU,OAAOjI,EAAKK,GAAK,WAAYL,EAAKmE,QAAQ9D,GAAK,MAExC,MAAlBL,EAAKoE,YACJ6D,GAAS,OAAOjI,EAAKK,GAAK,WAAaL,EAAKoE,UAAU/D,GAAK,MAE5C,MAAhBL,EAAKoE,WACJ7E,KAAKwL,WAAW/K,EAAKoE,UAAU0G,GAEhB,MAAhB9K,EAAKmE,SACJ5E,KAAKwL,WAAW/K,EAAKmE,QAAQ2G,Q,KCjevC1L,GADGC,EAAQ,IAEb,WAAYC,GAAO,oBACfC,KAAKD,MAAQA,EACbC,KAAKC,UAAY,KACjBD,KAAKc,GAAK,OAgHF2K,E,WA3GZ,aAAc,oBACVzL,KAAK4I,OAAS,KACd5I,KAAKqB,SAAW,EAChBrB,KAAK0L,cAAgB,E,2CAEzB,SAAQtL,GACJJ,KAAKqB,WACL,IAAIsK,EAAY,IAAI9L,EAAKO,GACzBuL,EAAU7K,GAAKd,KAAKqB,SACD,MAAfrB,KAAK4I,SAKL+C,EAAU1L,UAAYD,KAAK4I,QAJ3B5I,KAAK4I,OAAS+C,I,sBAWtB,WACI,IAAIC,EAAS5L,KAAK4I,OAElB,OADA5I,KAAK4I,OAAS5I,KAAK4I,OAAO3I,UACnB2L,I,wBAGX,SAAWC,EAAe9L,GACtB,IAAIW,EAAWV,KAAK4I,OACpB,GAAmB,MAAf5I,KAAK4I,OACLjI,QAAQC,IAAI,gCAGZ,KAAkB,MAAZF,GACEA,EAASX,OAAS8L,IAClBnL,EAASX,MAAQA,GAErBW,EAAWA,EAAST,Y,oBAOhC,SAAOF,GACH,IAAIW,EAAWV,KAAK4I,OACpB,GAAmB,MAAf5I,KAAK4I,OACLjI,QAAQC,IAAI,gCAGZ,KAAkB,MAAZF,GAAiB,CACnB,GAAIA,EAASX,OAASA,EAClB,OAAOW,EAEXA,EAAWA,EAAST,a,oBAOhC,SAAOc,GAAU,IAAD,OAEZA,EAAQC,KAAI,SAAAqD,GACR,EAAKpD,QAAQoD,Q,qBAIrB,WAGI,IAFA,IAAInD,EAAU,GACVR,EAAWV,KAAK4I,OACD,MAAZlI,GACHQ,EAAUR,EAASI,IAAMJ,EAASX,MAClCW,EAAWA,EAAST,UAGzB,OAAOiB,I,uBAGV,SAAUE,GACN,IAAIL,EAAU,GACVL,EAAWV,KAAK4I,OAChBvH,EAAW,EACf,GAAmB,MAAfrB,KAAK4I,OACLjI,QAAQC,IAAI,gCAGZ,KAAkB,MAAZF,GAAiB,CACnB,IAAIY,EAAO,CAACR,GAAIO,EAAUE,MAAOb,EAASX,MAAMyB,YAGhD,GAFAT,EAAQM,GAAYC,EAEhBZ,EAASX,OAASqB,EAAW,CAC7B,IAAIE,EAAO,CAACR,GAAIO,EAAUE,MAAOb,EAASX,MAAMyB,WAAaC,MAAO,QACpEV,EAAQM,GAAYC,EAExBZ,EAAWA,EAAST,UACpBoB,IAIR,OAAON,M,KC1GTlB,GADGC,EAAQ,IAIb,WAAYwB,GAAM,oBACdtB,KAAKC,UAAY,KACjBD,KAAK8F,SAAW,KAChB9F,KAAKsB,KAAOA,IAsPLwK,E,WA/OX,aAAc,oBACV9L,KAAK4I,OAAS,KACd5I,KAAK6I,KAAO,KACZ7I,KAAK8I,KAAO,E,2CAIhB,SAAQxH,EAAMyK,GACV,OAAQA,GACJ,IAAK,SACD/L,KAAKgM,eAAe1K,GACpB,MACJ,IAAK,WACDtB,KAAKM,gBAAgBgB,GACrB,MACJ,IAAK,QACDtB,KAAKiM,YAAY3K,M,4BAM7B,SAAeA,GACX,IAAIb,EAAO,IAAIZ,EAAKyB,GAEpB,OAAkB,MAAftB,KAAK4I,QACJ5I,KAAK4I,OAASnI,EACdT,KAAK6I,KAAOpI,OACZT,KAAK8I,QAEe,MAAf9I,KAAK4I,QAA+B,MAAb5I,KAAK6I,MAEjC7I,KAAK4I,OAAO9C,SAAWrF,EACvBA,EAAKR,UAAYD,KAAK4I,OACtBnI,EAAKqF,SAAW9F,KAAK6I,KACrB7I,KAAK6I,KAAK5I,UAAYQ,EACtBT,KAAK4I,OAASnI,OACdT,KAAK8I,aAPH,I,6BAaV,SAAgBxH,GACZ,IAAIb,EAAO,IAAIZ,EAAKyB,GAChBqE,EAAM3F,KAAK4I,OACf,GAAkB,MAAf5I,KAAK4I,OAIJ,OAHA5I,KAAK4I,OAASnI,EACdT,KAAK6I,KAAOpI,OACZT,KAAK8I,OAGT,GAAGxH,EAAOtB,KAAK4I,OAAOtH,KAQlB,OANAtB,KAAK4I,OAAO9C,SAAWrF,EACvBA,EAAKR,UAAYD,KAAK4I,OACtBnI,EAAKqF,SAAW9F,KAAK6I,KACrB7I,KAAK6I,KAAK5I,UAAYQ,EACtBT,KAAK4I,OAASnI,OACdT,KAAK8I,OAEH,GAAGxH,GAAQtB,KAAK4I,OAAOtH,MAAQA,GAAQtB,KAAK6I,KAAKvH,KACnD,KAAMqE,GAAO3F,KAAK6I,MAAK,CACnB,GAAGvH,GAAQqE,EAAIrE,MAAQA,GAAQqE,EAAI1F,UAAUqB,KAAK,CAC9C,IAAI+F,EAAM1B,EAAI1F,UAMd,OALAoH,EAAIvB,SAAWrF,EACfkF,EAAI1F,UAAYQ,EAChBA,EAAKR,UAAYoH,EACjB5G,EAAKqF,SAAWH,OAChB3F,KAAK8I,OAGTnD,EAAMA,EAAI1F,eAEZ,GAAGqB,EAAOtB,KAAK6I,KAAKvH,KAAK,CAE3B,IAAIqE,EAAM3F,KAAK6I,KAOf,OANAlD,EAAI1F,UAAYQ,EAChBA,EAAKqF,SAAWH,EAChBlF,EAAKR,UAAYD,KAAK4I,OACtB5I,KAAK4I,OAAO9C,SAAWrF,EACvBT,KAAK6I,KAAOpI,OACZT,KAAK8I,U,yBAOb,SAAYxH,GACR,IAAIb,EAAO,IAAIZ,EAAKyB,GAEpB,GAAkB,MAAftB,KAAK4I,OAIJ,OAHA5I,KAAK4I,OAASnI,EACdT,KAAK6I,KAAOpI,OACZT,KAAK8I,OAEH,GAAkB,MAAf9I,KAAK4I,QAA+B,MAAb5I,KAAK6I,KAAa,CAE9C,IAAIlD,EAAM3F,KAAK6I,KAOf,OANAlD,EAAI1F,UAAYQ,EAChBA,EAAKqF,SAAWH,EAChBlF,EAAKR,UAAYD,KAAK4I,OACtB5I,KAAK4I,OAAO9C,SAAWrF,EACvBT,KAAK6I,KAAOpI,OACZT,KAAK8I,U,mBAMb,WACI,IAAInD,EAAM3F,KAAK4I,OAEf,IADAjI,QAAQC,IAAI,iBACL+E,GAAO3F,KAAK6I,MACflI,QAAQC,IAAI+E,EAAIrE,MAChBqE,EAAMA,EAAI1F,UAEX0F,GAAO3F,KAAK6I,MACXlI,QAAQC,IAAI+E,EAAIrE,Q,oBAKxB,SAAOA,GAGH,IAFA,IAAIqE,EAAM3F,KAAK4I,OACXvH,EAAW,EACTsE,EAAIrE,MAAQA,GAAQD,GAAYrB,KAAK8I,MACvCnD,EAAKA,EAAI1F,UACToB,IAEDsE,EAAIrE,MAAQA,GAEXX,QAAQC,IAAI+E,EAAIrE,KAAO,gCAEvBD,GAAYrB,KAAK8I,MAEjBnI,QAAQC,IAAI,oC,sBAKpB,SAASU,GAGL,IAFA,IAAIqE,EAAM3F,KAAK4I,OACXvH,EAAW,EACTsE,EAAIrE,MAAQA,GAAQD,GAAYrB,KAAK8I,MACvCnD,EAAKA,EAAI1F,UACToB,IAEJ,GAAGsE,EAAIrE,MAAQA,GAAQqE,GAAO3F,KAAK4I,OAE/BjD,EAAIG,SAAS7F,UAAY0F,EAAI1F,UAC7B0F,EAAI1F,UAAU6F,SAAWH,EAAIG,SAC7BH,EAAI1F,UAAY,KAChB0F,EAAIG,SAAW,KACfnF,QAAQC,IAAI+E,EAAIrE,KAAO,iCACrB,GAAGqE,EAAIrE,MAAQA,GAAQqE,GAAO3F,KAAK4I,OAAO,CAE5C,IAAIvB,EAAM1B,EAAI1F,UACd0F,EAAIG,SAAS7F,UAAY0F,EAAI1F,UAC7B0F,EAAI1F,UAAU6F,SAAWH,EAAIG,SAC7BH,EAAI1F,UAAY,KAChB0F,EAAIG,SAAW,KACf9F,KAAK4I,OAASvB,EACd1G,QAAQC,IAAI+E,EAAIrE,KAAO,4BAEvBD,GAAYrB,KAAK8I,MAEjBnI,QAAQC,IAAI,uC,wBAKpB,SAAWuK,EAAUe,GAGjB,IAFA,IAAIvG,EAAM3F,KAAK4I,OACXvH,EAAW,EACTsE,EAAIrE,MAAQ6J,GAAY9J,GAAYrB,KAAK8I,MAC3CnD,EAAKA,EAAI1F,UACToB,IAEDsE,EAAIrE,MAAQ6J,IAEXxK,QAAQC,IAAI+E,EAAIrE,KAAO,gCACvBqE,EAAIrE,KAAO4K,EACXvL,QAAQC,IAAIuK,EAAW,gCAAgCxF,EAAIrE,OAE3DD,GAAYrB,KAAK8I,MAEjBnI,QAAQC,IAAI,oC,oBAKpB,SAAOG,EAAQV,GAAS,IAAD,OACnBU,EAAQC,KAAI,SAAAZ,GACR,EAAKa,QAAQb,EAASC,Q,qBAK9B,WACI,IAAIa,EAAY,GACZR,EAAWV,KAAK4I,OAGpB,IAFA1H,EAAUC,KAAKT,EAASY,MACxBZ,EAAWA,EAAST,UACbS,GAAYV,KAAK4I,QAAsB,MAAZlI,GAC9BQ,EAAUC,KAAKT,EAASY,MACxBZ,EAAWA,EAAST,UAExB,OAAOiB,I,uBAIX,SAAUE,GAON,IANA,IAAIuE,EAAM3F,KAAK4I,OACXvH,EAAW,EAGXN,EAAU,GACVoL,EAAc,EACZ9K,GAAYrB,KAAK8I,MAAK,CACxB,IAAIxH,EAAO,CAACR,GAAIqL,EAAa5K,MAAOoE,EAAIrE,KAAKE,YAI7C,GAHAT,EAAQoL,GAAe7K,EAGpBqE,EAAIrE,MAAQF,EAAW,CACtB,IAAIE,EAAO,CAACR,GAAIqL,EAAa5K,MAAOoE,EAAIrE,KAAKE,WAAaC,MAAO,QACjEV,EAAQoL,GAAe7K,EAE3BqE,EAAKA,EAAI1F,UACToB,IACA8K,IAGJ,OAAOpL,M,KCtPTlB,GAFGC,EAAQ,IACOA,EAAQ,KAAxBI,YAGJ,WAAYoB,GAAM,oBACdtB,KAAKC,UAAY,KACjBD,KAAKsB,KAAOA,IA+OL8K,E,WAzOX,aAAc,oBACVpM,KAAK4I,OAAS,KACd5I,KAAK6I,KAAO,KACZ7I,KAAK8I,KAAO,E,2CAGhB,SAAQ1I,EAAUC,GACd,OAAOA,GACH,IAAK,WACDL,KAAKM,gBAAgBF,GACrB,MACJ,IAAK,QACDJ,KAAKO,aAAaH,GAClB,MACJ,IAAK,SACDJ,KAAKQ,cAAcJ,M,2BAM/B,SAAckB,GACV,IAAIb,EAAO,IAAIZ,EAAKyB,GACpB,OAAkB,MAAftB,KAAK4I,QACJ5I,KAAK4I,OAASnI,EACdT,KAAK6I,KAAOpI,OACZT,KAAK8I,QAEe,MAAf9I,KAAK4I,QAAgC,MAAb5I,KAAK6I,MAClC7I,KAAK4I,OAAO9C,SAAWrF,EACvBA,EAAKR,UAAYD,KAAK4I,OACtBnI,EAAKqF,SAAW9F,KAAK6I,KACrB7I,KAAK6I,KAAK5I,UAAYQ,EACtBT,KAAK4I,OAASnI,OACdT,KAAK8I,aANH,I,6BAYV,SAAgBxH,GACZ,IAAIb,EAAO,IAAIZ,EAAKyB,GAChBqE,EAAM3F,KAAK4I,OACf,GAAkB,MAAf5I,KAAK4I,OAIJ,OAHA5I,KAAK4I,OAASnI,EACdT,KAAK6I,KAAOpI,OACZT,KAAK8I,OAGT,GAAGxH,EAAOtB,KAAK4I,OAAOtH,KAQlB,OANAtB,KAAK4I,OAAO9C,SAAWrF,EACvBA,EAAKR,UAAYD,KAAK4I,OACtBnI,EAAKqF,SAAW9F,KAAK6I,KACrB7I,KAAK6I,KAAK5I,UAAYQ,EACtBT,KAAK4I,OAASnI,OACdT,KAAK8I,OAEH,GAAGxH,GAAQtB,KAAK4I,OAAOtH,MAAQA,GAAQtB,KAAK6I,KAAKvH,KACnD,KAAMqE,GAAO3F,KAAK6I,MAAK,CACnB,GAAGvH,GAAQqE,EAAIrE,MAAQA,GAAQqE,EAAI1F,UAAUqB,KAAK,CAC9C,IAAI+F,EAAM1B,EAAI1F,UAMd,OALAoH,EAAIvB,SAAWrF,EACfkF,EAAI1F,UAAYQ,EAChBA,EAAKR,UAAYoH,EACjB5G,EAAKqF,SAAWH,OAChB3F,KAAK8I,OAGTnD,EAAMA,EAAI1F,eAEZ,GAAGqB,EAAOtB,KAAK6I,KAAKvH,KAAK,CAE3B,IAAIqE,EAAM3F,KAAK6I,KAOf,OANAlD,EAAI1F,UAAYQ,EAChBA,EAAKqF,SAAWH,EAChBlF,EAAKR,UAAYD,KAAK4I,OACtB5I,KAAK4I,OAAO9C,SAAWrF,EACvBT,KAAK6I,KAAOpI,OACZT,KAAK8I,U,0BAOb,SAAaxH,GACT,IAAIb,EAAO,IAAIZ,EAAKyB,GAEpB,GAAkB,MAAftB,KAAK4I,OACJ5I,KAAK4I,OAASnI,EACdT,KAAK6I,KAAOpI,EACZT,KAAK8I,YACH,GAAkB,MAAf9I,KAAK4I,OAAe,CAEzB,IADA,IAAIjD,EAAM3F,KAAK4I,OACTjD,GAAO3F,KAAK6I,MACdlD,EAAMA,EAAI1F,UAEd0F,EAAI1F,UAAYQ,EAChBA,EAAKR,UAAYD,KAAK4I,OACtB5I,KAAK6I,KAAOpI,EACZT,KAAK8I,U,mBAKb,WAEI,IADA,IAAInD,EAAM3F,KAAK4I,OACRjD,GAAO3F,KAAK6I,MACflI,QAAQC,IAAI+E,EAAIrE,MAChBqE,EAAMA,EAAI1F,UAEX0F,GAAO3F,KAAK6I,MACXlI,QAAQC,IAAI+E,EAAIrE,Q,oBAKxB,SAAOA,GAIH,IAHA,IAAIqE,EAAM3F,KAAK4I,OACXvH,EAAW,EACXgG,EAAM1B,EAAI1F,UACRoH,EAAI/F,MAAQA,GAAQD,GAAYrB,KAAK8I,MACvCnD,EAAKA,EAAI1F,UACToH,EAAKA,EAAIpH,UACToB,IAEDgG,EAAI/F,MAAQA,GAEXX,QAAQC,IAAIyG,EAAI/F,KAAO,yBAEvBD,GAAYrB,KAAK8I,MAEjBnI,QAAQC,IAAI,oC,sBAKpB,SAASU,GAIL,IAHA,IAAIqE,EAAM3F,KAAK4I,OACXvH,EAAW,EACXgG,EAAM1B,EAAI1F,UACRoH,EAAI/F,MAAQA,GAAQD,GAAYrB,KAAK8I,MACvCnD,EAAKA,EAAI1F,UACToH,EAAKA,EAAIpH,UACToB,IAEDgG,EAAI/F,MAAQA,IAEXqE,EAAI1F,UAAYoH,EAAIpH,UACpBoH,EAAIpH,UAAY,KAChBU,QAAQC,IAAIyG,EAAI/F,KAAO,6BAEvBD,GAAYrB,KAAK8I,MAEjBnI,QAAQC,IAAI,uC,wBAKpB,SAAWuK,EAAUkB,GAIjB,IAHA,IAAI1G,EAAM3F,KAAK4I,OACXvH,EAAW,EACXgG,EAAM1B,EAAI1F,UACRoH,EAAI/F,MAAQ6J,GAAY9J,GAAYrB,KAAK8I,MAC3CnD,EAAKA,EAAI1F,UACToH,EAAKA,EAAIpH,UACToB,IAEDgG,EAAI/F,MAAQ6J,IAEXxK,QAAQC,IAAIyG,EAAI/F,KAAO,yBACvB+F,EAAI/F,KAAO+K,EACX1L,QAAQC,IAAIuK,EAAW,4BAA8B9D,EAAI/F,OAEzDD,GAAYrB,KAAK8I,MAEjBnI,QAAQC,IAAI,oC,oBAKpB,SAAOG,EAAQV,GAAS,IAAD,OACnBU,EAAQC,KAAI,SAAAZ,GACR,EAAKa,QAAQb,EAASC,Q,qBAK9B,WACI,IAAIa,EAAY,GACZR,EAAWV,KAAK4I,OAGpB,IAFA1H,EAAUC,KAAKT,EAASY,MACxBZ,EAAWA,EAAST,UACbS,GAAYV,KAAK4I,QAAsB,MAAZlI,GAC9BQ,EAAUC,KAAKT,EAASY,MACxBZ,EAAWA,EAAST,UAGxB,OAAOiB,I,uBAKX,SAAUE,GAON,IANA,IAAIuE,EAAM3F,KAAK4I,OACXvH,EAAW,EAEXN,EAAU,GACVoL,EAAc,EAEZ9K,GAAYrB,KAAK8I,MAAK,CAExB,IAAIxH,EAAO,CAACR,GAAIqL,EAAa5K,MAAOoE,EAAIrE,KAAKE,YAG7C,GAFAT,EAAQoL,GAAe7K,EAEpBqE,EAAIrE,MAAQF,EAAW,CACtB,IAAIE,EAAO,CAACR,GAAIqL,EAAa5K,MAAOoE,EAAIrE,KAAKE,WAAaC,MAAO,QACjEV,EAAQoL,GAAe7K,EAI3BqE,EAAKA,EAAI1F,UACToB,IACA8K,IAGJ,OAAOpL,M,cClPTlB,EACF,WAAYE,GAAQ,oBAChBC,KAAKD,MAAQA,EACbC,KAAKC,UAAY,KACjBD,KAAK8F,SAAW,MAkMTwG,E,WA5LX,aAAe,oBAEXtM,KAAKG,QAAU,KACfH,KAAK0D,OAAS,K,2CAIlB,SAAQtD,EAAUC,GACd,OAAOA,GACH,IAAK,WACDL,KAAKM,gBAAgBF,GACrB,MACJ,IAAK,QACDJ,KAAKO,aAAaH,GAClB,MACJ,IAAK,SACDJ,KAAKQ,cAAcJ,M,2BAM/B,SAAcA,GACV,IAAIK,EAAO,IAAIZ,EAAKO,GACLJ,KAAKG,QACD,MAAhBH,KAAKG,UAGJM,EAAKR,UAAWD,KAAKG,QACrBH,KAAKG,QAAQ2F,SAAWrF,GAHxBT,KAAKG,QAAUM,I,6BASvB,SAAgBL,GACZ,IAAIK,EAAO,IAAIZ,EAAKO,GACpB,GAAmB,MAAhBJ,KAAKG,QACJH,KAAKG,QAAUM,MACd,CAGD,IAFA,IAAIC,EAAWV,KAAKG,QAEQ,MAAtBO,EAAST,WAAmB,CAC9B,GAAGS,EAASX,OAASK,GAAYM,EAAST,UAAUF,OAASK,EAAS,CAClEK,EAAKR,UAAYS,EAAST,UAC1BS,EAAST,UAAU6F,SAAWrF,EAC9BA,EAAKqF,SAAWpF,EAChBA,EAAST,UAAYQ,EACrB,MACE,GAAGC,GAAYV,KAAKG,SAAWO,EAASX,OAASK,EAAS,CAC5DK,EAAKR,UAAYD,KAAKG,QACtBH,KAAKG,QAAQ2F,SAAWrF,EACxBT,KAAKG,QAAUM,EACf,MAEJC,EAAWA,EAAST,UAEE,MAAtBS,EAAST,WAAqBS,EAASX,OAASK,IAChDM,EAAST,UAAYQ,EACrBA,EAAKqF,SAAWpF,M,0BAK5B,SAAaN,GACT,IAAIM,EAAWV,KAAKG,QAChBM,EAAO,IAAIZ,EAAKO,GACpB,GAAmB,MAAhBJ,KAAKG,QACJH,KAAKG,QAAUM,MACb,CAEF,KAA4B,MAAtBC,EAAST,WACXS,EAAWA,EAAST,UAExBS,EAAST,UAAYQ,EACrBA,EAAKqF,SAAWpF,K,sBAKxB,SAASN,GACL,GAAoB,MAAhBJ,KAAKG,QACLQ,QAAQC,IAAI,iCAIZ,IADA,IAAIF,EAAWV,KAAKG,QACD,MAAZO,GAAkB,CACrB,GAAIA,EAASX,OAASK,EAClBM,EAAWA,EAAST,eAGpB,GAA0B,MAAtBS,EAAST,WACLS,EAAST,UAAUF,OAASK,EAAU,CACtC,IAAIS,EAAaH,EAAST,UAI1B,OAHAS,EAAST,UAAYY,EAAWZ,UAChCS,EAAST,UAAU6F,SAAWpF,OAC9BG,EAAWZ,UAAY,MAMnCS,EAAWA,EAAST,a,wBAKhC,SAAWsM,EAAUxM,GACjB,GAAoB,MAAhBC,KAAKG,QACLQ,QAAQC,IAAI,iCAIZ,IADA,IAAIF,EAAWV,KAAKG,QACD,MAAZO,GACCA,EAASX,OAASA,IAClBW,EAASX,MAAQwM,GAErB7L,EAAWA,EAAST,Y,oBAMhC,SAAOF,GACH,GAAoB,MAAhBC,KAAKG,QACLQ,QAAQC,IAAI,qCAIZ,IADA,IAAIF,EAAWV,KAAKG,QACF,MAAZO,GAAiB,CACnB,GAAGA,EAASX,OAASA,EACjB,OAAOW,EAEXA,EAAWA,EAAST,a,oBAKhC,SAAOc,GAAU,IAAD,OAEZA,EAAQC,KAAI,SAAAZ,GACR,EAAKa,QAAQb,Q,qBAIrB,WAGI,IAFA,IAAIc,EAAW,GACXR,EAAWV,KAAKG,QACD,MAAZO,GACHQ,EAAUC,KAAKT,EAASX,OACxBW,EAAWA,EAAST,UAGxB,OAAOiB,I,sBAIX,WAEI,IADA,IAAIR,EAAWV,KAAKG,QACF,MAAZO,GACFC,QAAQC,IAAIF,EAASX,MAAQ,QAC7BW,EAAWA,EAAST,Y,uBAI5B,SAAUmB,GAIN,IAHA,IAAIV,EAAWV,KAAKG,QAChBY,EAAU,GACVM,EAAW,EACG,MAAZX,GAAiB,CACnB,IAAIY,EAAO,CAACR,GAAIO,EAAUE,MAAOb,EAASX,MAAMyB,YAGhD,GAFAT,EAAQM,GAAYC,EAEjBZ,EAASX,OAASqB,EAAW,CAC5B,IAAIE,EAAO,CAACR,GAAIO,EAAUE,MAAOb,EAASX,MAAMyB,WAAaC,MAAO,QACpEV,EAAQM,GAAYC,EAExBZ,EAAWA,EAAST,UACpBoB,IAGJ,OAAON,M,KC9LTlB,EAEF,WAAYyB,GAAM,oBACdtB,KAAKsB,KAAOA,EACZtB,KAAK8F,SAAW,KAChB9F,KAAKC,UAAY,KACjBD,KAAKwM,UAAY,KACjBxM,KAAKyM,QAAU,MAKnB/D,GAAS,GAETtE,GAAM,GAENsI,GAAS,EAGPC,G,WAEF,aAAc,oBACV3M,KAAKqB,SAAW,EAChBrB,KAAK4M,MAAO,EACZ5M,KAAKgF,KAAO,KACZhF,KAAKc,GAAK,E,4CAId,SAASL,GAEL,GAAgB,MAAbT,KAAKgF,KACJhF,KAAKgF,KAAOvE,EACZT,KAAKqB,eACJ,CACD,IAAIgG,EAAMrH,KAAKgF,KACf,EAAE,CACE,GAAGvE,EAAKa,MAAM+F,EAAI/F,KAAK,CAGnB,GAFAtB,KAAKqB,WAEFgG,GAAOrH,KAAKgF,KAAK,CAChBhF,KAAKgF,KAAKc,SAAWrF,EACrBA,EAAKR,UAAYD,KAAKgF,KACtBhF,KAAKgF,KAAKwH,UAAY/L,EAAKgM,QAC3BzM,KAAKgF,KAAOvE,EACZ,MAGAA,EAAKqF,SAAWuB,EAAIvB,SACpBrF,EAAKR,UAAYoH,EACjBA,EAAIvB,SAAS7F,UAAYQ,EACzB4G,EAAIvB,SAAS2G,QAAUhM,EAAK+L,UAC5BnF,EAAIvB,SAAUrF,EACd4G,EAAImF,UAAY/L,EAAKgM,QACrB,MAGF,GAAoB,MAAjBpF,EAAIpH,UAAkB,CAC3BD,KAAKqB,WACLgG,EAAIpH,UAAYQ,EAChB4G,EAAIoF,QAAYhM,EAAK+L,UACrB/L,EAAKqF,SAAWuB,EAChB5G,EAAKR,UAAY,KACjB,MAEJoH,EAAMA,EAAIpH,gBACA,MAAPoH,Q,KAodJwF,G,WA3cX,WAAYC,GAAO,oBACf9M,KAAKgF,KAAO,KACZhF,KAAK8M,MAAQA,E,4CAIjB,SAASxL,GACL,IAAIb,EAAO,IAAIZ,EAAKyB,GAEpB,GAAgB,MAAbtB,KAAKgF,KAKJ,OAJAhF,KAAKgF,KAAO,IAAI2H,GAChB3M,KAAKgF,KAAKmD,SAAS1H,GACnBT,KAAKgF,KAAKlE,GAAK4L,QACfA,KAIA,IAAIrF,EAAMrH,KAAKmH,IAAI1G,EAAMT,KAAKgF,MAC3BqC,aAAexH,IACdG,KAAKgF,KAAO,IAAI2H,GAChB3M,KAAKgF,KAAKmD,SAASd,GACnBrH,KAAKgF,KAAK4H,MAAO,K,iBAM7B,SAAInM,EAAMsM,GAEN,GAAGA,EAAKH,KAEJ,OADAG,EAAK5E,SAAS1H,GACXsM,EAAK1L,UAAYrB,KAAK8M,MAEd9M,KAAKgN,OAAOD,GAGZA,EAIX,IAAI1F,EAAM0F,EAAK/H,KACf,EAAE,CACE,GAAGvE,EAAKa,MAAQ+F,EAAI/F,KAEhB,OAAOyL,EACL,GAAGtM,EAAKa,KAAO+F,EAAI/F,KAAK,CAC1B,IAAIqE,EAAM3F,KAAKmH,IAAI1G,EAAM4G,EAAImF,WAC7B,OAAI7G,aAAe9F,IACfkN,EAAK5E,SAASxC,GACXoH,EAAK1L,UAAYrB,KAAK8M,OACd9M,KAAKgN,OAAOD,GAGpBA,EACL,GAAoB,MAAjB1F,EAAIpH,UAAkB,CAC3B,IAAI0F,EAAM3F,KAAKmH,IAAI1G,EAAM4G,EAAIoF,SAC7B,OAAG9G,aAAe9F,IACdkN,EAAK5E,SAASxC,GACXoH,EAAK1L,UAAYrB,KAAK8M,OACd9M,KAAKgN,OAAOD,GAGpBA,EAEX1F,EAAMA,EAAIpH,gBACA,MAAPoH,GAEX,OAAO0F,I,oBAIX,SAAOA,GAQH,IAPA,IAAIE,EAAM,IAAIN,GACVO,EAAM,IAAIP,GACVQ,EAAQ,KACR9F,EAAM0F,EAAK/H,KAEXoI,EAAQC,SAASrN,KAAK8M,MAAM,GAAK,EACjCQ,EAAQtN,KAAK8M,MACT7B,EAAI,EAAGA,EAAIjL,KAAK8M,MAAQ,EAAE7B,IAAK5D,EAAMA,EAAIpH,UAAU,CACvD,IAAIQ,EAAO,IAAIZ,EAAKwH,EAAI/F,MACxBb,EAAK+L,UAAYnF,EAAImF,UACrB/L,EAAKgM,QAAUpF,EAAIoF,QACA,MAAhBhM,EAAKgM,SAAqC,MAAlBhM,EAAK+L,YAC5BU,EAAIN,MAAO,EACXK,EAAIL,MAAO,GAEZ3B,GAXM,GAWSA,EAAImC,EAClBF,EAAI/E,SAAS1H,GACRwK,GAAKmC,EACVD,EAAQ1M,EACHwK,GAAKqC,GAASrC,EAAImC,GACvBH,EAAI9E,SAAS1H,GASrB,OANAyM,EAAIpM,GAAK4L,GAAO,EAChBO,EAAInM,GAAK4L,GAAO,EAChBS,EAAMrM,GAAK4L,GACXS,EAAMX,UAAYU,EAClBC,EAAMV,QAAUQ,EAChBP,IAAkB,EACXS,I,wBAIX,WACqB,MAAbnN,KAAKgF,KAIThF,KAAKuN,SAASvN,KAAKgF,MAHfrE,QAAQC,IAAI,qB,sBAOpB,SAASmM,GACL,GAAiB,MAAbA,EAAK/H,KAAT,CAIA,IAAIW,EAAMoH,EAAK/H,KAOf,GANoB,MAAjBW,EAAI6G,WACHxM,KAAKuN,SAAS5H,EAAI6G,WAEN,MAAb7G,EAAI8G,SACHzM,KAAKuN,SAAS5H,EAAI8G,SAEH,MAAhB9G,EAAIG,UAAqC,MAAjBH,EAAI1F,UAI/B,KAAY,MAAN0F,GACFhF,QAAQC,IAAI+E,EAAIrE,MAEN,OADVqE,EAAMA,EAAI1F,YACqB,MAAb0F,EAAI8G,SAClBzM,KAAKuN,SAAS5H,EAAI8G,cAPtB9L,QAAQC,IAAI+E,EAAIrE,WAXhBX,QAAQC,IAAI,kB,qBAuBpB,WAEI,GAAiB,MAAbZ,KAAKgF,KAIV,OAAOhF,KAAKwN,UAAUxN,KAAKgF,KALZ,IAEVrE,QAAQC,IAAI,qB,uBAOpB,SAAUmM,EAAKhM,GACX,GAAiB,MAAbgM,EAAK/H,KAAT,CAIA,IAAIW,EAAMoH,EAAK/H,KAOf,GANoB,MAAjBW,EAAI6G,WACHxM,KAAKwN,UAAU7H,EAAI6G,UAAUzL,GAEjB,MAAb4E,EAAI8G,SACHzM,KAAKwN,UAAU7H,EAAI8G,QAAQ1L,GAEZ,MAAhB4E,EAAIG,UAAqC,MAAjBH,EAAI1F,UAA/B,CAIA,KAAY,MAAN0F,GACF5E,EAAQI,KAAKwE,EAAIrE,MAEP,OADVqE,EAAMA,EAAI1F,YACqB,MAAb0F,EAAI8G,SAClBzM,KAAKwN,UAAU7H,EAAI8G,QAAQ1L,GAInC,OAAOA,EAXHA,EAAQI,KAAKwE,EAAIrE,WAXjBX,QAAQC,IAAI,kB,yBA0BpB,SAAYU,GACS,MAAbtB,KAAKgF,KAIThF,KAAKyN,SAASzN,KAAKgF,KAAM1D,GAHrBX,QAAQC,IAAI,qB,sBAOpB,SAASmM,EAAMzL,GACX,GAAiB,MAAbyL,EAAK/H,KAAT,CAIA,IAAIW,EAAMoH,EAAK/H,KAOf,GANoB,MAAjBW,EAAI6G,WACHxM,KAAKyN,SAAS9H,EAAI6G,UAAWlL,GAEjB,MAAbqE,EAAI8G,SACHzM,KAAKyN,SAAS9H,EAAI8G,QAASnL,GAEX,MAAjBqE,EAAI1F,WACA0F,EAAIrE,MAAQA,EAKnB,KAAY,MAANqE,GAAW,CACb,GAAGA,EAAIrE,MAAQA,EAEX,YADAX,QAAQC,IAAI,kBAAoBU,GAI1B,OADVqE,EAAMA,EAAI1F,YACqB,MAAb0F,EAAI8G,SAClBzM,KAAKyN,SAAS9H,EAAI8G,QAASnL,QAX3BX,QAAQC,IAAI,kBAAoBU,QAZpCX,QAAQC,IAAI,kB,sBA+BpB,SAASU,GACL,GAAiB,MAAbtB,KAAKgF,KAAT,CAMA,IAFA,IAAIW,EAAM3F,KAAKgF,KACX0I,EAAO/H,EAAIX,KACA,MAAR0I,GAAa,CAChB,GAAGA,EAAKpM,MAAQA,GAA0B,MAAlBoM,EAAKlB,WAAqC,MAAhBkB,EAAKjB,QAAgB,CACnE,GAAoB,MAAjBiB,EAAK5H,UAAsC,MAAlB4H,EAAKzN,UAAkB,CAC/C,IAAIoH,EAAMqG,EAAKzN,UAKf,OAJA0F,EAAIX,KAAOqC,EACXqG,EAAKzN,UAAY,KACjBoH,EAAIvB,SAAW,UACfnF,QAAQC,IAAI,uBAEV,GAAoB,MAAjB8M,EAAK5H,UAAsC,MAAlB4H,EAAKzN,UAAkB,CACrD,IAAIoH,EAAMqG,EAAKzN,UAMf,OALAyN,EAAK5H,SAAS7F,UAAYoH,EAC1BA,EAAIvB,SAAW4H,EAAK5H,SACpB4H,EAAK5H,SAAW,KAChB4H,EAAKzN,UAAY,UACjBU,QAAQC,IAAI,wBAEV,GAAoB,MAAjB8M,EAAK5H,UAAsC,MAAlB4H,EAAKzN,UAKnC,OAJUyN,EAAK5H,SACX7F,UAAY,KAChByN,EAAK5H,SAAW,UAChBnF,QAAQC,IAAI,2BAEU,MAAjB8M,EAAK5H,UAAsC,MAAlB4H,EAAKzN,WACd,MAAlByN,EAAKlB,WAAqC,MAAhBkB,EAAKjB,UAC9BzM,KAAKgF,KAAO,KACZ0H,GAAS,EACT/L,QAAQC,IAAI,yBAIxB8M,EAAOA,EAAKzN,UAEhBD,KAAKkI,WAAWlI,KAAKgF,KAAM1D,QAtCvBX,QAAQC,IAAI,qB,wBA0CpB,SAAWmM,EAAMzL,GACb,GAAiB,MAAbyL,EAAK/H,KAAT,CAIA,IAAIW,EAAMoH,EAAK/H,KAOf,GANoB,MAAjBW,EAAI6G,WACHxM,KAAKkI,WAAWvC,EAAI6G,UAAWlL,GAEnB,MAAbqE,EAAI8G,SACHzM,KAAKkI,WAAWvC,EAAI8G,QAASnL,GAEb,MAAjBqE,EAAI1F,WAAqC,MAAhB0F,EAAIG,UACzBH,EAAIrE,MAAQA,EAKX,OAJAX,QAAQC,IAAI,oBAAsBU,GAClCqE,EAAIrE,KAAO,OACXtB,KAAK2N,OAAO3N,KAAKgF,WACjBhF,KAAK4N,UAIb,KAAY,MAANjI,GAAW,CAIb,GAHmB,MAAhBA,EAAIG,UAAmC,MAAfH,EAAI8G,SAC3BzM,KAAKkI,WAAWvC,EAAI8G,QAASnL,GAE9BqE,EAAIrE,MAAQA,EAKX,OAJAX,QAAQC,IAAI,oBAAsBU,GAClCqE,EAAIrE,KAAO,OACXtB,KAAK2N,OAAO3N,KAAKgF,WACjBhF,KAAK4N,UAGTjI,EAAMA,EAAI1F,gBA9BVU,QAAQC,IAAI,kB,qBAmCpB,WACIZ,KAAKgF,KAAO,KACZ0H,GAAS,EACT,IAAI,IAAIzB,EAAI,EAAGA,EAAE7G,GAAIyF,OAAOoB,IAAI,CAC5B,IAAI4C,EAAMzJ,GAAI6G,GACdjL,KAAKmI,SAAS0F,GAElBlN,QAAQC,IAAI,gBACZwD,GAAM,K,oBAIV,SAAO2I,GACH,GAAiB,MAAbA,EAAK/H,KAAT,CAIA,IAAIW,EAAMoH,EAAK/H,KAOf,GANoB,MAAjBW,EAAI6G,WACHxM,KAAK2N,OAAOhI,EAAI6G,WAEJ,MAAb7G,EAAI8G,SACHzM,KAAK2N,OAAOhI,EAAI8G,SAEA,MAAjB9G,EAAI1F,WAAqC,MAAhB0F,EAAIG,UACb,QAAZH,EAAIrE,KAKX,KAAY,MAANqE,GACiB,MAAhBA,EAAIG,UAAmC,MAAfH,EAAI8G,SAC3BzM,KAAK2N,OAAOhI,EAAI8G,SAEL,QAAZ9G,EAAIrE,MACH8C,GAAIjD,KAAKwE,EAAIrE,MAEjBqE,EAAMA,EAAI1F,eAXNmE,GAAIjD,KAAKwE,EAAIrE,WAZjBX,QAAQC,IAAI,kB,uBA4BpB,SAAUkN,EAASC,GACf/N,KAAKuG,SAASuH,GACd9N,KAAKmI,SAAS4F,K,oBAIlB,SAAOhN,GAAU,IAAD,OACZA,EAAQC,KAAI,SAAAZ,GACR,EAAK+H,SAAS/H,Q,sBAMpB,SAASgB,GAGP,GADAsH,GAAS,GACO,MAAb1I,KAAKgF,KAAR,CAIA,IAAI+H,EAAO/M,KAAKgF,KAMhB,OALA0D,IAAS,wDACT1I,KAAKwL,WAAWuB,EAAK3L,GACrBsH,IAAS,IACT/H,QAAQC,IAAI8H,IAELA,GATH/H,QAAQC,IAAI,qB,wBAapB,SAAWmM,EAAK3L,GACZ,GAAiB,MAAb2L,EAAK/H,KAAT,CAIA,IAAIW,EAAMoH,EAAK/H,KAoBf,GAnBoB,MAAjBW,EAAI6G,WACHxM,KAAKwL,WAAW7F,EAAI6G,UAAUpL,GAElB,MAAbuE,EAAI8G,SACHzM,KAAKwL,WAAW7F,EAAI8G,QAAQrL,GAEZ,MAAjBuE,EAAI1F,YACAmB,GAAcuE,EAAIrE,KACjBoH,IAAU,OAAOqE,EAAKjM,GAAG,iCAAoC6E,EAAIrE,KAAK,cAEtEoH,IAAU,OAAOqE,EAAKjM,GAAG,mBAAoB6E,EAAIrE,KAAK,cAExC,MAAfqE,EAAI8G,UACH/D,IAAS,OAAOqE,EAAKjM,GAAK,WAAa6E,EAAI8G,QAAQ3L,GAAK,MAExC,MAAjB6E,EAAI6G,YACH9D,IAAS,OAAOqE,EAAKjM,GAAK,WAAa6E,EAAI6G,UAAU1L,GAAK,OAG9C,MAAjB6E,EAAI1F,UAAkB,CACrB,GAAkB,MAAf0F,EAAI6G,WAAkC,MAAf7G,EAAI8G,QAAgB,CAC1C/D,IAAU,OAAOqE,EAAKjM,GAAG,mBAEzB,IADA,IAAIkN,GAAY,EACL,MAALrI,GACCvE,GAAcuE,EAAIrE,OACjB0M,GAAY,GAEhBtF,IAAU/C,EAAIrE,KAAM,MACpBqE,EAAMA,EAAI1F,UAGVyI,IADW,GAAZsF,EACW,4BAEA,iBAEZ,GAAkB,MAAfrI,EAAI6G,WAAkC,MAAf7G,EAAI8G,QAAgB,CAChD/D,IAAU,OAAOqE,EAAKjM,GAAG,mBAEzB,IADA,IAAIkN,GAAY,EACL,MAALrI,GACCvE,GAAcuE,EAAIrE,OACjB0M,GAAY,GAEhBtF,IAAU/C,EAAIrE,KAAM,MACpBqE,EAAMA,EAAI1F,UAgBd,IAbIyI,IADW,GAAZsF,EACW,4BAEA,YAGI,OADlBrI,EAAMoH,EAAK/H,MACJyH,UACH/D,IAAS,OAAOqE,EAAKjM,GAAK,WAAaiM,EAAK/H,KAAKyH,QAAQ3L,GAAK,MAE9C,MAAjB6E,EAAI6G,YACH9D,IAAS,OAAOqE,EAAKjM,GAAK,WAAaiM,EAAK/H,KAAKwH,UAAU1L,GAAK,MAGpE6E,GADAA,EAAMoH,EAAK/H,MACD/E,UACC,MAAL0F,GACF+C,IAAU,OAAOqE,EAAKjM,GAAK,WAAa6E,EAAI8G,QAAQ3L,GAAK,KACzD6E,EAAMA,EAAI1F,UAKlB,IADA0F,GADAA,EAAMoH,EAAK/H,MACD/E,UACE,MAAN0F,GACQ,MAAPA,GAA4B,MAAbA,EAAI8G,SAClBzM,KAAKwL,WAAW7F,EAAI8G,QAAQrL,GAEhCuE,EAAMA,EAAI1F,gBA1EdU,QAAQC,IAAI,oB,KCnclBf,GACF,WAAYE,GAAQ,oBAChBC,KAAKD,MAAQA,EACbC,KAAK8F,SAAW,KAChB9F,KAAKC,UAAY,KACjBD,KAAKiO,SAAW,KAChBjO,KAAKkO,SAAW,KAChBlO,KAAKc,GAAK,MAIdqN,IAAU,EACVzF,GAAS,GAEPiE,G,WACF,aAAe,oBACX3M,KAAK4M,MAAO,EACZ5M,KAAKoO,OAAS,KACdpO,KAAKqO,aAAe,KACpBrO,KAAKqB,SAAW,EAChBrB,KAAKsO,UAAY,KACjBtO,KAAK0M,OAAS,K,+CAGlB,SAAYjM,GACR,GAAmB,MAAfT,KAAKoO,OACLpO,KAAKoO,OAAS3N,EACdT,KAAKqB,eACF,CACH,IAAIX,EAAWV,KAAKoO,OACpB,EAAG,CACC,GAAI3N,EAAKV,OAASW,EAASX,MAAO,CAE9B,GADAC,KAAKqB,WACDX,GAAYV,KAAKoO,OAAQ,CACzB1N,EAASoF,SAAWrF,EACpBA,EAAKR,UAAYS,EACjBA,EAASuN,SAAWxN,EAAKyN,SACzBlO,KAAKoO,OAAS3N,EACd,MAEAA,EAAKqF,SAAWpF,EAASoF,SACzBrF,EAAKR,UAAYS,EACjBA,EAASoF,SAAS7F,UAAYQ,EAC9BC,EAASoF,SAAWrF,EAEpBC,EAASoF,SAASoI,SAAWzN,EAAKwN,SAClCvN,EAASuN,SAAWxN,EAAKyN,SACzB,MAIH,GAA0B,MAAtBxN,EAAST,UAAmB,CACjCD,KAAKqB,WACLX,EAAST,UAAYQ,EACrBC,EAASwN,SAAWzN,EAAKwN,SACzBxN,EAAKqF,SAAWpF,EAChB,MAEJA,EAAWA,EAAST,gBACH,MAAZS,Q,KA8WN6N,G,WAxWX,WAAYzB,GAAQ,oBAChB9M,KAAK8M,MAAQA,EACb9M,KAAKwO,QAAU,KACfxO,KAAKgF,KAAO,KACZhF,KAAKyO,YAAc,E,2CAMvB,SAAQ1O,GACJ,IAAIU,EAAO,IAAIZ,GAAKE,GACpBC,KAAK0O,cACLjO,EAAKK,GAAKd,KAAK0O,YACf1O,KAAKmF,SAAS1E,EAAMT,KAAKgF,Q,sBAK7B,SAASvE,EAAMkO,GACM,MAAb3O,KAAKgF,MACLhF,KAAKgF,KAAO,IAAI2H,GAChB3M,KAAKyO,cACLzO,KAAKgF,KAAKlE,GAAKd,KAAKyO,YACpBzO,KAAKgF,KAAK4J,YAAYnO,IAEfkO,EAAQ/B,MACf+B,EAAQC,YAAYnO,GAChBkO,EAAQtN,UAAYrB,KAAK8M,QACzB9M,KAAK6O,YAAYF,GACjB3O,KAAKgF,KAAK0H,OAAS1M,KAAKgF,KAAKoJ,OAAO1B,SAEjB,GAAhBiC,EAAQ/B,MACf5M,KAAK8O,gBAAgBrO,EAAMkO,K,6BAInC,SAAgBlO,EAAMsM,GAElB,IADA,IAAItI,EAAOsI,EAAKqB,OACPnD,EAAI,EAAGA,GAAK8B,EAAK1L,SAAU4J,IAAKxG,EAAOA,EAAKxE,UAAW,CAC5D,GAAIQ,EAAKV,MAAQ0E,EAAK1E,MAAO,CACzBC,KAAKmF,SAAS1E,EAAMgE,EAAKwJ,UACzB,MACG,GAAsB,MAAlBxJ,EAAKxE,UAAmB,CAC/BD,KAAKmF,SAAS1E,EAAMgE,EAAKyJ,UACzB,U,yBAOZ,SAAYS,GACR,IAAII,EAAa1B,SAASrN,KAAK8M,MAAQ,GAAK,EAC5C9M,KAAKyO,cACL,IAAIO,EAAc,IAAIrC,GACtBqC,EAAYlO,GAAKd,KAAKyO,YACtBO,EAAYtC,OAAS1M,KAAKyO,YAC1BzO,KAAKyO,cACL,IAAIQ,EAAa,IAAItC,GACrBsC,EAAWnO,GAAKd,KAAKyO,YACrBQ,EAAWvC,OAAS1M,KAAKyO,YACzBzO,KAAKyO,cACL,IAAIrB,EAAQ,KACR3I,EAAOkK,EAAQP,OACfxB,GAAO,EACPsC,EAAY,KAahB,GAXyB,MAArBP,EAAQL,aACRY,EAAY,IAAIvC,IACN7L,GAAK6N,EAAQ7N,IAEP,MAAjB2D,EAAKyJ,UAAqC,MAAjBzJ,EAAKwJ,WAC7BU,EAAQ/B,MAAO,GAEf+B,EAAQ/B,OACRA,GAAO,GAGa,MAArB+B,EAAQL,WACsC,GAA1CK,EAAQL,UAAUF,OAAOH,SAASrB,KAEjC,IADA,IAAIuC,EAAeR,EAAQL,UAAUF,OACf,MAAhBe,GAC2B,MAA1BA,EAAalP,YACZkP,EAAalB,SAASI,aAAeY,GAErCE,EAAeA,EAAalP,UAK5C,IAAK,IAAIgL,EAAI,EAAGA,GAAKjL,KAAK8M,MAAO7B,IAAKxG,EAAOA,EAAKxE,UAAW,CACzD,IAAIQ,EAAO,IAAIZ,GAAK4E,EAAK1E,OACzBU,EAAKwN,SAAWxJ,EAAKwJ,SACrBxN,EAAKyN,SAAWzJ,EAAKyJ,SAGjBjD,EAAI8D,GACgB,MAAjBtO,EAAKwN,WACJxN,EAAKwN,SAASK,UAAYW,GAEV,MAAjBxO,EAAKyN,WACJzN,EAAKyN,SAASI,UAAYW,GAE9BA,EAAWL,YAAYnO,IAEhBwK,EAAI8D,GACS,MAAjBtO,EAAKwN,WACJxN,EAAKwN,SAASK,UAAYU,GAEV,MAAjBvO,EAAKyN,WACJzN,EAAKyN,SAASI,UAAYU,GAE9BA,EAAYJ,YAAYnO,KAEjBwK,EAAI8D,KACPnC,GACoB,MAAjBnM,EAAKwN,WACJxN,EAAKwN,SAASK,UAAYU,GAEV,MAAjBvO,EAAKyN,WACJzN,EAAKyN,SAASI,UAAYU,GAE9BA,EAAYJ,YAAYnO,IACxB2M,EAAQ,IAAIvN,GAAK4E,EAAK1E,QAChBkO,SAAWgB,EACjB7B,EAAMc,SAAWc,GACF,GAARpC,KACPQ,EAAQ,IAAIvN,GAAK4E,EAAK1E,QAChBkO,SAAWgB,EACjB7B,EAAMc,SAAWc,IAKK,MAA/BA,EAAYZ,OAAOH,UAAmD,MAA/Be,EAAYZ,OAAOF,WACzDc,EAAYpC,MAAO,GAEU,MAA9BqC,EAAWb,OAAOH,UAAkD,MAA9BgB,EAAWb,OAAOF,WACvDe,EAAWrC,MAAO,GAGL,MAAbsC,GACAF,EAAYV,UAAYY,EACxBD,EAAWX,UAAYY,EACvBlP,KAAK0O,cACLtB,EAAMtM,GAAKd,KAAK0O,YAChBQ,EAAUN,YAAYxB,GAGlBR,IACAsC,EAAUd,OAAOH,SAASI,aAAea,EAAUd,OAAOF,UAE9DgB,EAAUtC,MAAO,EACjB5M,KAAKgF,KAAOkK,IAEZ9B,EAAMa,SAASK,UAAYK,EAAQL,UACnClB,EAAMc,SAASI,UAAYK,EAAQL,UACnCtO,KAAK0O,cACLtB,EAAMtM,GAAKd,KAAK0O,YAChBC,EAAQL,UAAUM,YAAYxB,GAC1BR,IACAQ,EAAMa,SAASI,aAAejB,EAAMc,UAEpCS,EAAQL,UAAUjN,UAAYrB,KAAK8M,OACnC9M,KAAK6O,YAAYF,EAAQL,YAGjClB,EAAMV,OAAS1M,KAAKyO,YAAa,I,sBAMrC,SAAS1O,GACL,IAAIqP,EAAYpP,KAAKgF,KACrBhF,KAAK4F,UAAU7F,EAAOqP,K,uBAG9B,SAAUrP,EAAO4O,GACb,GAAmB,GAAhBA,EAAQ/B,KACP5M,KAAK4F,UAAU7F,EAAO4O,EAAQP,OAAOH,eACnC,GAAmB,GAAhBU,EAAQ/B,KAEb,IADA5M,KAAKgF,KAAO,KACK,MAAX2J,GAAgB,CAElB,IADA,IAAIU,EAAWV,EAAQP,OACfnD,EAAI,EAAGA,GAAK0D,EAAQtN,SAAU4J,IAAKoE,EAAWA,EAASpP,UACxDoP,EAAStP,OAASA,GAGjBC,KAAKiB,QAAQoO,EAAStP,OAE7B4O,EAAUA,EAAQN,gB,wBAO/B,SAAWtO,EAAOuG,GACdtG,KAAKuG,SAASxG,GACdC,KAAKiB,QAAQqF,K,oBAGjB,SAAOvG,GACH,IAAIuP,EAAatP,KAAKyG,QAAQ1G,EAAOC,KAAKgF,MAC1CrE,QAAQC,IAAI0O,EAAWvP,MAAQ,e,qBAGnC,SAAQA,EAAO4O,GAEX,IADA,IAAIjO,EAAWiO,EAAQP,OACdnD,EAAI,EAAGA,GAAG0D,EAAQtN,SAAU4J,IAAKvK,EAAWA,EAAST,UAAU,CACpE,GAAGS,EAASX,MAAQA,GAChB,GAAmB,GAAhB4O,EAAQ/B,KAER,OADW5M,KAAKyG,QAAQ1G,EAAOW,EAASuN,eAGzC,GAAGvN,EAASX,OAASA,EACvB,GAAmB,GAAhB4O,EAAQ/B,KAAc,CACtB,IAAKvC,EAAQrK,KAAKyG,QAAQ1G,EAAOW,EAASwN,UACzC,GAAG7D,aAAiBxK,GAChB,OAAOwK,EAEX,IAAIC,EAAQtK,KAAKyG,QAAQ1G,EAAOW,EAASuN,UACzC,GAAG3D,aAAiBzK,GAChB,OAAOyK,OAET,GAAmB,GAAhBqE,EAAQ/B,KACb,OAAOlM,K,oBAQvB,SAAOK,GAAU,IAAD,OACGA,EACNC,KAAI,SAAAZ,GACT,EAAKa,QAAQb,Q,sBAKrB,WACI,IAAIW,EAAU,GACdf,KAAKuP,UAAUxO,EAAQf,KAAKgF,MAC5BrE,QAAQC,IAAIG,K,uBAGhB,SAAUA,EAAS4N,GACf,GAAmB,GAAhBA,EAAQ/B,KACP5M,KAAKuP,UAAUxO,EAAS4N,EAAQP,OAAOH,eACrC,GAAmB,GAAhBU,EAAQ/B,KAEb,IADA,IAAIvL,EAAW,EACE,MAAXsN,GAAgB,CAElB,IADA,IAAIU,EAAWV,EAAQP,OACfnD,EAAI,EAAGA,GAAK0D,EAAQtN,SAAU4J,IAAKoE,EAAWA,EAASpP,UAC3Dc,EAAQM,GAAYgO,EAAStP,MAC7BsB,IACHsN,EAAUA,EAAQN,gB,sBAM9B,WAEG,GADA3F,GAAS,GACO,MAAb1I,KAAKgF,KAAR,CAIA,IAAI+H,EAAO/M,KAAKgF,KAKhB,OAJA0D,IAAS,wDACT1I,KAAKwL,WAAWuB,GAChBrE,IAAS,IACT/H,QAAQC,IAAI8H,IACLA,GARH/H,QAAQC,IAAI,qB,wBAYpB,SAAWmM,GACP,GAAmB,MAAfA,EAAKqB,OAAT,CAIA,IAAIzI,EAAMoH,EAAKqB,OAgBf,GAfmB,MAAhBzI,EAAIsI,UACHjO,KAAKwL,WAAW7F,EAAIsI,UAEP,MAAdtI,EAAIuI,UACHlO,KAAKwL,WAAW7F,EAAIuI,UAEJ,MAAjBvI,EAAI1F,YACHyI,IAAU,OAAOqE,EAAKL,OAAO,mBAAoB/G,EAAI5F,MAAM,cACxC,MAAhB4F,EAAIuI,WACHxF,IAAS,OAAOqE,EAAKL,OAAS,WAAa/G,EAAIuI,SAASxB,OAAS,MAElD,MAAhB/G,EAAIsI,WACHvF,IAAS,OAAOqE,EAAKL,OAAS,WAAa/G,EAAIsI,SAASvB,OAAS,OAGrD,MAAjB/G,EAAI1F,UAAkB,CACrB,GAAiB,MAAd0F,EAAIsI,UAAkC,MAAhBtI,EAAIuI,SAAiB,CAE1C,IADAxF,IAAU,OAAOqE,EAAKL,OAAO,mBAClB,MAAL/G,GACF+C,IAAU/C,EAAI5F,MAAO,MACrB4F,EAAMA,EAAI1F,UAEdyI,IAAU,iBACR,GAAiB,MAAd/C,EAAIsI,UAAkC,MAAhBtI,EAAIuI,SAAiB,CAEhD,IADAxF,IAAU,OAAOqE,EAAKL,OAAO,mBAClB,MAAL/G,GACF+C,IAAU/C,EAAI5F,MAAO,MACrB4F,EAAMA,EAAI1F,UAYd,IAVAyI,IAAU,YAES,OADnB/C,EAAMoH,EAAKqB,QACJF,WACHxF,IAAS,OAAOqE,EAAKL,OAAS,WAAaK,EAAKqB,OAAOF,SAASxB,OAAS,MAE1D,MAAhB/G,EAAIsI,WACHvF,IAAS,OAAOqE,EAAKL,OAAS,WAAaK,EAAKqB,OAAOH,SAASvB,OAAS,MAG7E/G,GADAA,EAAMoH,EAAKqB,QACDnO,UACC,MAAL0F,GACF+C,IAAU,OAAOqE,EAAKL,OAAS,WAAa/G,EAAIuI,SAASxB,OAAS,KAClE/G,EAAMA,EAAI1F,UAKlB,IADA0F,GADAA,EAAMoH,EAAKqB,QACDnO,UACE,MAAN0F,GACQ,MAAPA,GAA6B,MAAdA,EAAIuI,UAClBlO,KAAKwL,WAAW7F,EAAIuI,UAExBvI,EAAMA,EAAI1F,UAEd,GAAgB,GAAb8M,EAAKH,MAA2B,GAAXuB,GAAiB,CACrC,KAA2B,MAArBpB,EAAKsB,cACiB,MAArBtB,EAAKsB,eACJ3F,IAAU,OAAOqE,EAAKL,OAAS,WAAaK,EAAKsB,aAAa3B,OAAS,MAE3EK,EAAOA,EAAKsB,aAEhBF,IAAU,SA/DdxN,QAAQC,IAAI,kB,qBAsEpB,WACI,IAAIG,EAAU,GAEf,OADCf,KAAKuP,UAAUxO,EAAQf,KAAKgF,MACtBjE,M,KdjZV,SAASyO,GAASnL,GACd,IAAIoL,EAAQpL,EAAEqL,OAAOD,MAAM,GACvBE,EAAS,IAAIC,WACjBjP,QAAQC,IAAIyD,EAAEqL,OAAOD,MAAM,IAC3BE,EAAOE,OAAS,SAACxL,GACb,IAAML,EAAO2L,EAAOG,OAAOtO,WAAWuO,OACtCpP,QAAQC,IAAIoD,GACZ,IAAIgM,EAAOC,KAAKC,MAAMlM,IAK9B,SAAiBX,EAAO8M,EAAMC,EAAIC,EAAMC,GACpC,OAAOjN,GACH,IAAK,OACS,MAAP+M,IACCA,EAAM,IAAI3E,GAEd2E,EAAIG,OAAOJ,GACX,MACJ,IAAK,OACS,MAAPC,IACCA,EAAM,IAAI3M,GAEd2M,EAAIG,OAAOJ,GACXC,EAAII,WACJ,MACJ,IAAK,oBACS,MAAPJ,IACCA,EAAM,IAAI5L,GAEd4L,EAAIG,OAAOJ,GACX,MACJ,IAAK,6BAES,MAAPC,IACCA,EAAM,IAAIlQ,WAEdkQ,EAAIG,OAAOJ,EAAMG,GACjB,MAEJ,IAAK,4BAES,MAAPF,IACCA,EAAM,IAAI9D,GAEd8D,EAAIG,OAAOJ,EAAMG,GACjB,MAEJ,IAAK,sCAES,MAAPF,IACCA,EAAM,IAAIhE,GAEdgE,EAAIG,OAAOJ,EAAMG,GACjB,MAEJ,IAAK,qCAES,MAAPF,IACCA,EAAM,IAAIK,GAEdL,EAAIG,OAAOJ,EAAMG,GACjB,MACJ,IAAK,4BAIL,IAAK,4BAIL,IAAK,uBAIL,IAAK,sBAEDF,EAAMM,GAAUP,GAChB,MACJ,IAAK,aAEDC,EAAM,IAAIlJ,GACNqJ,OAAOJ,GACXxP,QAAQC,IAAIwP,EAAIO,gBAChBhQ,QAAQC,IAAIwP,EAAIQ,qBAChB,MACJ,IAAK,aAEDR,EAAM,IAAIrL,GACNwL,OAAOJ,GACXxP,QAAQC,IAAIwP,EAAIO,gBAChBhQ,QAAQC,IAAIwP,EAAIQ,qBAChB,MACJ,IAAK,WAEDR,EAAM,IAAIvD,GAAOwD,IACbE,OAAOJ,GACXxP,QAAQC,IAAIwP,EAAI/H,YAChB,MACJ,IAAK,gBAED+H,EAAM,IAAIlH,GACNqH,OAAOJ,GACX,MACH,IAAK,YAEFC,EAAM,IAAI7B,GAAW8B,IACjBE,OAAOJ,GACXxP,QAAQC,IAAIwP,EAAI/H,YAKxB3G,EAAOmP,aAAaT,GA1GhBU,CAAQpP,EAAO2B,OAAQ2M,EAAKe,QAASrP,EAAO0O,IAAIJ,EAAKK,MAAML,EAAKM,WAEpEX,EAAOqB,WAAWvB,GA6GtB,SAASiB,GAAU3P,GACf,IAAIkQ,EAAS,GAGb,GAAGlQ,EAAQ,GAAGmQ,WACV,IAAK,IAAIjG,EAAI,EAAGA,EAAIlK,EAAQ8I,OAAO,EAAGoB,IAAK,CACvC,IAAIkG,EAAW,CAACpR,MAAMgB,EAAQkK,GAAGmG,MAAMC,GAAatQ,EAAQkK,KAC9DgG,EAAO9P,KAAKgQ,QAId,IAAK,IAAIlG,EAAI,EAAGA,EAAIlK,EAAQ8I,OAAO,EAAGoB,IAAK,CACvC,IAAIkG,EAAW,CAACpR,MAAMgB,EAAQkK,GAAGmG,MAAMrQ,EAAQkK,IACjDgG,EAAO9P,KAAKgQ,GAKlB,OAAOF,EAGT,SAASI,GAAaC,GAGpB,IAFA,IAAIC,EAAc,EAEVtG,EAAI,EAAGA,EAAIqG,EAAEzH,OAAQoB,IAAI,CAE7BsG,GADWD,EAAEJ,WAAWjG,GAI5B,OAAOsG,EAII,SAASC,GAAOnP,GAC3BX,EAASW,EACT,MAAwBoP,IAAMC,UAAS,GAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACA,OACI,eAACC,EAAA,EAAD,CACIhQ,UAAU,cACViQ,OAAK,EACLC,QAAS,kBAAMH,GAAQ,IACvBI,OAAQ,kBAAMJ,GAAQ,IACtBD,KAAMA,EACN7I,KAAK,QACLmJ,QAAS,cAACrQ,EAAA,EAAKE,KAAN,qBAPb,UASI,eAACe,EAAA,EAAD,CAAQqP,MAAI,EAAZ,UACI,cAAChP,EAAA,EAAD,CAAMiP,KAAK,wBADf,YAIA,cAACN,EAAA,EAAMjP,QAAP,IAEI,cAACwP,EAAA,EAAD,CAAOvQ,UAAU,cAAcwQ,OAAK,EAACC,KAAK,OAAOC,OAAO,QAAQ/C,SAAU,SAACnL,GAAD,OAAQmL,GAASnL,MAC/F,eAACwN,EAAA,EAAMW,QAAP,WACI,eAACC,EAAA,EAAD,CAAQX,OAAK,EAACrQ,MAAM,MAAMiR,UAAQ,EAACC,QAAS,kBAAMf,GAAQ,IAA1D,UACA,cAAC1O,EAAA,EAAD,CAAMiP,KAAK,WADX,SAGA,eAACM,EAAA,EAAD,CAAQ5Q,UAAU,eAAeJ,MAAM,QAAQiR,UAAQ,EAACC,QAAS,kBAAOf,GAAQ,IAAhF,UACA,cAAC1O,EAAA,EAAD,CAAMiP,KAAK,cADX,e,ae9KVS,I,OAAiB,CACnB,CAAEC,IAAK,MAAOC,MAAO,SAAU9O,KAAM,UACrC,CAAE6O,IAAK,MAAOC,MAAO,QAAS9O,KAAM,SACpC,CAAE6O,IAAK,MAAOC,MAAO,WAAY9O,KAAM,cAItBM,G,4MAEjBlB,MAAM,CACCuO,MAAM,EACNoB,UAAW,GACXxO,UAAW,GACXyO,SAAU,M,EAIjBC,OAAO,WACH,IAAI5P,EAAS,EAAKhB,MAAMgB,OACpB+M,EAAM,EAAK/N,MAAM+N,IACjB9O,EAAO,EAAK8B,MAAM2P,UAClBxO,EAAY,EAAKnB,MAAMmB,UACvByO,EAAW,EAAK5P,MAAM4P,SAC1B,OAAO3P,GACH,IAAK,OACS,MAAP+M,IACCA,EAAM,IAAI3E,GAEd2E,EAAInP,QAAQK,GACZ,MACJ,IAAK,OACS,MAAP8O,IACCA,EAAM,IAAI3M,GAEd2M,EAAI9L,QAAQhD,GACZ,MACJ,IAAK,oBACS,MAAP8O,IACCA,EAAM,IAAI5L,GAEd4L,EAAI9L,QAAQhD,EAAKiD,GACjB,MACJ,IAAK,6BAES,MAAP6L,IACCA,EAAM,IAAIlQ,WAEdkQ,EAAInP,QAAQK,EAAK0R,GACjB,MAEJ,IAAK,4BAES,MAAP5C,IACCA,EAAM,IAAI9D,GAEd8D,EAAInP,QAAQK,EAAK0R,GACjB,MAEJ,IAAK,sCAES,MAAP5C,IACCA,EAAM,IAAIhE,GAEdgE,EAAInP,QAAQK,EAAK0R,GACjB,MAEJ,IAAK,qCAES,MAAP5C,IACCA,EAAM,IAAIK,GAEdL,EAAInP,QAAQK,EAAK0R,GACjB,MACJ,IAAK,YAES,MAAP5C,IACCA,EAAM,IAAIlJ,GAEdkJ,EAAIjI,SAAS7G,GACb,MACJ,IAAK,YAES,MAAP8O,IACCA,EAAM,IAAIrL,GAEdqL,EAAInP,QAAQK,GACZ8O,EAAIvJ,aAAauJ,EAAIpL,MACrB,MACJ,IAAK,UAES,MAAPoL,IACCA,EAAM,IAAIvD,GAAO,EAAKzJ,MAAM4P,WAEhC5C,EAAIjI,SAAS7G,GACb,MACJ,IAAK,WAES,MAAP8O,IACCA,EAAM,IAAI7B,GAAW,EAAKnL,MAAM4P,WAEpC5C,EAAInP,QAAQK,GAChB,MACA,IAAK,eAES,MAAP8O,IACCA,EAAM,IAAIlH,EAAW,EAAK9F,MAAM4P,WAExC5C,EAAIjI,SAAS7G,GAKjB,EAAKe,MAAMwO,aAAaT,I,EAG5B8C,YAAc,SAAA7O,GACV,EAAK8O,SAAL,gBACK9O,EAAEqL,OAAOyC,KAAO9N,EAAEqL,OAAOoD,S,4CAGlC,WAAU,IAAD,OACN,MAAwB,sBAArB9S,KAAKqC,MAAMgB,OAET,eAACwO,EAAA,EAAD,CACIhQ,UAAU,eACViQ,OAAK,EACLC,QAAS,kBAAM,EAAKoB,SAAS,CAACxB,MAAM,KACpCK,OAAQ,kBAAO,EAAKmB,SAAS,CAACxB,MAAM,KACpCA,KAAM3R,KAAKoD,MAAMuO,KACjB7I,KAAK,QACLmJ,QAAS,cAACrQ,EAAA,EAAKE,KAAN,sBAPb,UASI,eAACe,EAAA,EAAD,CAAQqP,MAAI,EAAZ,UACI,cAAChP,EAAA,EAAD,CAAMiP,KAAK,QADf,kBAIA,eAACN,EAAA,EAAMjP,QAAP,WACQ,cAACwP,EAAA,EAAD,CAAOvQ,UAAU,eAAeyQ,KAAK,OAAOH,KAAK,YAAYW,MAAO9S,KAAKoD,MAAM2P,UAAYV,OAAK,EAACe,YAAY,eAAe5D,SAAUxP,KAAKkT,cAC3I,uBACA,cAACd,EAAA,EAAD,CAAOvQ,UAAU,eAAeyQ,KAAK,OAAOH,KAAK,YAAYW,MAAO9S,KAAKoD,MAAMmB,UAAY8N,OAAK,EAACe,YAAY,oBAAoB5D,SAAUxP,KAAKkT,iBAExJ,eAACrB,EAAA,EAAMW,QAAP,WACI,eAACC,EAAA,EAAD,CAAQX,OAAK,EAACrQ,MAAM,MAAMiR,UAAQ,EAACC,QAAS,kBAAO,EAAKQ,SAAS,CAACxB,MAAM,KAAxE,UACA,cAACzO,EAAA,EAAD,CAAMiP,KAAK,WADX,SAGA,eAACM,EAAA,EAAD,CAAQ5Q,UAAU,gBAAgBJ,MAAM,QAAQiR,UAAQ,EAACC,QAAS3S,KAAKiT,OAAvE,UACA,cAAC/P,EAAA,EAAD,CAAMiP,KAAK,cADX,eAOiB,+BAArBnS,KAAKqC,MAAMgB,QACU,8BAArBrD,KAAKqC,MAAMgB,QACU,wCAArBrD,KAAKqC,MAAMgB,QACU,uCAArBrD,KAAKqC,MAAMgB,QACW,YAAtBrD,KAAKqC,MAAMgB,OAEf,eAACwO,EAAA,EAAD,CACIhQ,UAAU,eACViQ,OAAK,EACLC,QAAS,kBAAM,EAAKoB,SAAS,CAACxB,MAAM,KACpCK,OAAQ,kBAAO,EAAKmB,SAAS,CAACxB,MAAM,KACpCA,KAAM3R,KAAKoD,MAAMuO,KACjB7I,KAAK,QACLmJ,QAAS,cAACrQ,EAAA,EAAKE,KAAN,sBAPb,UASI,eAACe,EAAA,EAAD,CAAQqP,MAAI,EAAZ,UACI,cAAChP,EAAA,EAAD,CAAMiP,KAAK,QADf,kBAIA,eAACN,EAAA,EAAMjP,QAAP,WACA,cAACwP,EAAA,EAAD,CAAOgB,YAAY,cAAcjB,KAAK,WAAWkB,QAAST,GAAgBE,MAAO9S,KAAKoD,MAAM4P,SAAUxD,SAAUxP,KAAKkT,YAAab,OAAK,IACvI,uBACA,cAACD,EAAA,EAAD,CAAOvQ,UAAU,eAAeyQ,KAAK,OAAOH,KAAK,YAAYW,MAAO9S,KAAKoD,MAAM2P,UAAYV,OAAK,EAACe,YAAY,eAAe5D,SAAUxP,KAAKkT,iBAE3I,eAACrB,EAAA,EAAMW,QAAP,WACI,eAACC,EAAA,EAAD,CAAQX,OAAK,EAACrQ,MAAM,MAAMiR,UAAQ,EAACC,QAAS,kBAAO,EAAKQ,SAAS,CAACxB,MAAM,KAAxE,UACA,cAACzO,EAAA,EAAD,CAAMiP,KAAK,WADX,SAGA,eAACM,EAAA,EAAD,CAAQ5Q,UAAU,gBAAgBJ,MAAM,QAAQiR,UAAQ,EAACC,QAAS3S,KAAKiT,OAAvE,UACA,cAAC/P,EAAA,EAAD,CAAMiP,KAAK,cADX,eAQR,eAACN,EAAA,EAAD,CACIhQ,UAAU,eACViQ,OAAK,EACLC,QAAS,kBAAM,EAAKoB,SAAS,CAACxB,MAAM,KACpCK,OAAQ,kBAAO,EAAKmB,SAAS,CAACxB,MAAM,KACpCA,KAAM3R,KAAKoD,MAAMuO,KACjB7I,KAAK,QACLmJ,QAAS,cAACrQ,EAAA,EAAKE,KAAN,sBAPb,UASI,eAACe,EAAA,EAAD,CAAQqP,MAAI,EAAZ,UACI,cAAChP,EAAA,EAAD,CAAMiP,KAAK,QADf,kBAIA,cAACN,EAAA,EAAMjP,QAAP,UACA,cAACwP,EAAA,EAAD,CAAOvQ,UAAU,eAAeyQ,KAAK,OAAOH,KAAK,YAAYW,MAAO9S,KAAKoD,MAAM2P,UAAYV,OAAK,EAACe,YAAY,eAAe5D,SAAUxP,KAAKkT,gBAE3I,eAACrB,EAAA,EAAMW,QAAP,WACI,eAACC,EAAA,EAAD,CAAQX,OAAK,EAACrQ,MAAM,MAAMiR,UAAQ,EAACC,QAAS,kBAAO,EAAKQ,SAAS,CAACxB,MAAM,KAAxE,UACA,cAACzO,EAAA,EAAD,CAAMiP,KAAK,WADX,SAGA,eAACM,EAAA,EAAD,CAAQ5Q,UAAU,gBAAgBJ,MAAM,QAAQiR,UAAQ,EAACC,QAAS3S,KAAKiT,OAAvE,UACA,cAAC/P,EAAA,EAAD,CAAMiP,KAAK,cADX,mB,GAzMiBnQ,aCvBhBsR,G,4MAEjBlQ,MAAM,CACFuO,MAAM,EACNoB,UAAW,I,EAGfE,OAAO,WACH,IAAI5P,EAAS,EAAKhB,MAAMgB,OACpB+M,EAAM,EAAK/N,MAAM+N,IACjB9O,EAAO,EAAK8B,MAAM2P,UACtB,OAAO1P,GACH,IAAK,OAGL,IAAK,OAGL,IAAK,oBAGL,IAAK,6BAIL,IAAK,4BAIL,IAAK,sCAKL,IAAK,qCACD+M,EAAI7J,SAASjF,GACb,MACJ,IAAK,YACD8O,EAAIlI,WAAW5G,GACf,MACJ,IAAK,YAGJ,IAAK,UAGN,IAAK,WACD8O,EAAI7J,SAASjF,GACb,MACH,IAAK,eACF8O,EAAIkD,SAAShS,GAKrB,EAAKe,MAAMwO,aAAaT,I,EAG5B8C,YAAc,SAAA7O,GACX,EAAK8O,SAAL,gBACK9O,EAAEqL,OAAOyC,KAAO9N,EAAEqL,OAAOoD,S,4CAIjC,WAAU,IAAD,OACL,OACI,eAACjB,EAAA,EAAD,CACIC,OAAK,EACLC,QAAS,kBAAM,EAAKoB,SAAS,CAACxB,MAAM,KACpCK,OAAQ,kBAAM,EAAKmB,SAAS,CAACxB,MAAM,KACnCA,KAAM3R,KAAKoD,MAAMuO,KACjB7I,KAAK,QACLmJ,QAAS,cAACrQ,EAAA,EAAKE,KAAN,uBANb,UAQI,eAACe,EAAA,EAAD,CAAQqP,MAAI,EAAZ,UACI,cAAChP,EAAA,EAAD,CAAMiP,KAAK,UADf,mBAIA,cAACN,EAAA,EAAMjP,QAAP,UACQ,cAACwP,EAAA,EAAD,CAAOE,KAAK,OAAOD,OAAK,EAACF,KAAK,YAAYW,MAAO9S,KAAKoD,MAAM2P,UAAWvD,SAAUxP,KAAKkT,YAAaE,YAAY,qBAEvH,eAACvB,EAAA,EAAMW,QAAP,WACI,eAACC,EAAA,EAAD,CAAQX,OAAK,EAACrQ,MAAM,MAAMiR,UAAQ,EAACC,QAAS,kBAAM,EAAKQ,SAAS,CAACxB,MAAM,KAAvE,UACA,cAACzO,EAAA,EAAD,CAAMiP,KAAK,WADX,SAGA,eAACM,EAAA,EAAD,CAAQhR,MAAM,QAAQiR,UAAQ,EAACC,QAAS3S,KAAKiT,OAA7C,UACA,cAAC/P,EAAA,EAAD,CAAMiP,KAAK,cADX,oB,GArFkBnQ,aCHjBuR,G,4MAEjBnQ,MAAM,CACFuO,MAAM,EACN1N,aAAc,GACdC,UAAW,I,EAGf+O,OAAO,WACH,IAAI5P,EAAS,EAAKhB,MAAMgB,OACpB+M,EAAM,EAAK/N,MAAM+N,IACjBnM,EAAe,EAAKb,MAAMa,aAC1BC,EAAY,EAAKd,MAAMc,UAC3B,OAAOb,GACH,IAAK,OAGL,IAAK,OAGL,IAAK,oBAGL,IAAK,6BAKL,IAAK,4BAKL,IAAK,sCAKL,IAAK,qCAIL,IAAK,YAGL,IAAK,YACD+M,EAAIoD,WAAWvP,EAAaC,GAC5B,MACJ,IAAK,UACDkM,EAAIqD,UAAUxP,EAAaC,GAC3B,MACJ,IAAK,WACDkM,EAAIoD,WAAWvP,EAAaC,GAChC,MACA,IAAK,eACDkM,EAAIqD,UAAUxP,EAAaC,GAKnC,EAAK7B,MAAMwO,aAAaT,I,EAG/B8C,YAAc,SAAA7O,GACX,EAAK8O,SAAL,gBACK9O,EAAEqL,OAAOyC,KAAO9N,EAAEqL,OAAOoD,S,4CAG9B,WAAU,IAAD,OACL,OACI,eAACjB,EAAA,EAAD,CACAC,OAAK,EACLC,QAAS,kBAAK,EAAKoB,SAAS,CAACxB,MAAM,KACnCK,OAAQ,kBAAM,EAAKmB,SAAS,CAACxB,MAAM,KACnCA,KAAM3R,KAAKoD,MAAMuO,KACjB7I,KAAK,QACLmJ,QAAS,cAACrQ,EAAA,EAAKE,KAAN,yBANT,UAQA,eAACe,EAAA,EAAD,CAAQqP,MAAI,EAAZ,UACI,cAAChP,EAAA,EAAD,CAAMiP,KAAK,SADf,qBAIA,eAACN,EAAA,EAAMjP,QAAP,WACQ,cAACwP,EAAA,EAAD,CAAOE,KAAK,OAAOH,KAAK,eAAeW,MAAO9S,KAAKoD,MAAMa,aAAcoO,OAAK,EAACe,YAAY,gBAAgB5D,SAAUxP,KAAKkT,cACxH,uBACA,cAACd,EAAA,EAAD,CAAOE,KAAK,OAAOH,KAAK,YAAYW,MAAO9S,KAAKoD,MAAMc,UAAWmO,OAAK,EAACe,YAAY,aAAa5D,SAAUxP,KAAKkT,iBAEvH,eAACrB,EAAA,EAAMW,QAAP,WACI,eAACC,EAAA,EAAD,CAAQX,OAAK,EAACrQ,MAAM,MAAMiR,UAAQ,EAACC,QAAS,kBAAM,EAAKQ,SAAS,CAACxB,MAAM,KAAvE,UACA,cAACzO,EAAA,EAAD,CAAMiP,KAAK,WADX,SAGA,eAACM,EAAA,EAAD,CAAQhR,MAAM,QAAQiR,UAAQ,EAACC,QAAS3S,KAAKiT,OAA7C,UACA,cAAC/P,EAAA,EAAD,CAAMiP,KAAK,cADX,oB,GA3FwBnQ,a,qBCAzB,SAAS0R,GAAcrR,GAElC,IAAIsR,EAActR,EAAM+N,IAAIwD,YACT,IAAhBvR,EAAMqE,SACPiN,EAActR,EAAM+N,IAAIwD,UAAUvR,EAAMqE,SAE1C,IAAImN,EAGJ,WAEE,IADA,IAAIC,EAAY,GACP7I,EAAI,EAAGA,EAAI0I,EAAY9J,OAAO,EAAGoB,IAAK,CAC7C,IAAIjE,EAAO,CAACC,KAAKgE,EAAGlJ,GAAGkJ,EAAE,GACzB6I,EAAU7I,GAAKjE,EAIjB,GAAmB,6BAAhB3E,EAAMgB,OAEL,IADA,IAAIhC,EAAWsS,EAAY9J,OAAO,EACzBoB,EAAI,EAAGA,EAAI0I,EAAY9J,OAAO,EAAGoB,IAAK,CAC3C,IAAIjE,EAAO,CAACC,KAAKgE,EAAE,EAAGlJ,GAAGkJ,GACzB6I,EAAUzS,GAAY2F,EACtB3F,IAKR,OAAOyS,EArBKC,GAwBdpT,QAAQC,IAAI+S,GACZhT,QAAQC,IAAIiT,GAEZ,IAAMG,EAAQ,CACVC,MAAON,EAAY3S,KAAI,SAACkT,EAAMC,EAAO/P,GACnC,IAAMgQ,EAAQ,GAAKD,EAAQ/P,EAAIyF,OAAQ,KAMvC,OALAqK,EAAKG,EAAI,IAAOD,EAChBF,EAAKI,EAAI,GAAKF,EACVD,EAAQ,IAAM,IAChBD,EAAKpB,MAAQqB,EAAQ,GAEhBD,KAGTK,MAAOV,GAwCT,OACE,cAAC,KAAD,CACEG,MAAOA,EACPX,QAjCY,CACdmB,SAAS,EACTD,MAAO,CACH9S,MAAO,QACPgT,MAAO,EACPC,QAAQ,GAEVT,MAAM,CACJU,MAAM,MACNlT,MAAO,MACPmT,KAAM,CACJ9L,KAAM,GACNrH,MAAO,WAEToT,YAAa,EACbH,QAAQ,GAEZI,YAAa,CACXC,mBAAmB,EACnBC,UAAU,GAGZC,OAAQ,SAYNC,OATW,CACbC,OAAQ,SAASC,GACQA,EAAjBnB,MAAiBmB,EAAVb,QAQbc,WAAY,SAAAC,OCzFP,SAASC,GAAqBlT,GAEzC,IAAIsR,EAActR,EAAM+N,IAAIwD,YACT,IAAhBvR,EAAMqE,SACPiN,EAActR,EAAM+N,IAAIwD,UAAUvR,EAAMqE,SAI1C,IAFA,IAAIoN,EAAW,GAEN7I,EAAI,EAAGA,EAAI0I,EAAY9J,OAAO,EAAGoB,IAAK,CAC3C,IAAIjE,EAAO,CAACC,KAAKgE,EAAGlJ,GAAGkJ,EAAE,GAGzB,GAFA6I,EAAU7I,GAAKjE,EAEZiE,GAAK0I,EAAY9J,OAAO,EAAE,CACzB,IAAI7C,EAAO,CAACC,KAAK0M,EAAY9J,OAAO,EAAG9H,GAAG,GAC1C+R,EAAUH,EAAY9J,OAAO,GAAK7C,GAK1C,GAAmB,sCAAhB3E,EAAMgB,OAEL,IADA,IAAIhC,EAAWsS,EAAY9J,OAClBoB,EAAI,EAAGA,EAAI0I,EAAY9J,OAAO,EAAGoB,IAAK,CAC3C,IAAIjE,EAAO,CAACC,KAAKgE,EAAE,EAAGlJ,GAAGkJ,GAGzB,GAFA6I,EAAUzS,GAAY2F,EACtB3F,IACG4J,GAAK0I,EAAY9J,OAAO,EAAE,CACzB,IAAI7C,EAAO,CAACC,KAAK,EAAGlF,GAAG4R,EAAY9J,OAAO,GAC1CiK,EAAUzS,GAAY2F,GAIlCrG,QAAQC,IAAIkT,GAEZ,IAAME,EAAQ,CACVC,MAAON,EAAY3S,KAAI,SAACkT,EAAMC,EAAO/P,GACjC,IAAMgQ,EAAQ,EAAIpK,KAAKwL,IAAMrB,EAAQ/P,EAAIyF,OAAS,KAMlD,OALAqK,EAAKG,EAAI,IAAOrK,KAAKyL,IAAIrB,GACzBF,EAAKI,EAAI,IAAOtK,KAAK0L,IAAItB,GACrBD,EAAQ,IAAM,IAChBD,EAAKpB,MAAQqB,EAAQ,GAEhBD,KAGXK,MAAOT,GA8BT,OACE,cAAC,KAAD,CACEE,MAAOA,EACPX,QA5BY,CACdmB,SAAS,EACTD,MAAO,CACH9S,MAAO,QACPgT,MAAO,EACPC,QAAQ,GAEZT,MAAM,CACFU,MAAM,MACNlT,MAAO,MACPmT,KAAM,CACJ9L,KAAM,GACNrH,MAAO,WAEToT,YAAa,EACbH,QAAQ,GAEZO,OAAQ,SAYNC,OATW,CACbC,OAAQ,SAASC,GACQA,EAAjBnB,MAAiBmB,EAAVb,QAQbc,WAAY,SAAAC,O,ICnEhBtF,G,yDAMS,SAAS2F,GAAqBtT,GAIzC,OAFF2N,GAAO3N,EAAMtB,QAGP,qBAAKc,UAAU,UAAf,SAEA,eAAC+T,GAAA,EAAD,CACEnB,MAAO,IACPQ,OAAQ,IACRjF,KAAMA,GACN6F,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GARZ,UAaE,cAACC,GAAA,EAAD,CAAOC,QAAQ,UACf,cAACC,GAAA,EAAD,IACA,cAACC,GAAA,EAAD,IACA,cAACC,GAAA,EAAD,CAAKH,QAAQ,QAAQI,KAAK,UAAUC,kBA1B/B,W,ICbMC,G,4JACnB,WACG,MAAwB,uCAArBzW,KAAKqC,MAAMgB,QAAwE,sCAArBrD,KAAKqC,MAAMgB,OAEzE,8BACI,cAACkS,GAAD,CAAsBlS,OAAQrD,KAAKqC,MAAMgB,OAAQqD,OAAQ1G,KAAKqC,MAAMqU,cAAetG,IAAKpQ,KAAKqC,MAAMsU,eAI7E,6BAArB3W,KAAKqC,MAAMgB,QACC,6BAArBrD,KAAKqC,MAAMgB,QACU,wBAArBrD,KAAKqC,MAAMgB,QACU,uBAArBrD,KAAKqC,MAAMgB,OAEP,gCACA,uBACA,cAACsS,GAAD,CAAsB5U,QAASf,KAAKqC,MAAMsU,gBAM1C,8BACK,cAACjD,GAAD,CAAerQ,OAAQrD,KAAKqC,MAAMgB,OAASqD,OAAQ1G,KAAKqC,MAAMqU,cAAetG,IAAKpQ,KAAKqC,MAAMsU,mB,GAvBrE3U,aCFhB4U,G,4MACjBxT,MAAM,CACFuO,MAAM,EACNoB,UAAW,I,EAGf8D,cAAgB,WACZ,EAAKxU,MAAMyU,SAAS,EAAK1T,MAAM2P,Y,EAGnCG,YAAc,SAAA7O,GACV,EAAK8O,SAAL,gBACK9O,EAAEqL,OAAOyC,KAAO9N,EAAEqL,OAAOoD,S,4CAIlC,WAAU,IAAD,OACL,OACI,eAACjB,EAAA,EAAD,CACAC,OAAK,EACLC,QAAS,kBAAO,EAAKoB,SAAS,CAACxB,MAAM,KACrCK,OAAQ,kBAAO,EAAKmB,SAAS,CAACxB,MAAM,KACpCA,KAAM3R,KAAKoD,MAAMuO,KACjB7I,KAAK,QACLmJ,QAAS,cAACrQ,EAAA,EAAKE,KAAN,qBANT,UAQA,eAACe,EAAA,EAAD,CAAQqP,MAAI,EAAZ,UACI,cAAChP,EAAA,EAAD,CAAMiP,KAAK,WADf,iBAIA,cAACN,EAAA,EAAMjP,QAAP,UACQ,cAACwP,EAAA,EAAD,CAAOE,KAAK,OAAOD,OAAK,EAACF,KAAK,YAAYW,MAAO9S,KAAKoD,MAAM2P,UAAWvD,SAAUxP,KAAKkT,YAAaE,YAAY,cAAclB,KAAK,aAE1I,eAACL,EAAA,EAAMW,QAAP,WACI,eAACC,EAAA,EAAD,CAAQX,OAAK,EAACrQ,MAAM,MAAMiR,UAAQ,EAACC,QAAS,kBAAO,EAAKQ,SAAS,CAACxB,MAAM,KAAxE,UACA,cAACzO,EAAA,EAAD,CAAMiP,KAAK,WADX,SAGA,eAACM,EAAA,EAAD,CAAQhR,MAAM,QAAQiR,UAAQ,EAACC,QAAS3S,KAAK6W,cAA7C,UACA,cAAC3T,EAAA,EAAD,CAAMiP,KAAK,cADX,oB,GArCoBnQ,aCHrB,SAAS+U,GAAU3S,GAG9B,IADA,IAAI4S,EAAO1G,EAAUjJ,EACZ8M,EAAQ,EAAGA,EAAQ/P,EAAIyF,OAAO,EAAGsK,IAAS,CAC9C6C,EAAQ5S,EAAI+P,GACZ7D,EAAW6D,EACZ,IAAK,IAAIG,EAAIH,EAAM,EAAGG,EAAIlQ,EAAIyF,OAAQyK,IAE/BlQ,EAAIkQ,GAAGlD,MAAO4F,EAAM5F,QACnB4F,EAAQ5S,EAAIkQ,GACZhE,EAAWgE,GAKhBhE,GAAY6D,IACX9M,EAAMjD,EAAI+P,GACV/P,EAAI+P,GAAS/P,EAAIkM,GACjBlM,EAAIkM,GAAYjJ,GAKxB,OAAOjD,ECvBI,SAAS6S,GAAU7S,GAE9B,IADA,IAAIQ,EAASe,EACJ0O,EAAI,EAAGA,EAAIjQ,EAAIyF,OAAQwK,IAAK,CAGjC,IAFAzP,EAAUyP,EACV1O,EAAMvB,EAAIiQ,GACHzP,EAAQ,GAAOR,EAAIQ,EAAQ,GAAGwM,MAAQzL,EAAIyL,OAC7ChN,EAAIQ,GAAWR,EAAIQ,EAAQ,GAC3BA,IAGJR,EAAIQ,GAAWe,EAGnB,OAAOvB,E,uBCZI,SAAS8S,GAAUnW,GAE9B,GAAuB,IAAnBA,EAAQ8I,OACR,OAAO9I,EAEX,IALsC,EAKhCoW,EAASpW,EAAQA,EAAQ8I,OAAS,GAClCuN,EAAU,GACVC,EAAU,GAPsB,eASrBtW,EAAQuW,MAAM,EAAGvW,EAAQ8I,OAAS,IATb,IAStC,2BAAsD,CAAC,IAA5C0N,EAA2C,QAClDA,EAAGnG,MAAM+F,EAAO/F,MAAQgG,EAAQjW,KAAKoW,GAAMF,EAAQlW,KAAKoW,IAVtB,8BAatC,OAAGH,EAAQvN,OAAO,GAAKwN,EAAQxN,OAAS,EAC9B,GAAN,oBAAYqN,GAAUE,IAAtB,CAAiCD,GAAjC,aAA6CD,GAAUG,KACjDD,EAAQvN,OAAQ,EAChB,GAAN,oBAAWqN,GAAUE,IAArB,CAAgCD,IAE1B,CAAEA,GAAR,oBAAoBD,GAAUG,KCnBtC,IAAIG,GAAK1X,EAAQ,IAyCF2X,G,WAvCX,aAAc,oBACVzX,KAAKe,QAAU,KACff,KAAK0X,iBAAmB,E,2CAE5B,SAAQvH,GACJnQ,KAAKe,QAAUoP,EACf,IAAK,IAAIlF,EAAI,EAAGA,EAAGkF,EAAMtG,OAAO,EAAGoB,IAC/B,IAAI,IAAI0M,EAAI,EAAGA,EAAGxH,EAAMtG,OAAO,EAAG8N,IAC9B,GAAGxH,EAAMwH,GAAGvG,MAAOjB,EAAMwH,EAAE,GAAGvG,MAAM,CAChC,IAAI1Q,EAAWyP,EAAMwH,GACrBxH,EAAMwH,GAAKxH,EAAMwH,EAAE,GACnBxH,EAAMwH,EAAE,GAAKjX,EAKzB,OADAV,KAAKe,QAAUoP,EACRA,I,oBAGX,SAAOyH,GACH,IAAIzH,EAAQF,KAAKC,MAAMC,GACnBpP,EAAUoP,EAAK,QACnBnQ,KAAK6X,QAAQ9W,K,qBAIjB,WACI,IAAI+W,EAEA5W,EADJ4W,IAEA5W,EAAS,MAAYlB,KAAKe,QAE1B,IAAIgX,EAAO9H,KAAK+H,UAAU9W,GACtBmC,EAAS,eAAiByU,EAC9BN,GAAGS,UAAU5U,EAAQ0U,O,eC/Bd,SAASG,GAAgB7V,GACpC,IAAI8V,EAAM9V,EAAMsU,WAAWtO,WAM3B,MAJ0B,IAAvBhG,EAAMqU,gBACLyB,EAAO9V,EAAMsU,WAAWtO,SAAShG,EAAMqU,gBAIvC,8BACI,cAAC0B,GAAA,EAAD,CAAUD,IAAKA,EAAK9E,QAAS,CAACgF,MAAK,EAAKpD,OAAQ,IAAKR,MAAO,SCXzD,SAAS6D,GAAcjW,GAElC,IAAIsR,EAActR,EAAMsU,WAAWhG,eAEhB,IAAhBtO,EAAMqE,SACPiN,EAActR,EAAMsU,WAAWhG,aAAatO,EAAMqU,gBAGpD,IA0BM1C,EAAQ,CACVC,MAAON,EAEPY,MA7BWlS,EAAMsU,WAAW/F,qBAqE9B,OACE,cAAC,KAAD,CACEoD,MAAOA,EACPX,QAvCY,CACdkF,OAAQ,CACJC,aAAc,CACZC,UAAW,KACXC,WAAY,aAGlBlE,SAAS,EACTD,MAAO,CACL9S,MAAO,QACPgT,MAAO,EACPC,QAAQ,GAEVT,MAAM,CACFU,MAAM,MACNlT,MAAO,MACPmT,KAAM,CACJ9L,KAAM,GACNrH,MAAO,WAEToT,YAAa,EACbH,QAAQ,GAEZI,YAAa,CACXC,mBAAmB,EACnBC,UAAU,GAGZC,OAAQ,SAYNC,OATW,CACbC,OAAQ,SAASC,GACQA,EAAjBnB,MAAiBmB,EAAVb,QAQbc,WAAY,SAAAC,O,WC/DlBqD,GAAQ,EACSC,G,4MACjBxV,MAAQ,CACNyV,UAAY,KACZ/B,SAAU,GACVzT,OAAQ,GACRyV,gBAAiB,M,EAQnBC,gBAAkB,SAAC1U,EAAD,OAAM8N,EAAN,EAAMA,KAAN,OAAiB,EAAKgB,SAAS,CAAE6F,WAAY7G,K,EAE/DtB,aAAe,SAACT,GACd,EAAK+C,SAAS,CACZ0F,UAAWzI,K,EAIf6I,gBAAkB,SAAC7X,GACjB,EAAK+R,SAAS,CACZ2D,SAAU1V,K,EAKd8X,aAAa,WACX,IAAIC,EAAkB,GACpB,OAAQ,EAAK/V,MAAMC,QACjB,IAAK,4BACH8V,EAAkBpC,GAAU,EAAK3T,MAAMyV,WACvC,MAEF,IAAK,4BACHM,EAAkBlC,GAAU,EAAK7T,MAAMyV,WACvC,MACF,IAAK,uBAEHM,GADc,IAAI1B,IACQI,QAAQ,EAAKzU,MAAMyV,WAC7C,MACF,IAAK,sBACDM,EAAkBjC,GAAU,EAAK9T,MAAMyV,WAO7C,EAAK1F,SAAS,CACZ0F,UAAWM,K,EAIjBC,WAAW,WACP,OAAQ,EAAKhW,MAAMC,QACjB,IAAK,OAIL,IAAK,oBACH,EAAKD,MAAMyV,UAAUQ,MACrB,MACF,IAAK,OACH,EAAKjW,MAAMyV,UAAUtS,WAOzB,EAAK4M,SAAS,CACZ0F,UAAW,EAAKzV,MAAMyV,a,EAK7BS,oBAAoB,SAAClE,GAEnBA,EAAMmE,iBACL,IAAIC,EAAcvJ,KAAK+H,UAAU,CAACjH,QAAS,EAAK3N,MAAMyV,WAAY,KAAK,GACjEY,EAAO,IAAIC,KAAK,CAACF,IAEjBV,EAAkBa,IAAIC,gBAAgBH,GAC5C,EAAKtG,SAAU,CAAC2F,gBAAiBA,IAC/B,WACE,EAAKe,eAAeC,QACpBH,IAAII,gBAAgBjB,GACpB,EAAK3F,SAAS,CAAC2F,gBAAiB,S,EAKxCkB,mBAAmB,SAAC5E,GAElBA,EAAMmE,iBACL,IAAIC,EAAcvJ,KAAK+H,UAAU,CAAC3U,OAAO,EAAKD,MAAMC,OAAO0N,QAAS,EAAK3N,MAAMyV,UAAUvN,WAAY,KAAK,GACpGmO,EAAO,IAAIC,KAAK,CAACF,IAEjBV,EAAkBa,IAAIC,gBAAgBH,GAC5C,EAAKtG,SAAU,CAAC2F,gBAAiBA,IAC/B,WACE,EAAKe,eAAeC,QACpBH,IAAII,gBAAgBjB,GACpB,EAAK3F,SAAS,CAAC2F,gBAAiB,S,uDAhGpC,WACE9Y,KAAKmT,SAAS,CAAC9P,OAAQrD,KAAKqC,MAAM4X,SAAS7W,MAAMC,W,oBAoGpD,WAAU,IAAD,OACgBrD,KAAKoD,MAApB4V,WAER,OAA2B,MAAxBhZ,KAAKoD,MAAMyV,UAEV,gCACI,eAACjX,EAAA,EAAD,CAAMC,UAAU,gCAAhB,UACE,cAACD,EAAA,EAAKE,KAAN,UACY,cAAC,IAAD,CAAMC,GAAG,gCAAT,uBAEZ,cAACyP,GAAD,CAAQX,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACpG,cAAC,GAAD,CAAU9H,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACtG,cAAC,GAAD,CAAU9H,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACtG,cAAC,GAAD,CAAY9H,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACxG,cAAC,GAAD,CAAS7B,SAAU9W,KAAKiZ,iBAAuBN,MACjD,cAAC/W,EAAA,EAAKA,KAAN,CAAWsY,SAAS,QAApB,SACE,cAACtY,EAAA,EAAKE,KAAN,CAAWqQ,KAAK,UAAUD,KAAK,OAAQS,SAAS3S,KAAK+Y,gBAAiB/Y,KAAKga,2BAK/E,mBAAGnY,UAAU,SACXsY,SAAUna,KAAKoD,MAAMC,OAAO,QAC5B+W,KAAMpa,KAAKoD,MAAM0V,gBACjBuB,IAAK,SAAAhW,GAAC,OAAE,EAAKwV,eAAiBxV,GAHhC,yBAKA,oBAAI/B,MAAO,CAAEb,MAAO,SAApB,SAAgCzB,KAAKoD,MAAMC,YAQvB,6BAArBrD,KAAKoD,MAAMC,QACU,6BAArBrD,KAAKoD,MAAMC,QACU,wBAArBrD,KAAKoD,MAAMC,QACU,uBAArBrD,KAAKoD,MAAMC,OAEV,gCACI,eAACzB,EAAA,EAAD,CAAMC,UAAU,gCAAhB,UACE,cAACD,EAAA,EAAKE,KAAN,UACY,cAAC,IAAD,CAAMC,GAAG,gCAAT,uBAEZ,cAACyP,GAAD,CAAQX,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACpG,cAAC/W,EAAA,EAAKE,KAAN,CAAWqQ,KAAK,UAAUD,KAAK,YAC7BS,SAAS3S,KAAK+Y,gBAAiB/Y,KAAKkZ,gBAExC,cAACtX,EAAA,EAAKA,KAAN,CAAWsY,SAAS,QAApB,SACE,cAACtY,EAAA,EAAKE,KAAN,CAAWqQ,KAAK,UAAUD,KAAK,OAAOS,SAAS3S,KAAK+Y,gBAAiB/Y,KAAKsZ,4BAM9E,uBACA,mBAAGzX,UAAU,SACbsY,SAAUna,KAAKoD,MAAMC,OAAO,QAC5B+W,KAAMpa,KAAKoD,MAAM0V,gBACjBuB,IAAK,SAAAhW,GAAC,OAAE,EAAKwV,eAAiBxV,GAH9B,yBAKC,oBAAI/B,MAAO,CAAEb,MAAO,SAApB,SAAgCzB,KAAKoD,MAAMC,SAE5C,cAAC,GAAD,CAASA,OAAQrD,KAAKoD,MAAMC,OAAQsT,WAAY3W,KAAKoD,MAAMyV,WAAiBF,SAGpD,aAArB3Y,KAAKoD,MAAMC,QACS,aAArBrD,KAAKoD,MAAMC,OAEf,gCACI,eAACzB,EAAA,EAAD,CAAMC,UAAU,gCAAhB,UACE,cAACD,EAAA,EAAKE,KAAN,UACY,cAAC,IAAD,CAAMC,GAAG,gCAAT,uBAEZ,cAACyP,GAAD,CAAQX,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACpG,cAAC,GAAD,CAAU9H,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACtG,cAAC,GAAD,CAAU9H,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACtG,cAAC,GAAD,CAAY9H,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACxG,cAAC,GAAD,CAAQ7B,SAAU9W,KAAKiZ,iBAAsBN,MAC/C,cAAC/W,EAAA,EAAKA,KAAN,CAAWsY,SAAS,QAApB,SACE,cAACtY,EAAA,EAAKE,KAAN,CAAWqQ,KAAK,UAAUD,KAAK,OAAQS,SAAS3S,KAAK+Y,gBAAiB/Y,KAAKga,2BAK/E,uBACA,mBAAGnY,UAAU,SACbsY,SAAUna,KAAKoD,MAAMC,OAAO,QAC5B+W,KAAMpa,KAAKoD,MAAM0V,gBACjBuB,IAAK,SAAAhW,GAAC,OAAE,EAAKwV,eAAiBxV,GAH9B,yBAKC,oBAAI/B,MAAO,CAAEb,MAAO,SAApB,SAAgCzB,KAAKoD,MAAMC,SAE3C,cAACiV,GAAD,CAAejV,OAAQrD,KAAKoD,MAAMC,OAAQsT,WAAY3W,KAAKoD,MAAMyV,UAAWnC,cAAe1W,KAAKoD,MAAM0T,UAAe6B,SAG9F,WAArB3Y,KAAKoD,MAAMC,QACG,YAArBrD,KAAKoD,MAAMC,QACU,gBAArBrD,KAAKoD,MAAMC,OAGf,gCACI,eAACzB,EAAA,EAAD,CAAMC,UAAU,gCAAhB,UACE,cAACD,EAAA,EAAKE,KAAN,UACY,cAAC,IAAD,CAAMC,GAAG,gCAAT,uBAEZ,cAACyP,GAAD,CAAQX,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACpG,cAAC,GAAD,CAAU9H,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACtG,cAAC,GAAD,CAAU9H,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACtG,cAAC,GAAD,CAAY9H,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACxG,cAAC,GAAD,CAAQ7B,SAAU9W,KAAKiZ,iBAAsBN,MAC/C,cAAC/W,EAAA,EAAKA,KAAN,CAAWsY,SAAS,QAApB,SACE,cAACtY,EAAA,EAAKE,KAAN,CAAWqQ,KAAK,UAAUD,KAAK,OAAQS,SAAS3S,KAAK+Y,gBAAiB/Y,KAAKga,2BAK/E,uBACA,mBAAGnY,UAAU,SACPsY,SAAUna,KAAKoD,MAAMC,OAAO,QAC5B+W,KAAMpa,KAAKoD,MAAM0V,gBACjBuB,IAAK,SAAAhW,GAAC,OAAE,EAAKwV,eAAiBxV,GAHpC,yBAKC,oBAAI/B,MAAO,CAAEb,MAAO,SAApB,SAAgCzB,KAAKoD,MAAMC,SAE3C,cAAC6U,GAAD,CAAiB7U,OAAQrD,KAAKoD,MAAMC,OAAQsT,WAAY3W,KAAKoD,MAAMyV,UAAWnC,cAAe1W,KAAKoD,MAAM0T,UAAe6B,SAGhG,QAArB3Y,KAAKoD,MAAMC,QACgB,QAArBrD,KAAKoD,MAAMC,QACU,qBAArBrD,KAAKoD,MAAMC,OAEhB,gCACI,eAACzB,EAAA,EAAD,CAAMC,UAAU,gCAAhB,UACE,cAACD,EAAA,EAAKE,KAAN,UACY,cAAC,IAAD,CAAMC,GAAG,gCAAT,uBAEZ,cAACyP,GAAD,CAAQX,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACpG,cAAC,GAAD,CAAU9H,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACtG,cAAC,GAAD,CAAU9H,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACtG,cAAC,GAAD,CAAY9H,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACxG,cAAC,GAAD,CAAQ7B,SAAU9W,KAAKiZ,iBAAsBN,MAC7C,cAAC/W,EAAA,EAAKE,KAAN,CAAWqQ,KAAK,aACdQ,SAAS3S,KAAK+Y,gBAAiB/Y,KAAKoZ,cAExC,cAACxX,EAAA,EAAKA,KAAN,CAAWsY,SAAS,QAApB,SACE,cAACtY,EAAA,EAAKE,KAAN,CAAWqQ,KAAK,UAAUD,KAAK,OAAQS,SAAS3S,KAAK+Y,gBAAiB/Y,KAAKga,2BAK/E,uBACA,mBAAGnY,UAAU,SACbsY,SAAUna,KAAKoD,MAAMC,OAAO,QAC5B+W,KAAMpa,KAAKoD,MAAM0V,gBACjBuB,IAAK,SAAAhW,GAAC,OAAE,EAAKwV,eAAiBxV,GAH9B,yBAMC,oBAAI/B,MAAO,CAAEb,MAAO,SAApB,SAAgCzB,KAAKoD,MAAMC,SAE5C,cAAC,GAAD,CAASA,OAAQrD,KAAKoD,MAAMC,OAAQsT,WAAY3W,KAAKoD,MAAMyV,UAAWnC,cAAe1W,KAAKoD,MAAM0T,UAAe6B,SAKjH,gCACI,eAAC/W,EAAA,EAAD,CAAMC,UAAU,gCAAhB,UACE,cAACD,EAAA,EAAKE,KAAN,UACY,cAAC,IAAD,CAAMC,GAAG,gCAAT,uBAEZ,cAACyP,GAAD,CAAQX,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACpG,cAAC,GAAD,CAAU9H,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACtG,cAAC,GAAD,CAAU9H,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACtG,cAAC,GAAD,CAAY9H,aAAc7Q,KAAK6Q,aAAcxN,OAAQrD,KAAKoD,MAAMC,OAAQ+M,IAAKpQ,KAAKoD,MAAMyV,WAAgBF,MACxG,cAAC,GAAD,CAAQ7B,SAAU9W,KAAKiZ,iBAAsBN,MAC/C,cAAC/W,EAAA,EAAKA,KAAN,CAAWsY,SAAS,QAApB,SACE,cAACtY,EAAA,EAAKE,KAAN,CAAWqQ,KAAK,UAAUD,KAAK,OAAQS,SAAS3S,KAAK+Y,gBAAiB/Y,KAAKga,2BAK/E,uBACA,mBAAGnY,UAAU,SACbsY,SAAUna,KAAKoD,MAAMC,OAAO,QAC5B+W,KAAMpa,KAAKoD,MAAM0V,gBACjBuB,IAAK,SAAAhW,GAAC,OAAE,EAAKwV,eAAiBxV,GAH9B,yBAMC,oBAAI/B,MAAO,CAAEb,MAAO,SAApB,SAAgCzB,KAAKoD,MAAMC,SAE5C,cAAC,GAAD,CAASA,OAAQrD,KAAKoD,MAAMC,OAAQsT,WAAY3W,KAAKoD,MAAMyV,UAAWnC,cAAe1W,KAAKoD,MAAM0T,UAAe6B,a,GA5SpF3W,aCfrCsY,GAAe,CACjBC,gBAAiB,wMAsBJC,OApBf,WACE,OACE,qBAAK3Y,UAAU,MAAMS,MAAOgY,GAA5B,SACE,eAAC,IAAD,WACA,cAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,gCAAgCC,OAAQ,WACxD,OAAO,gCACL,cAAC,EAAD,IACA,cAAC,EAAD,UAKF,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,0CAA0CE,UAAWhC,WCXhEiC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCAdQ,IAASX,OACP,cAAC,IAAMY,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.73364f4c.chunk.js","sourcesContent":["var fs = require('fs')\r\nclass Nodo {\r\n    constructor(valor){\r\n        this.valor = valor;\r\n        this.siguiente = null;        \r\n    }\r\n   \r\n}\r\nclass ListaSimple{  \r\n\r\n    constructor(){\r\n       this.primero = null;             \r\n    }  \r\n\r\n\r\n    agregar(elemento, accion){        \r\n        switch(accion){\r\n            case \"Ordenado\":\r\n                this.agregarOrdenado(elemento);\r\n                break;\r\n            case \"Final\":\r\n                this.agregarFinal(elemento);\r\n                break;\r\n            case \"Inicio\":\r\n                this.agregarInicio(elemento);\r\n                break;   \r\n        }\r\n    }\r\n\r\n\r\n    agregarInicio(elemento){\r\n        let nodo = new Nodo(elemento);\r\n        if(this.primero == null){\r\n            this.primero = nodo;\r\n        }else{\r\n            nodo.siguiente = this.primero;\r\n            this.primero = nodo;\r\n        }\r\n    }\r\n    \r\n    agregarOrdenado(elemento){\r\n        let nodo = new Nodo(elemento)\r\n        if(this.primero == null){\r\n            this.primero = nodo;\r\n        }else{\r\n            let temporal = this.primero;\r\n            while(temporal.siguiente != null ){\r\n                if(temporal.valor <= elemento && temporal.siguiente.valor >= elemento){\r\n                    nodo.siguiente = temporal.siguiente;\r\n                    temporal.siguiente = nodo;   \r\n                    break;                 \r\n                }else if(temporal == this.primero && temporal.valor >= elemento){\r\n                    nodo.siguiente = this.primero;\r\n                    this.primero = nodo;\r\n                    break;\r\n                }                                \r\n                temporal = temporal.siguiente;\r\n\r\n            }if(temporal.siguiente == null && temporal.valor <= elemento){\r\n                temporal.siguiente = nodo; \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    agregarFinal(elemento) {\r\n        //crear un nodo para agregar a la lista\r\n        let nodo = new Nodo(elemento)        \r\n        if (this.primero == null) {\r\n            this.primero = nodo;\r\n\r\n        }\r\n        else {\r\n            // Busca el final del arreglo e ingresa el nodo ahi\r\n            let temporal = this.primero;\r\n            while (temporal.siguiente != null) {\r\n                temporal = temporal.siguiente;\r\n            }            \r\n            temporal.siguiente = nodo;\r\n        }\r\n    }\r\n \r\n\r\n    eliminar(elemento) {\r\n        if (this.primero == null) {\r\n            console.log(\"No hay nada en las lista\")\r\n        }\r\n        else {\r\n            let temporal = this.primero;\r\n            while (temporal != null) {\r\n                if (temporal.valor == elemento) {\r\n                    temporal = temporal.siguiente;\r\n                }\r\n                else {\r\n                    if (temporal.siguiente != null) {\r\n                        if (temporal.siguiente.valor == elemento) {\r\n                            let siguienteT = temporal.siguiente;\r\n                            temporal.siguiente = siguienteT.siguiente;\r\n                            siguienteT.siguiente = null;\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                temporal = temporal.siguiente;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    actualizar(id, valor) {\r\n        if (this.primero == null) {\r\n            console.log(\"No hay nada en las lista\")\r\n        }\r\n        else {\r\n            let temporal = this.primero;\r\n            while (temporal != null) {\r\n                if (temporal.valor == id) {\r\n                    temporal.valor = valor;\r\n                }\r\n                temporal = temporal.siguiente;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    buscar(valor) {\r\n        if (this.primero == null  ) {\r\n            console.log(\"no hay elementos en la lista\");           \r\n\r\n        }\r\n        else {\r\n            let temporal = this.primero;\r\n            while(temporal != null){ \r\n                if(temporal.valor == valor){\r\n                    return temporal;  \r\n                }\r\n                temporal = temporal.siguiente;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    cargar(arreglo,accion) {        \r\n        arreglo.map(elemento => {\r\n            this.agregar(elemento, accion);\r\n        });\r\n        \r\n\r\n    }\r\n    guardar() {\r\n        let archivojs= [];\r\n        let temporal = this.primero;\r\n        while (temporal != null){\r\n            archivojs.push(temporal.valor);\r\n            temporal = temporal.siguiente;\r\n            \r\n        }\r\n        return archivojs;\r\n        \r\n    }\r\n\r\n    imprimir(){\r\n        let temporal = this.primero;\r\n        while(temporal != null){\r\n            console.log(temporal.valor)\r\n            temporal = temporal.siguiente;\r\n        }\r\n    }\r\n\r\n    Recorrido(datoBuscar){\r\n\r\n        let arreglo = []\r\n        let contador = 0;\r\n        let temporal = this.primero;\r\n            while(temporal != null){ \r\n                let dato = {id: contador, label: temporal.valor.toString(),}\r\n                arreglo[contador] = dato\r\n\r\n                if(temporal.valor == datoBuscar){\r\n                    \r\n                    let dato = {id: contador, label: temporal.valor.toString(),  color: \"lime\"}\r\n                    arreglo[contador] = dato\r\n                }\r\n                temporal = temporal.siguiente;\r\n                contador++;\r\n            }\r\n\r\n            return arreglo;\r\n\r\n    }\r\n  \r\n}\r\n//module.exports.ListaSimple = ListaSimple;\r\nexport default ListaSimple;\r\n","import React from 'react'\r\nimport { Button, Header, Icon, Modal,Menu,Input } from 'semantic-ui-react'\r\n\r\nimport Cola from '../estructuras/EstructurasLineales/Cola'\r\nimport ColaPrioridad from '../estructuras/EstructurasLineales/ColaPrioridad'\r\n\r\nimport ArbolAVL from '../estructuras/Estructuras_Arboreas/AVL'\r\nimport ABB from '../estructuras/Estructuras_Arboreas/ABB'\r\nimport MerkleTree from '../estructuras/Estructuras_Arboreas/merkleTree'\r\n\r\nimport Pila from '../estructuras/EstructurasLineales/Pila'\r\nimport ListaCirD from '../estructuras/EstructurasLineales/ListaCirD'\r\nimport ListaCS from '../estructuras/EstructurasLineales/ListaCirS'\r\nimport ListaSimple from '../estructuras/EstructurasLineales/ListaSimple'\r\nimport ListaDoble from '../estructuras/EstructurasLineales/ListaDoble'\r\n\r\nimport ArbolB from '../estructuras/Estructuras_Arboreas/ArbolB'\r\nimport ArbolBplus from '../estructuras/Estructuras_Arboreas/ArbolBplus'\r\n\r\nlet propsG\r\nfunction onChange(e){\r\n    let files = e.target.files[0];\r\n    let reader = new FileReader();\r\n    console.log(e.target.files[0])\r\n    reader.onload = (e) => {\r\n        const text = reader.result.toString().trim();\r\n        console.log(text)\r\n        let data = JSON.parse(text); //parseo de archivo JSON\r\n        structW(propsG.nombre, data.valores, propsG.edd,data.grado,data.posicion) \r\n    }\r\n    reader.readAsText(files);\r\n}\r\nfunction structW(nombre,datos,edd,grado,posicion){ // FUNCION PARA SABER QUE TIPO DE ESTRUCTURA ES.\r\n    switch(nombre){\r\n        case \"Pila\" :\r\n            if(edd == null){\r\n                edd = new Pila();\r\n            }\r\n            edd.cargar(datos)\r\n            break\r\n        case \"Cola\":\r\n            if(edd == null){\r\n                edd = new Cola();\r\n            }\r\n            edd.cargar(datos)\r\n            edd.Imprimir()\r\n            break\r\n        case \"Cola de prioridad\":\r\n            if(edd == null){\r\n                edd = new ColaPrioridad();\r\n            }\r\n            edd.cargar(datos)\r\n            break\r\n        case \"Lista simplemente enlazada\":\r\n\r\n            if(edd == null){\r\n                edd = new ListaSimple();\r\n            }\r\n            edd.cargar(datos,posicion)\r\n            break\r\n\r\n        case \"Lista doblemente enlazada\":\r\n\r\n            if(edd == null){\r\n                edd = new ListaDoble();\r\n            }\r\n            edd.cargar(datos,posicion) \r\n            break\r\n\r\n        case \"Lista circular simplemente enlazada\":\r\n\r\n            if(edd == null){\r\n                edd = new ListaCS();\r\n            }\r\n            edd.cargar(datos,posicion)\r\n            break\r\n\r\n        case \"Lista circular doblemente enlazada\":\r\n\r\n            if(edd == null){\r\n                edd = new ListaCirD();\r\n            }\r\n            edd.cargar(datos,posicion)\r\n            break\r\n        case \"Ordenamiento Selección\":\r\n\r\n            edd = arrString(datos)\r\n            break\r\n        case \"Ordenamiento Inserción\":\r\n\r\n            edd = arrString(datos)\r\n            break\r\n        case \"Ordenamiento Burbuja\":\r\n\r\n            edd = arrString(datos)\r\n            break\r\n        case \"Ordenamiento Rapido\":\r\n\r\n            edd = arrString(datos)\r\n            break\r\n        case \"Arbol ABB\":\r\n\r\n            edd = new ABB();\r\n            edd.cargar(datos)\r\n            console.log(edd.obtenerNodos())\r\n            console.log(edd.obtenerAputadores())\r\n            break\r\n        case \"Arbol AVL\":\r\n\r\n            edd = new ArbolAVL();\r\n            edd.cargar(datos)\r\n            console.log(edd.obtenerNodos())\r\n            console.log(edd.obtenerAputadores())\r\n            break\r\n        case \"Arbol B\":\r\n\r\n            edd = new ArbolB(grado);\r\n            edd.cargar(datos)\r\n            console.log(edd.graficar())\r\n            break\r\n        case \"Arbol Merkle\":\r\n\r\n            edd = new MerkleTree();\r\n            edd.cargar(datos)\r\n            break\r\n         case \"Arbol B+\":\r\n\r\n            edd = new ArbolBplus(grado);\r\n            edd.cargar(datos)\r\n            console.log(edd.graficar())\r\n            break\r\n        default:\r\n            break;\r\n    }\r\n    propsG.obtenerDatos(edd);\r\n}\r\n\r\n\r\n\r\nfunction arrString(arreglo){\r\n    let newarr = []\r\n  \r\n    \r\n    if(arreglo[0].charCodeAt){\r\n        for (let i = 0; i < arreglo.length-1; i++) {\r\n            let newValor = {valor:arreglo[i],ASCII:getCharCodes(arreglo[i])}\r\n          newarr.push(newValor)\r\n          \r\n        }\r\n    }else{\r\n        for (let i = 0; i < arreglo.length-1; i++) {\r\n            let newValor = {valor:arreglo[i],ASCII:arreglo[i]}\r\n          newarr.push(newValor)\r\n          \r\n        }\r\n    }\r\n  \r\n    return newarr\r\n  }\r\n  \r\n  function getCharCodes(s){\r\n    let charCodeArr = 0;\r\n    \r\n    for(let i = 0; i < s.length; i++){\r\n        let code = s.charCodeAt(i);\r\n        charCodeArr += code\r\n    }\r\n    \r\n    return charCodeArr;\r\n  }\r\n\r\n\r\nexport default function Cargar(props) {\r\n    propsG = props\r\n    const [open, setOpen] = React.useState(false)\r\n    return (\r\n        <Modal\r\n            className=\"modalcargar\"\r\n            basic\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n            open={open}\r\n            size='small'\r\n            trigger={<Menu.Item>Cargar</Menu.Item> }\r\n            >\r\n            <Header icon>\r\n                <Icon name='folder open outline' />\r\n                Cargar\r\n            </Header>\r\n            <Modal.Content>\r\n            </Modal.Content>\r\n                <Input className=\"inputcargar\" fluid type=\"file\" accept=\".json\" onChange={(e) =>  onChange(e)} />\r\n            <Modal.Actions>\r\n                <Button basic color='red' inverted onClick={() => setOpen(false)}>\r\n                <Icon name='remove' /> No\r\n                </Button>\r\n                <Button className=\"buttoncargar\" color='green' inverted onClick={() =>  setOpen(false)}>\r\n                <Icon name='checkmark' /> Si\r\n                </Button>\r\n            </Modal.Actions>\r\n            </Modal>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Menu } from 'semantic-ui-react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default class Navbar extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <Menu className=\"ui tpo inverted attached menu\">\r\n                    <Menu.Item>\r\n                        <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n                    </Menu.Item>\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nvar colorcard ={\r\n    background: \"rgba(0, 0, 0, 0.1)\"\r\n}\r\n\r\n\r\nexport default class Division extends Component {\r\n\r\n   \r\n    render() {\r\n        return (\r\n                 <Card color = {this.props.color} style={colorcard}>\r\n                    <Image src={this.props.imagen} wrapped ui={false} />\r\n                    <Card.Content>\r\n                    <Card.Header style={{ color: 'white' }}>{this.props.title}</Card.Header>\r\n                    <Card.Description style={{ color: 'white' }}>\r\n                        {this.props.descripcion}\r\n                    </Card.Description>\r\n                    </Card.Content>\r\n                    <Card.Content extra>\r\n                    <a>\r\n                        <Icon className='angle double right icon' style={{ color: 'white' }}>\r\n                            <Link style={{ color: 'white' }} to={{pathname:\"/tytusds/20211SVAC/G03/build/estructura\", state:{nombre: this.props.title}}}>IR</Link>\r\n                         </Icon>\r\n                    </a>\r\n                    </Card.Content>\r\n                </Card>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Card } from 'semantic-ui-react'\r\nimport Division from './Division'\r\nimport './Divisiones.css'\r\n\r\n\r\nexport default class Divisiones extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"divisiones\"> \r\n            <div className=\"one\">\r\n                <h1 style={{ color: 'white' }}>TytusDS</h1>\r\n            </div>\r\n            \r\n            <br/>\r\n            <br/>\r\n            <Card.Group itemsPerRow={4} >\r\n                    <Division title=\"Ordenamiento Burbuja\" descripcion=\"this a description\" color='red' imagen=\"https://upload.wikimedia.org/wikipedia/commons/e/ef/Sorting_shaker_sort_anim.gif\"/>\r\n                    <Division title=\"Ordenamiento Selección\" descripcion=\"this a description\" color='green' imagen=\"https://upload.wikimedia.org/wikipedia/commons/a/a5/Smoothsort.gif\"/>\r\n                    <Division title=\"Ordenamiento Inserción\" descripcion=\"this a description\" color='yellow' imagen=\"https://thumbs.gfycat.com/DazzlingGracefulAngelfish-size_restricted.gif\"/>\r\n                    <Division title=\"Ordenamiento Rapido\" descripcion=\"this a description\" color='blue' imagen=\"https://media.geeksforgeeks.org/wp-content/uploads/20190705180519/quicksort.gif\"/>\r\n                   \r\n                    <Division title=\"Lista simplemente enlazada\" descripcion=\"this a description\" color='green' imagen=\"https://s6.gifyu.com/images/A-1.gif\"/>\r\n                    <Division title=\"Lista doblemente enlazada\" descripcion=\"this a description\" color='yellow' imagen=\"https://s6.gifyu.com/images/A-2.gif\"/>\r\n                    <Division title=\"Lista circular simplemente enlazada\" descripcion=\"this a description\" color='blue' imagen=\"https://s6.gifyu.com/images/A-4.gif\"/>\r\n                    <Division title=\"Lista circular doblemente enlazada\" descripcion=\"this a description\" color='violet' imagen=\"https://s6.gifyu.com/images/A-3.gif\"/>\r\n\r\n                    <Division title=\"Pila\" descripcion=\"this a description\" color='green' imagen=\"https://s6.gifyu.com/images/Pila.gif\"/>\r\n                    <Division title=\"Cola\" descripcion=\"this a description\" color='yellow' imagen=\"https://s6.gifyu.com/images/Cola.gif\"/>\r\n                    <Division title=\"Cola de prioridad\" descripcion=\"this a description\" color='blue' imagen=\"https://s6.gifyu.com/images/Cola-de-Prioridad.gif\"/>\r\n\r\n\r\n                    <Division title=\"Arbol ABB\" descripcion=\"this a description\" color='yellow' imagen=\"https://s6.gifyu.com/images/Arbol-ABB.gif\"/>\r\n                    <Division title=\"Arbol AVL\" descripcion=\"this a description\" color = 'green' imagen=\"https://s6.gifyu.com/images/Arbol-AVL.gif\"/>\r\n                    <Division title=\"Arbol B\" descripcion=\"this a description\"color='blue' imagen=\"https://s6.gifyu.com/images/Arbol-B.gif\"/>\r\n                    <Division title=\"Arbol B+\" descripcion=\"this a description\" color='violet' imagen=\"https://s6.gifyu.com/images/Arbol-B03b18e464b7dd774.gif\"/>\r\n                    <Division title=\"Arbol Merkle\" descripcion=\"this a description\" color=\"green\" imagen=\"https://s6.gifyu.com/images/Arbol-Merkle.gif\"/>\r\n            </Card.Group>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","var fs = require('fs')\r\nclass Nodo {\r\n    constructor(dato){\r\n        this.dato = dato\r\n        this.siguiente = null\r\n    }\r\n}\r\n\r\nclass Cola {\r\n    constructor(){\r\n        this.primero = null\r\n        this.ultimo = null\r\n        this.longitud = 0 \r\n    }\r\n\t\r\n\testaVacia() {\r\n        if (this.primero == null){\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    Agregar(dato){\r\n        let nuevoNodo = new Nodo(dato)\r\n\r\n        if(this.estaVacia()){\r\n            this.primero = nuevoNodo\r\n            this.ultimo = nuevoNodo\r\n        }else{\r\n            nuevoNodo.siguiente = this.primero\r\n            this.primero = nuevoNodo\r\n        }\r\n\r\n        this.longitud++\r\n    }\r\n\t\r\n\tPop(){\r\n        let eliminado = this.ultimo\r\n        if (this.primero == this.ultimo){\r\n            this.primero = null\r\n            this.ultimo = null\r\n        }else{\r\n            let nodoActual = this.primero\r\n            while (nodoActual.siguiente != eliminado){\r\n                nodoActual = nodoActual.siguiente\r\n            }\r\n\r\n            this.ultimo = nodoActual\r\n            this.ultimo.siguiente = null\r\n        }\r\n        this.longitud--\r\n    }\r\n\t\r\n\tImprimir(){\r\n        let text = \"\"\r\n        let nodoActual = this.primero\r\n\r\n        while (nodoActual != null){\r\n            text += nodoActual.dato + \"->\"\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            \r\n        }\r\n        text += \"null\"\r\n\r\n        return text\r\n    }\r\n\t\r\n\tactualizar(datoAnterior, datoNuevo){\r\n        let nodoActual = this.primero\r\n\r\n        while(nodoActual != null){\r\n            if(nodoActual.dato == datoAnterior){\r\n                nodoActual.dato = datoNuevo\r\n            }\r\n\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n    }\r\n\t\r\n\tbuscar (dato){\r\n        let datoEncontrado = null\r\n        let nodoActual = this.primero\r\n\r\n        while(nodoActual != null){\r\n            if(nodoActual.dato == dato){\r\n                datoEncontrado = \"El dato se encontró: \"+ nodoActual.dato\r\n                return datoEncontrado\r\n            }\r\n\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n        datoEncontrado = \"no se encontro el dato\"\r\n        return  datoEncontrado\r\n    }\r\n\t\r\n\teliminar(dato){\r\n       let nodoActual = this.primero\r\n        let nodoanterior = null\r\n\r\n        if(nodoActual != null && nodoActual.dato == dato){\r\n            this.primero = nodoActual.siguiente\r\n            return\r\n        }\r\n\r\n        while(nodoActual != null && nodoActual.dato != dato){\r\n            nodoanterior = nodoActual\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n\r\n        if (nodoActual == null){\r\n            return\r\n        }\r\n\r\n        nodoanterior.siguiente = nodoActual.siguiente;\r\n    }\r\n\t\r\n\tcargar(arr){\r\n        arr.map(e => {\r\n            this.Agregar(e)\r\n        })\r\n    }\r\n\r\n    guardar(){\r\n        let arreglo = []\r\n        let nodoActual = this.primero\r\n\r\n        while (nodoActual != null){\r\n            arreglo.push(nodoActual.dato)\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            \r\n        }\r\n\r\n        return arreglo\r\n    }\r\n\t\r\n\tRecorrido(datoBuscar){\r\n        let arreglo = []\r\n        let nodoActual = this.primero\r\n        let contador = 0\r\n\r\n        while (nodoActual != null){\r\n            let dato = {id: contador, label: nodoActual.dato.toString(),}\r\n            arreglo[contador] = dato\r\n\r\n            if(nodoActual.dato == datoBuscar){\r\n                let dato = {id: contador, label: nodoActual.dato.toString(),  color: \"lime\"}\r\n                arreglo[contador] = dato\r\n            }\r\n\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            contador++\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n\r\n}\r\n\r\nexport default Cola;","var fs = require('fs')\r\nclass Nodo {\r\n    constructor(dato, prioridad){\r\n        this.dato = dato\r\n        this.prioridad = prioridad\r\n        this.siguiente = null\r\n    }\r\n}\r\n\r\nclass ColaPrioridad {\r\n    constructor(){\r\n        this.primero = null\r\n        this.ultimo = null\r\n        this.longitud = 0 \r\n    }\r\n\t\r\n\testaVacia() {\r\n        if (this.primero == null){\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    Agregar(dato,prioridad){\r\n        let nuevoNodo = new Nodo(dato,prioridad)\r\n\r\n        if(this.estaVacia()){\r\n            this.primero = nuevoNodo\r\n            this.ultimo = nuevoNodo\r\n        }else{\r\n\r\n            nuevoNodo.siguiente = this.primero\r\n            this.primero = nuevoNodo\r\n            // Ordenando cola segun la prioridad\r\n            let temp,nodoActual,temp1\r\n            nodoActual = this.primero\r\n            let siguiente = nodoActual.siguiente\r\n            while(nodoActual.siguiente != null){\r\n            \r\n                if(nodoActual.prioridad > siguiente.prioridad){\r\n                    temp = nodoActual.dato\r\n                    temp1 = nodoActual.prioridad\r\n                    nodoActual.dato = siguiente.dato\r\n                    nodoActual.prioridad = siguiente.prioridad\r\n                    siguiente.dato = temp\r\n                    siguiente.prioridad = temp1\r\n        \r\n                    nodoActual = nodoActual.siguiente\r\n                    siguiente = siguiente.siguiente\r\n                }else{\r\n                    nodoActual = nodoActual.siguiente\r\n                    siguiente = siguiente.siguiente\r\n                }\r\n            }\r\n        }\r\n\r\n        this.longitud++\r\n    }\r\n\t\r\n\t Pop(){\r\n        let eliminado = this.ultimo\r\n        if (this.primero == this.ultimo){\r\n            this.primero = null\r\n            this.ultimo = null\r\n        }else{\r\n            let nodoActual = this.primero\r\n            while (nodoActual.siguiente != eliminado){\r\n                nodoActual = nodoActual.siguiente\r\n            }\r\n\r\n            this.ultimo = nodoActual\r\n            this.ultimo.siguiente = null\r\n        }\r\n        this.longitud--\r\n    }\r\n\t\r\n\t Imprimir(){\r\n        let text = \"\"\r\n        let nodoActual = this.primero\r\n\r\n        while (nodoActual != null){\r\n            text += nodoActual.dato + \"->\"\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            \r\n        }\r\n        text += \"null\"\r\n\r\n        console.log(text)\r\n    }\r\n\r\n    actualizar(datoAnterior, datoNuevo){\r\n        let nodoActual = this.primero\r\n\r\n        while(nodoActual != null){\r\n            if(nodoActual.dato == datoAnterior){\r\n                nodoActual.dato = datoNuevo\r\n            }\r\n\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n    }\r\n\r\n    buscar (dato){\r\n        let datoEncontrado = null\r\n        let nodoActual = this.primero\r\n\r\n        while(nodoActual != null){\r\n            if(nodoActual.dato == dato){\r\n                datoEncontrado = \"El dato se encontró: \"+ nodoActual.dato\r\n                return datoEncontrado\r\n            }\r\n\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n        datoEncontrado = \"no se encontro el dato\"\r\n        return  datoEncontrado\r\n    }\r\n\t\r\n\teliminar(dato){\r\n       let nodoActual = this.primero\r\n        let nodoanterior = null\r\n\r\n        if(nodoActual != null && nodoActual.dato == dato){\r\n            this.primero = nodoActual.siguiente\r\n            return\r\n        }\r\n\r\n        while(nodoActual != null && nodoActual.dato != dato){\r\n            nodoanterior = nodoActual\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n\r\n        if (nodoActual == null){\r\n            return\r\n        }\r\n\r\n        nodoanterior.siguiente = nodoActual.siguiente;\r\n    }\r\n    \r\n    cargar(arr){\r\n        arr.map(e => {\r\n            this.Agregar(e.valor,e.prioridad)\r\n        })\r\n    }\r\n\r\n    guardar(){\r\n        let arreglo = []\r\n        let nodoActual = this.primero\r\n\r\n        while (nodoActual != null){\r\n            let colaP = {valor: nodoActual.dato, prioridad: nodoActual.prioridad}\r\n            arreglo.push(colaP)\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            \r\n        }\r\n\r\n        return arreglo\r\n    }\r\n\r\n\tRecorrido(datoBuscar){\r\n        let arreglo = []\r\n        let nodoActual = this.primero\r\n        let contador = 0\r\n\r\n        while (nodoActual != null){\r\n            let dato = {id: contador, label: nodoActual.dato.toString(),}\r\n            arreglo[contador] = dato\r\n\r\n            if(nodoActual.dato == datoBuscar){\r\n                let dato = {id: contador, label: nodoActual.dato.toString(),  color: \"lime\"}\r\n                arreglo[contador] = dato\r\n            }\r\n\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            contador++\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n}\r\n\r\n\r\nexport default ColaPrioridad;","class Nodo {\r\n    constructor(valor) {\r\n        this.valor = valor;\r\n        this.derecha = null;\r\n        this.izquierda = null;\r\n        this.altura = 0;\r\n    }\r\n\r\n}\r\n\r\nclass ArbolAVL {\r\n    constructor() {\r\n        this.raiz = null;\r\n\r\n    }\r\n\r\n    MAX(valor1, valor2) {\r\n        if (valor1 > valor2) {\r\n            return valor1;\r\n        } else {\r\n            return valor2;\r\n        }\r\n    }\r\n\r\n    altura(nodo) {\r\n        if (nodo == null) {\r\n            return -1;\r\n        }\r\n        else {\r\n            return nodo.altura;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    agregar(valor) {\r\n        //inserta la raiz como un nodo temporan inicial\r\n        this.raiz = this._agregar(valor, this.raiz)\r\n\r\n    }\r\n\r\n    _agregar(valor, temporal) {\r\n        if (temporal == null) {\r\n            return new Nodo(valor);\r\n        }\r\n        else {\r\n            /*cuando el valor sea menor al valor del nodo temporal, recursivamente\r\n hasta que sea nulo se desplaza hacia la izquierda, en caso contrario,\r\n si es mayor, se desplaza hacia la derecha*/\r\n            if (valor < temporal.valor) {\r\n                temporal.izquierda = this._agregar(valor, temporal.izquierda);\r\n                if ((this.altura(temporal.derecha) - this.altura(temporal.izquierda)) == -2) {\r\n                    if (valor < temporal.izquierda.valor) {\r\n                        temporal = this.r_izquierda(temporal);\r\n                    } else {\r\n                        temporal = this.r_dobleizquierda(temporal);\r\n                    }\r\n                }\r\n            } else if (valor > temporal.valor) {\r\n                temporal.derecha = this._agregar(valor, temporal.derecha);\r\n                if ((this.altura(temporal.derecha) - this.altura(temporal.izquierda)) == 2) {\r\n                    if (valor > temporal.derecha.valor) {                        \r\n                        temporal = this.r_derecha(temporal);\r\n                    }else{\r\n                        temporal = this.r_doblederecha(temporal);\r\n\r\n                    }\r\n\r\n                }\r\n            }else{\r\n                //si el valor a agregar ya existe\r\n                temporal.valor = valor;\r\n            }\r\n        }\r\n//altura del nodo a insertar\r\n        let al_der = this.altura(temporal.derecha);\r\n        let al_izq = this.altura(temporal.izquierda);\r\n        temporal.altura = this.MAX(al_der,al_izq)+1\r\n        return temporal;\r\n \r\n    }\r\n\r\n\r\n    r_izquierda(nodo) {\r\n        let aux; \r\n        aux = nodo.izquierda;\r\n        nodo.izquierda = aux.derecha;\r\n        aux.derecha = nodo;\r\n        nodo.altura = this.MAX(this.altura(nodo.derecha), this.altura(nodo.izquierda)) +1;\r\n        aux.altura = this.MAX(this.altura(nodo.izquierda),nodo.altura) + 1;\r\n        return aux;\r\n\r\n    }\r\n\r\n\r\n    r_derecha(nodo) {\r\n        let aux;\r\n        aux = nodo.derecha;\r\n        nodo.derecha = aux.izquierda;\r\n        aux.izquierda = nodo;\r\n        nodo.altura = this.MAX(this.altura(nodo.derecha), this.altura(nodo.izquierda))+ 1;\r\n        aux.altura = this.MAX(this.altura(nodo.derecha), nodo.altura) + 1;\r\n        return aux;\r\n\r\n    }\r\n\r\n\r\n    r_dobleizquierda(nodo) {\r\n        nodo.izquierda =  this.r_derecha(nodo.izquierda);\r\n        return this.r_izquierda(nodo)\r\n\r\n    }\r\n\r\n\r\n    r_doblederecha(nodo) {\r\n        nodo.derecha = this.r_izquierda(nodo.derecha);\r\n        return this.r_derecha(nodo)\r\n    }\r\n    \r\n\r\n    cargar(arreglo) {\r\n        \r\n        arreglo.map(e => {\r\n            this.agregar(e)\r\n        })\r\n    }\r\n\r\n\r\n    eliminar(valor) {\r\n        this._eliminar(valor, this.raiz, null);\r\n        this.balancear(this.raiz)\r\n\r\n\r\n    }\r\n\r\n    _eliminar(valor, temporal, anterior) {\r\n        if (valor == temporal.valor) {\r\n            if ((temporal.derecha == null) && (temporal.izquierda == null)) {\r\n                if(anterior.derecha == temporal){\r\n                    anterior.derecha = null;\r\n                }else if(anterior.izquierda == temporal){\r\n                    anterior.izquierda = null;\r\n                }\r\n                \r\n\r\n            } else if (temporal.izquierda != null) {\r\n                this._encontrarReemplazo(temporal, temporal.izquierda, anterior);\r\n\r\n            } else if ((temporal.izquierda == null) && temporal.derecha != null) {\r\n                if (anterior.derecha = temporal) {\r\n                    anterior.derecha = temporal.derecha\r\n                    temporal = null;\r\n                } else if (anterior.izquierda = temporal) {\r\n                    anterior.izquierda = temporal.derecha;\r\n                    temporal = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(temporal != null){\r\n            if (temporal.izquierda != null) {\r\n                if (valor <= temporal.izquierda.valor) {\r\n                    this._eliminar(valor, temporal.izquierda, temporal)\r\n                }\r\n                if (temporal.derecha != null) {\r\n                    if (valor >= temporal.derecha.valor) {\r\n                        this._eliminar(valor, temporal.derecha, temporal)\r\n                    }\r\n                }\r\n            }\r\n        \r\n    }\r\n    }\r\n\r\n\r\n    _encontrarReemplazo(tempEliminar, temporal, anteriorValor) {\r\n\r\n        let aux = temporal;\r\n        let anteriorAux = null;\r\n        let encicla = false;\r\n\r\n        while (aux.derecha != null) {\r\n            encicla = true;\r\n            anteriorAux = aux;\r\n            aux = aux.derecha;\r\n        }\r\n        if (aux.izquierda != null) {\r\n            anteriorAux.derecha = aux.izquierda;\r\n        } else if (encicla == true) {\r\n            anteriorAux.derecha = null;\r\n        } else if (encicla == false) {\r\n            if (tempEliminar.izquierda == temporal) {\r\n                tempEliminar.izquierda = temporal.izquierda;\r\n            }\r\n        }\r\n\r\n        if (anteriorValor.derecha == tempEliminar) {\r\n            anteriorValor.derecha.valor = aux.valor;\r\n        } else if (anteriorValor.izquierda == tempEliminar) {\r\n            anteriorValor.izquierda.valor = aux.valor;\r\n        }\r\n        aux = null;\r\n    }\r\n\r\n\r\n    balancear() {\r\n        this.balancearAlturas(this.raiz)\r\n        this.raiz = this._balancear(this.raiz)\r\n\r\n    }\r\n\r\n    _balancear(temporal) {\r\n        if (temporal.izquierda == null) {\r\n            return temporal;\r\n        }else if(temporal.derecha == null){\r\n            return temporal;\r\n        }\r\n        else {\r\n\r\n            temporal.izquierda = this._balancear(temporal.izquierda);\r\n            if ((this.altura(temporal.izquierda) - this.altura(temporal.derecha)) == 2) {\r\n                if (temporal.izquierda.derecha == null) {\r\n                    temporal = this.r_izquierda(temporal);\r\n                } else {\r\n                    temporal = this.r_dobleizquierda(temporal);\r\n                }\r\n            }\r\n            temporal.derecha = this._balancear(temporal.derecha);\r\n            if ((this.altura(temporal.derecha) - this.altura(temporal.izquierda)) == 2) {\r\n                if (temporal.derecha.izquierda == null) {\r\n                    temporal = this.r_derecha(temporal);\r\n                } else {\r\n                    temporal = this.r_doblederecha(temporal);\r\n                }\r\n            }\r\n        }\r\n        /* */\r\n        let al_der = this.altura(temporal.derecha);\r\n        let al_izq = this.altura(temporal.izquierda);\r\n        temporal.altura = this.MAX(al_der, al_izq) + 1\r\n        return temporal;\r\n    }\r\n\r\n    balancearAlturas(temporal) {\r\n        if (temporal.izquierda != null) {\r\n            this.balancearAlturas(temporal.izquierda);\r\n        } else if (temporal.derecha != null) {\r\n            this.balancearAlturas(temporal.derecha);\r\n        }\r\n        temporal.altura = this.MAX(this.altura(temporal.derecha), this.altura(temporal.izquierda)) + 1\r\n\r\n    }\r\n\r\n\r\n    actualizar(valor, valorNuevo) {\r\n        this.eliminar(valor);\r\n        this.agregar(valorNuevo)\r\n    }\r\n\r\n    buscar(valor) {\r\n       let variable = this._buscar(valor,this.raiz);\r\n       console.log(\"-------\")\r\n       console.log(variable.valor)\r\n       console.log(\"-------\")\r\n\r\n    }\r\n\r\n    _buscar(valor, temporal){\r\n        if(temporal.valor < valor){\r\n            temporal = this._buscar(valor, temporal.izquierda)\r\n        }else if(temporal.valor > valor){\r\n            temporal = this.buscar(valor, temporal.derecha)\r\n        }else if(temporal.valor == valor){\r\n            return temporal;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    guardar(){\r\n        let vector = []\r\n        return this.preOrden(this.raiz, vector);\r\n    }\r\n\r\n    preOrden(nodo,vector){\r\n        if(nodo != null){\r\n        vector.push(nodo.valor)\r\n        this.preOrden(nodo.izquierda,vector)\r\n        this.preOrden(nodo.derecha,vector)\r\n        }\r\n        return vector\r\n    }\r\n\r\n    recorridoPre(nodo){\r\n        if(nodo != null){\r\n        console.log(nodo.valor)\r\n        this.recorridoPre(nodo.izquierda)\r\n        this.recorridoPre(nodo.derecha)\r\n        }\r\n    }\r\n\r\n    graficarNodos(nodo,vector,datoBuscar){\r\n\r\n        if(nodo.izquierda == null && nodo.derecha == null){\r\n            let dato\r\n            if(datoBuscar == nodo.valor){\r\n                dato = {id: nodo.valor, label: nodo.valor.toString(), color: \"lime\"}\r\n            }else{\r\n                dato = {id: nodo.valor, label: nodo.valor.toString(),}\r\n            }\r\n            \r\n            vector.push(dato)\r\n        }else{\r\n            let dato\r\n            if(datoBuscar == nodo.valor){\r\n                dato = {id: nodo.valor, label: nodo.valor.toString(), color: \"lime\"}\r\n            }else{\r\n                dato = {id: nodo.valor, label: nodo.valor.toString(),}\r\n            }\r\n            \r\n            vector.push(dato)\r\n        }\r\n        \r\n        if(nodo.izquierda != null){\r\n            this.graficarNodos(nodo.izquierda,vector,datoBuscar)\r\n        }\r\n\r\n        if (nodo.derecha != null){\r\n            this.graficarNodos(nodo.derecha,vector,datoBuscar)\r\n        }\r\n\r\n        return vector\r\n    }\r\n\r\n    obtenerNodos(datoBuscar){\r\n        let vector = []\r\n\r\n        return this.graficarNodos(this.raiz,vector,datoBuscar)\r\n    }\r\n\r\n    graficarApuntadores(nodo,vector){\r\n\r\n        if(nodo.izquierda != null){\r\n            this.graficarApuntadores(nodo.izquierda,vector)\r\n            let edge = {from:nodo.valor, to:nodo.izquierda.valor}\r\n            vector.push(edge)\r\n        }\r\n\r\n        if (nodo.derecha != null){\r\n            this.graficarApuntadores(nodo.derecha,vector)\r\n            let edge = {from:nodo.valor, to:nodo.derecha.valor}\r\n            vector.push(edge)\r\n        }\r\n\r\n        return vector\r\n    }\r\n\r\n    obtenerAputadores(){\r\n        let vector = []\r\n\r\n        return this.graficarApuntadores(this.raiz,vector)\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n}\r\nexport default ArbolAVL;\r\n\r\n\r\n","//Clase Nodo\r\nvar fs = require('fs')\r\nclass Nodo{\r\n    constructor(dato){  //Constructor\r\n        this.dato = dato\r\n        this.izquierda = null\r\n        this.derecha = null\r\n    }\r\n}\r\n//Clase Arbol Binario de Busqueda\r\nclass ABB{\r\n    //Constructor\r\n    constructor(){\r\n        this.raiz = null\r\n    }\r\n\r\n    //Metodo Insertar\r\n    insertar(dato){\r\n        this.raiz = this.add(dato, this.raiz)\r\n        console.log(\"Inserto un nodo\" )\r\n    }\r\n\r\n    //Sub Metodo Insertar\r\n    add(dato, nodo){\r\n        if(nodo == null){\r\n            return new Nodo(dato)\r\n        }else{\r\n            if(dato > nodo.dato){\r\n                nodo.derecha =  this.add(dato,nodo.derecha)\r\n            }else{\r\n                nodo.izquierda =  this.add(dato,nodo.izquierda)\r\n            }\r\n        }\r\n        return nodo\r\n    }\r\n\r\n    //Metodo Buscar\r\n    buscar(dato, nodo){\r\n        if(nodo!= null){\r\n            if(dato == nodo.dato){\r\n                console.log(nodo.dato + \" fue encontrado\")\r\n                return \r\n            }\r\n            this.buscar(dato, nodo.izquierda)\r\n            this.buscar(dato, nodo.derecha)\r\n        }\r\n    }\r\n\r\n    //SubMetodo Buscar\r\n    buscando(dato){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        if(dato == this.raiz.dato){\r\n            console.log(this.raiz.dato)\r\n            return\r\n        }\r\n        let nodo = this.raiz\r\n        this.buscar(dato, nodo)\r\n    }\r\n\r\n    //Metodo Imprimir\r\n    imprimir(nodo){\r\n        if(nodo != null){\r\n            console.log(nodo.dato)\r\n            this.imprimir(nodo.izquierda)\r\n            this.imprimir(nodo.derecha)\r\n        }\r\n    }\r\n\r\n    //Sub Metodo Imprimir\r\n    imprimiendo(){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        this.imprimir(this.raiz)\r\n    }\r\n\r\n    //Metodo Eliminar\r\n    eliminando(dato){\r\n        //Caso1: no existe arbol\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        //asignando valor inicial\r\n        let nodo = this.raiz\r\n        this.eliminar(dato, nodo)\r\n    }\r\n\r\n    //Sub Metodo Eliminar\r\n    eliminar(dato, nodo){\r\n        //Caso2: el dato a buscar se encuentra en la raiz\r\n        if(dato == this.raiz.dato){\r\n            if(nodo.izquierda != null){\r\n                let nodiz = nodo.izquierda\r\n                let maxiz= null\r\n                if(nodiz.derecha != null){\r\n                    maxiz = this.maxIzq(nodo.izquierda)\r\n                }else{\r\n                    maxiz = nodo.izquierda\r\n                    if(nodo.derecha != null){\r\n                        let enlace = nodo.derecha\r\n                        maxiz.derecha = enlace\r\n                        nodo.derecha = null\r\n                    }\r\n                    nodo.izquierda = null\r\n                    console.log(\"se elimino el nodo\")\r\n                    return\r\n                }\r\n                let nodmax = new nodo(maxiz)\r\n                let trasiz = null\r\n                let trasder = null\r\n                if(nodo.izquierda!=null){\r\n                    trasiz = nodo.izquierda\r\n                }\r\n                if(nodo.derecha != null){\r\n                    trasder = nodo.derecha\r\n                }\r\n                if(trasiz != null){\r\n                    nodmax.izquierda = trasiz\r\n                    nodo.izquierda = null\r\n                }\r\n                if(trasder != null){\r\n                    nodmax.derecha = trasder\r\n                    nodo.derecha = null\r\n                }\r\n                console.log(\"se elimino el nodo\")\r\n                return\r\n            }else if(nodo.izquierda == null && nodo.derecha != null){\r\n                let nodiz = nodo.derecha\r\n                let minder= null\r\n                if(nodiz.izquierda != null){\r\n                    minder = this.minDer(nodo.derecha) // minder con valor de dato\r\n                }else{\r\n                    minder = nodo.derecha // miner con valor de nodo\r\n                    if(nodo.izquierda != null){\r\n                        let enlace = nodo.izquierda\r\n                        minder.izquierda = enlace\r\n                        nodo.izquierda = null\r\n                    }\r\n                    this.raiz = nodo.derecha\r\n                    nodo.derecha = null\r\n                    console.log(\"se elimino el nodo\")\r\n                    return\r\n                }\r\n                let nodmin = new nodo(minder)\r\n                let trasiz = null\r\n                let trasder = null\r\n                if(nodo.izquierda!=null){\r\n                    trasiz = nodo.izquierda\r\n                }\r\n                if(nodo.derecha != null){\r\n                    trasder = nodo.derecha\r\n                }\r\n                if(trasiz != null){\r\n                    nodmin.izquierda = trasiz\r\n                    nodo.izquierda = null\r\n                }\r\n                if(trasder != null){\r\n                    nodmin.derecha = trasder\r\n                    nodo.derecha = null\r\n                }\r\n                this.raiz = nodmin\r\n                console.log(\"se elimino el nodo\")\r\n                return\r\n            }else{\r\n                this.raiz = null\r\n                return\r\n            }\r\n        }\r\n        //Demas Casos: eliminacion dentro del arbol\r\n        if(nodo.izquierda!= null){\r\n            //Dato encontrado a la izquierda\r\n            if(dato == nodo.izquierda.dato){\r\n                let tmp = nodo.izquierda\r\n                //Caso3: Eliminacion de hijo a la izquierda\r\n                if(tmp.izquierda == null && tmp.derecha == null){\r\n                    nodo.izquierda = null\r\n                    console.log(\"nodo hoja fue eliminado con exito\")\r\n                    return\r\n                }else{ // Caso 4: Eliminacion de no hijo a la izquierda\r\n                    if(tmp.izquierda != null){ // Reestructuracion de arbol y eliminacion de nodo\r\n                        let nodiz = tmp.izquierda\r\n                        let maxiz= null\r\n                        if(nodiz.derecha != null){\r\n                            maxiz = this.maxIzq(tmp.izquierda) // maxiz con valor de dato \r\n                        }else{\r\n                            maxiz = tmp.izquierda // maxiz con valor de nodo\r\n                            if(tmp.derecha != null){\r\n                                let enlace = tmp.derecha\r\n                                maxiz.derecha = enlace\r\n                                tmp.derecha = null\r\n                            }\r\n                            tmp.izquierda = null\r\n                            nodo.izquierda = maxiz\r\n                            console.log(\"se elimino el nodo\")\r\n                            return\r\n                        }\r\n                        let nodmax = new nodo(maxiz)\r\n                        let trasiz = null\r\n                        let trasder = null\r\n                        if(tmp.izquierda!=null){\r\n                            trasiz = tmp.izquierda\r\n                        }\r\n                        if(tmp.derecha != null){\r\n                            trasder = tmp.derecha\r\n                        }\r\n                        if(trasiz != null){\r\n                            nodmax.izquierda = trasiz\r\n                            tmp.izquierda = null\r\n                        }\r\n                        if(trasder != null){\r\n                            nodmax.derecha = trasder\r\n                            tmp.derecha = null\r\n                        }\r\n                        nodo.izquierda = nodmax\r\n                        console.log(\"se elimino el nodo\")\r\n                        return\r\n                    }else if(tmp.izquierda == null && tmp.derecha != null){ // Reestructuracion de arbol y eliminacion de nodo\r\n                        let nodiz = tmp.derecha\r\n                        let minder= null\r\n                        if(nodiz.izquierda != null){\r\n                            minder = this.minDer(tmp.derecha) // minder con valor de dato \r\n                        }else{\r\n                            minder = tmp.derecha // minder con valor de nodo\r\n                            if(tmp.izquierda != null){\r\n                                let enlace = tmp.izquierda\r\n                                minder.izquierda = enlace\r\n                                tmp.izquierda = null\r\n                            }\r\n                            nodo.derecha = minder\r\n                            tmp.derecha = null\r\n                            console.log(\"se elimino el nodo\")\r\n                            return\r\n                        }\r\n                        let nodmin = new nodo(minder)\r\n                        let trasiz = null\r\n                        let trasder = null\r\n                        if(tmp.izquierda!=null){\r\n                            trasiz = tmp.izquierda\r\n                        }\r\n                        if(tmp.derecha != null){\r\n                            trasder = tmp.derecha\r\n                        }\r\n                        if(trasiz != null){\r\n                            nodmin.izquierda = trasiz\r\n                            tmp.izquierda = null\r\n                        }\r\n                        if(trasder != null){\r\n                            nodmin.derecha = trasder\r\n                            tmp.derecha = null\r\n                        }\r\n                        nodo.derecha = nodmin\r\n                        console.log(\"se elimino el nodo\")\r\n                        return\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(nodo.derecha != null){\r\n // Caso 5: Eliminacion de hijo a la derecha\r\n            if(dato == nodo.derecha.dato){\r\n                let tmp = nodo.derecha\r\n                if(tmp.izquierda == null && tmp.derecha == null){\r\n                    nodo.derecha = null\r\n                    console.log(\"nodo hoja fue eliminado con exito\")\r\n                    return\r\n                }else{ // Caso 6: Eliminacion de no hijo a la derecha\r\n                    if(tmp.derecha != null){ // Reestructuracion de arbol y eliminacion de nodo\r\n                        let nodiz = tmp.derecha\r\n                        let minder= null\r\n                        if(nodiz.izquierda != null){\r\n                            minder = this.minDer(tmp.derecha) // minder con valor de dato \r\n                        }else{\r\n                            minder = tmp.derecha // minder con valor de nodo\r\n                            if(tmp.izquierda != null){\r\n                                let enlace = tmp.izquierda\r\n                                minder.izquierda = enlace\r\n                                tmp.izquierda = null\r\n                            }\r\n                            nodo.derecha = minder\r\n                            tmp.derecha = null\r\n                            console.log(\"se elimino el nodo\")\r\n                            return\r\n                        }\r\n                        let nodmin = new nodo(minder)\r\n                        let trasiz = null\r\n                        let trasder = null\r\n                        if(tmp.izquierda!=null){\r\n                            trasiz = tmp.izquierda\r\n                        }\r\n                        if(tmp.derecha != null){\r\n                            trasder = tmp.derecha\r\n                        }\r\n                        if(trasiz != null){\r\n                            nodmin.izquierda = trasiz\r\n                            tmp.izquierda = null\r\n                        }\r\n                        if(trasder != null){\r\n                            nodmin.derecha = trasder\r\n                            tmp.derecha = null\r\n                        }\r\n                        nodo.derecha = nodmin\r\n                    }else if(tmp.derecha == null && tmp.izquierda != null){ // Reestructuracion de arbol y eliminacion de nodo\r\n                        let nodiz = tmp.izquierda\r\n                        let maxiz= null\r\n                        if(nodiz.derecha != null){\r\n                            maxiz = this.maxIzq(tmp.izquierda) // maxiz con valor de dato \r\n                        }else{\r\n                            maxiz = tmp.izquierda // maxiz con valor de nodo\r\n                            if(tmp.derecha != null){\r\n                                let enlace = tmp.derecha\r\n                                maxiz.derecha = enlace\r\n                                tmp.derecha = null\r\n                            }\r\n                            tmp.izquierda = null\r\n                            nodo.izquierda = maxiz\r\n                            console.log(\"se elimino el nodo\")\r\n                            return\r\n                        }\r\n                        let nodmax = new nodo(maxiz)\r\n                        let trasiz = null\r\n                        let trasder = null\r\n                        if(tmp.izquierda!=null){\r\n                            trasiz = tmp.izquierda\r\n                        }\r\n                        if(tmp.derecha != null){\r\n                            trasder = tmp.derecha\r\n                        }\r\n                        if(trasiz != null){\r\n                            nodmax.izquierda = trasiz\r\n                            tmp.izquierda = null\r\n                        }\r\n                        if(trasder != null){\r\n                            nodmax.derecha = trasder\r\n                            tmp.derecha = null\r\n                        }\r\n                        nodo.izquierda = nodmax\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(nodo.izquierda !=null){\r\n            this.eliminar(dato, nodo.izquierda)\r\n        }\r\n       if(nodo.derecha != null){\r\n            this.eliminar(dato, nodo.derecha)\r\n       }\r\n    }\r\n\r\n    //Metodo de obtencion para maximo valor a la Izquierda\r\n    maxIzq(nodo){\r\n        if (nodo.derecha != null){\r\n            let tmp = nodo.derecha\r\n            if(tmp.derecha !=null){\r\n                this.maxIzq(tmp)\r\n            }else{\r\n                var mandardato = tmp.dato\r\n                if(tmp.izquierda != null){\r\n                    nodo.derecha = tmp.izquierda\r\n                    tmp.izquierda = null\r\n                }else{\r\n                    nodo.derecha = null\r\n                }\r\n                return mandardato\r\n            }\r\n        }\r\n    }\r\n\r\n    //Metodo de obtencion para minimo valor a la Derecha\r\n    minDer(nodo){\r\n        if (nodo.izquierda != null){\r\n            let tmp = nodo.izquierda\r\n            if(tmp.izquierda !=null){\r\n                this.minDer(tmp)\r\n            }else{\r\n                var mandardato = tmp.dato\r\n                if(tmp.derecha != null){\r\n                    nodo.izquierda = tmp.derecha\r\n                    tmp.derecha = null\r\n                }else{\r\n                    nodo.izquierda = null\r\n                }\r\n                return mandardato\r\n            }\r\n        }\r\n    }\r\n\r\n    //Metodo Actualizar\r\n    actualizar(datoborr, datoin){\r\n        if(this.raiz==null){\r\n            console.log(\"no existe ningun arbol\")\r\n        }\r\n        this.eliminando(datoborr)\r\n        this.insertar(datoin)\r\n        console.log(\"Actualizado\")\r\n    }\r\n    //Metodo Cargar\r\n    cargar(arreglo) {\r\n        arreglo.map(e => {\r\n            this.insertar(e)\r\n        })\r\n    }\r\n    \r\n\r\n    //Metodo Guardar\r\n    guardar(){\r\n        let vector = []\r\n        return this.preOrden(this.raiz, vector);\r\n    }\r\n\r\n    preOrden(nodo,vector){\r\n        if(nodo != null){\r\n        vector.push(nodo.dato)\r\n        this.preOrden(nodo.izquierda,vector)\r\n        this.preOrden(nodo.derecha,vector)\r\n        }\r\n        return vector\r\n    }\r\n\r\n    \r\n    graficarNodos(nodo,vector,datoBuscar){\r\n\r\n        if(nodo.izquierda == null && nodo.derecha == null){\r\n            let dato\r\n            if(datoBuscar == nodo.dato){\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(), color: \"lime\"}\r\n            }else{\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(),}\r\n            }\r\n            \r\n            vector.push(dato)\r\n        }else{\r\n            let dato\r\n            if(datoBuscar == nodo.dato){\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(), color: \"lime\"}\r\n            }else{\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(),}\r\n            }\r\n            \r\n            vector.push(dato)\r\n        }\r\n        \r\n        if(nodo.izquierda != null){\r\n            this.graficarNodos(nodo.izquierda,vector,datoBuscar)\r\n        }\r\n\r\n        if (nodo.derecha != null){\r\n            this.graficarNodos(nodo.derecha,vector,datoBuscar)\r\n        }\r\n\r\n        return vector\r\n    }\r\n\r\n    obtenerNodos(datoBuscar){\r\n        let vector = []\r\n\r\n        return this.graficarNodos(this.raiz,vector,datoBuscar)\r\n    }\r\n\r\n    graficarApuntadores(nodo,vector){\r\n\r\n        if(nodo.izquierda != null){\r\n            this.graficarApuntadores(nodo.izquierda,vector)\r\n            let edge = {from:nodo.dato, to:nodo.izquierda.dato}\r\n            vector.push(edge)\r\n        }\r\n\r\n        if (nodo.derecha != null){\r\n            this.graficarApuntadores(nodo.derecha,vector)\r\n            let edge = {from:nodo.dato, to:nodo.derecha.dato}\r\n            vector.push(edge)\r\n        }\r\n\r\n        return vector\r\n    }\r\n\r\n    obtenerAputadores(){\r\n        let vector = []\r\n\r\n        return this.graficarApuntadores(this.raiz,vector)\r\n    }\r\n\r\n    graficar(nodo){\r\n        let etiqueta = \"\"\r\n\r\n        if(nodo.izquierda == null && nodo.derecha == null){\r\n            etiqueta = \"nodo\" + nodo.dato.toString() +\" [ shape=circle, label=\\\"{\" + nodo.dato.toString() +\"}\\\"];\\n\"\r\n        }else{\r\n            etiqueta = \"nodo\" + nodo.dato.toString() +\" [ shape=circle, label=\\\"{\" + nodo.dato.toString() +\"}\\\"];\\n\"\r\n        }\r\n\r\n        if(nodo.izquierda != null){\r\n            etiqueta = etiqueta + this.graficar(nodo.izquierda) + \"nodo\" + nodo.dato.toString() + \" -> nodo\" + nodo.izquierda.dato.toString() + \"\\n\"\r\n        }\r\n        if(nodo.derecha != null){\r\n            etiqueta = etiqueta + this.graficar(nodo.derecha) + \"nodo\" + nodo.dato.toString() + \" -> nodo\" + nodo.derecha.dato.toString() + \"\\n\"\r\n        }\r\n\r\n        return etiqueta\r\n\r\n    }\r\n\r\n    graficarArbol(){\r\n\r\n        let dot = \"digraph{ size=\\\"6,6\\\"; \tnode [color=lightblue2, style=filled];\" + this.graficar(this.raiz) +\"}\"\r\n\r\n        return dot\r\n\r\n    }\r\n}\r\n\r\nexport default ABB;\r\n\r\n","//Libreria para encriptado\r\nconst { sha256 } = require(\"js-sha256\")\r\n\r\n//Clase Nodo para lista temporal de carga de datos\r\nclass NodoListaTemporal{\r\n    //Constructor\r\n    constructor(datTemporal){\r\n        this.datTemporal = datTemporal\r\n        this.siguiente = null\r\n        this.anterior = null\r\n    }\r\n}\r\n\r\nvar contadorglobal = 0\r\nvar salida = \"\"\r\n\r\n//Clase Lista temporal para carga de datos\r\nclass ListaTemporal{\r\n    //Constructor\r\n    constructor(){\r\n        this.cabeza = null\r\n        this.cola = null\r\n        this.size = 0\r\n    }\r\n\r\n    //Metodo Insertar en lista temporal\r\n    insertLista(dato){\r\n        let nodo = new NodoListaTemporal(dato);\r\n        //Insercion de primer nodo\r\n        if(this.cabeza == null){\r\n            this.cabeza = nodo;\r\n            this.cola = nodo;\r\n            this.size++;\r\n        }else if(this.cabeza != null){ // Insercion de nodo No Cabeza\r\n            let aux = this.cabeza;\r\n            while(aux != this.cola){\r\n                aux = aux.siguiente;\r\n            }\r\n            aux.siguiente = nodo;\r\n            nodo.anterior = aux\r\n            this.cola = nodo;\r\n            this.size++;\r\n        }\r\n    }\r\n\r\n    //Metodo Eliminar par alista temporal\r\n    eliminarLista(dato){\r\n        let nodo = this.cabeza\r\n        if(this.cabeza.datTemporal == dato && this.cabeza == this.cola){\r\n            //Dato unico eliminado\r\n            this.cabeza = null\r\n            this.cola = null\r\n            this.size = 0\r\n            return\r\n        }\r\n        while(nodo.datTemporal != dato && nodo != this.cola){\r\n            nodo = nodo.siguiente\r\n        }\r\n        if(nodo.datTemporal== dato && nodo.anterior == null && nodo.siguiente != null){\r\n            //Dato Eliminado en el al inicio\r\n            let tmp = nodo.siguiente\r\n            this.cabeza = tmp\r\n            tmp.anterior = null\r\n            nodo.siguiente = null\r\n            this.size--\r\n            return\r\n        }else if(nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null){\r\n            //Dato Eliminado en el centro\r\n            let tmp = nodo.siguiente\r\n            tmp.anterior = nodo.anterior\r\n            nodo.anterior.siguiente = tmp\r\n            nodo.siguiente = null\r\n            nodo.anterior = null\r\n            this.size--\r\n            return\r\n        }else if(nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null){\r\n            //Dato eliminado al final de la lista\r\n            let tmp = nodo.anterior\r\n            this.cola = tmp\r\n            tmp.siguiente = null\r\n            nodo.anterior = null\r\n            this.size--\r\n            return\r\n        }\r\n        if(nodo == null){\r\n            //Dato no encontrado\r\n            console.log(\"No se encontro el dato a eliminar\")\r\n            return\r\n        }\r\n    }\r\n}\r\n\r\n//arreglo para reestructuracion de datos\r\nvar recarga = []\r\n\r\n//Clase Nodo para arbol merkle\r\nclass Nodo{\r\n    //Constructor\r\n    constructor(dato, izquierda, derecha, nodohijo){\r\n        this.dato = dato\r\n        this.hash = null\r\n        this.id = 0\r\n        this.nodohijo = nodohijo\r\n        this.izquierda = izquierda\r\n        this.derecha = derecha\r\n    }\r\n}\r\n\r\n//Clase Arbol Merkle\r\nclass MerkleTree{\r\n    //Constructor\r\n    constructor(){\r\n        this.raiz = null\r\n    }\r\n\r\n    //Metodo Insertar en arbol Merkle\r\n    insertar(dato){\r\n        let nodo = new Nodo(dato, null, null, true)\r\n        //Insercion de primer nodo\r\n        if(this.raiz == null){\r\n            let listatmp = new ListaTemporal()\r\n            listatmp.insertLista(nodo)\r\n            listatmp.insertLista(new Nodo(-1, null, null, true))\r\n            this.construirArbol(listatmp)           \r\n        }else{  //Insercion de Nodo no primero\r\n            let listatmp = this.ObtenerLista()\r\n            listatmp.insertLista(nodo)\r\n            this.construirArbol(listatmp)\r\n        }\r\n        //Hasheo de datos en sha256\r\n        this.hashing()\r\n        contadorglobal = 0\r\n    }\r\n\r\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\r\n    ObtenerLista(){\r\n        let listatmp = new ListaTemporal()\r\n        this.obtenerlista(listatmp, this.raiz.izquierda)\r\n        this.obtenerlista(listatmp, this.raiz.derecha)\r\n        return listatmp\r\n    }\r\n\r\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\r\n    obtenerlista(lista, nodo){\r\n        if(nodo != null){\r\n            this.obtenerlista(lista, nodo.izquierda)\r\n            if(nodo != null && nodo.dato != -1 && nodo.nodohijo == true){\r\n                lista.insertLista(nodo)\r\n            }\r\n            this.obtenerlista(lista, nodo.derecha)\r\n        }\r\n    }\r\n\r\n    //Metodo para armado base de arbol\r\n    construirArbol(lista){\r\n        let tamanio = new Float64Array(lista.size)\r\n        let cant = 1\r\n        let operacion = tamanio.length/2\r\n        //Calculo de nodos actuales\r\n        while (operacion > 1){\r\n            cant++\r\n            operacion = operacion/2\r\n        }\r\n        let vectorTotal = new Float64Array(cant)\r\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\r\n        //Complemetacion de nodos hijo para arbol merkle final\r\n        while(lista.size < Math.floor(totalnodos)){\r\n            lista.insertLista(new Nodo(-1,null,null,true))\r\n        }\r\n        //Insercion de datos en arbol\r\n        while(lista.size>1){\r\n            let primero = lista.cabeza\r\n            let segundo = primero.siguiente\r\n            lista.eliminarLista(primero.datTemporal)\r\n            lista.eliminarLista(segundo.datTemporal)\r\n            let nodo1 = primero.datTemporal\r\n            nodo1.id = contadorglobal + 1\r\n            let nodo2 = segundo.datTemporal\r\n            nodo2.id = contadorglobal + 2 \r\n            let suma = nodo1.dato + nodo2.dato\r\n            let nuevo = new Nodo(suma, nodo1, nodo2,false)\r\n            nuevo.id = contadorglobal\r\n            lista.insertLista(nuevo)\r\n            contadorglobal = contadorglobal + 3\r\n        }\r\n        //Asignacion de raiz\r\n        this.raiz = lista.cabeza.datTemporal\r\n    }\r\n\r\n    //Metodo Asignacion de Hash\r\n    hashing(){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        this.subHashing(this.raiz)\r\n    }\r\n\r\n    //SubMetodo Asignacion de Hash\r\n    subHashing(nodo){\r\n        if(nodo != null){\r\n            let hasheo = sha256.create()\r\n            hasheo.update(String(nodo.dato))\r\n            hasheo.hex()\r\n            nodo.hash = hasheo\r\n            this.subHashing(nodo.izquierda)\r\n            this.subHashing(nodo.derecha)\r\n        }\r\n    }\r\n\r\n    //Metodo Imprimir\r\n    imprimiendo(){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        this.imprimir(this.raiz)\r\n    }\r\n\r\n    //SubMetodo Imprimir\r\n    imprimir(nodo){\r\n        if(nodo != null){\r\n            console.log(nodo.dato + \" Es el dato\")\r\n            console.log(nodo.hash + \" Es el Hash\")\r\n            this.imprimir(nodo.izquierda)\r\n            this.imprimir(nodo.derecha)\r\n        }\r\n    }\r\n\r\n    //Metodo Buscar\r\n    buscando(dato){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        let hasheo = sha256.create()\r\n        hasheo.update(String(dato))\r\n        hasheo.hex()\r\n        let nodo = this.raiz\r\n        this.buscar(hasheo, nodo)\r\n    }\r\n\r\n    //SubMetodo Buscar\r\n    buscar(hasheo, nodo){\r\n        if(nodo!= null){\r\n            let noha = nodo.hash.hex()\r\n            let has = hasheo.hex()\r\n            if(has == noha && nodo.nodohijo == true){\r\n                console.log(nodo.hash + \" fue encontrado para \"+nodo.dato)\r\n                return\r\n            }\r\n            this.buscar(hasheo, nodo.izquierda)\r\n            this.buscar(hasheo, nodo.derecha)\r\n        }\r\n    }\r\n\r\n    //Metodo Eliminar\r\n    Eliminar(dato){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        let hasheo = sha256.create()\r\n        hasheo.update(String(dato))\r\n        hasheo.hex()\r\n        let nodo = this.raiz\r\n        this.eliminando(hasheo, nodo)\r\n    }\r\n\r\n    //SubMetodo Eliminar\r\n    eliminando(hasheo, nodo){\r\n        if(nodo!= null){\r\n            let noha = nodo.hash.hex()\r\n            let has = hasheo.hex()\r\n            if(has == noha && nodo.nodohijo == true){\r\n                nodo.nodohijo = false\r\n                this.cargaArbolLista()\r\n                this.raiz = null\r\n                for(let i = 0;i<recarga.length;i++){\r\n                    this.insertar(recarga[i])\r\n                }\r\n                recarga = []\r\n                this.hashing()\r\n                console.log(\"Dato Eliminado\")\r\n                return\r\n            }\r\n            this.eliminando(hasheo, nodo.izquierda)\r\n            this.eliminando(hasheo, nodo.derecha)\r\n        }\r\n    }\r\n    \r\n    //Metodo cargarlista para reestructuracion del arbol\r\n    cargaArbolLista(){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        let nodo = this.raiz\r\n        this.cargandoArbolLista(nodo)\r\n    }\r\n\r\n    //SubMetodo Cargando lista para reestructuracion del arbol\r\n    cargandoArbolLista(nodo){\r\n        if(nodo!= null){\r\n            if(nodo.nodohijo == true && nodo.dato != -1){\r\n                recarga.push(nodo.dato)\r\n            }\r\n            this.cargandoArbolLista(nodo.izquierda)\r\n            this.cargandoArbolLista(nodo.derecha)\r\n        }\r\n    }\r\n\r\n    //Metodo Modificar\r\n    modificar(datoelim, nuevodato){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        let hasheo = sha256.create()\r\n        hasheo.update(String(datoelim))\r\n        hasheo.hex()\r\n        let nodo = this.raiz\r\n        this.modificando(hasheo, nuevodato, nodo)\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n    //SubMetodo modificar\r\n    modificando(hasheo, nuevodato, nodo){\r\n        if(nodo!= null){\r\n            let noha = nodo.hash.hex()\r\n            let has1 = hasheo.hex()\r\n            if(has1 == noha && nodo.nodohijo == true){\r\n                nodo.dato = nuevodato\r\n                this.cargaArbolLista()\r\n                this.raiz = null\r\n                for(let i = 0;i<recarga.length;i++){\r\n                    this.insertar(recarga[i])\r\n                }\r\n                recarga = []\r\n                this.hashing()\r\n                console.log(\"Dato Modificado\")\r\n                return\r\n            }\r\n            this.modificando(hasheo, nuevodato, nodo.izquierda)\r\n            this.modificando(hasheo, nuevodato, nodo.derecha)\r\n        }\r\n    }\r\n\r\n    //Metodo Cargar\r\n    cargar(arreglo) {\r\n        arreglo.map(elemento => {\r\n            this.insertar(elemento);\r\n        })\r\n    }\r\n\r\n    //Metodo Guardar\r\n    guardando(){\r\n        if(this.raiz==null){\r\n            console.log(\"no existe arbol\")\r\n            return\r\n        }\r\n        let nodo = this.raiz;\r\n        this.guardar(nodo)\r\n    }\r\n\r\n    //Metodo Guardar\r\n    guardar(){\r\n        let vector = []\r\n        return this.preOrden(this.raiz, vector);\r\n    }\r\n\r\n    preOrden(nodo,vector){\r\n        if(nodo != null){\r\n        vector.push(nodo.dato)\r\n        this.preOrden(nodo.izquierda,vector)\r\n        this.preOrden(nodo.derecha,vector)\r\n        }\r\n        return vector\r\n    }\r\n\r\n    graficarNodos(nodo,vector,datoBuscar){\r\n\r\n        if(nodo.izquierda == null && nodo.derecha == null){\r\n            let dato\r\n            if(datoBuscar == nodo.dato){\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(), color: \"lime\"}\r\n            }else{\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(),}\r\n            }\r\n            \r\n            vector.push(dato)\r\n        }else{\r\n            let dato\r\n            if(datoBuscar == nodo.dato){\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(), color: \"lime\"}\r\n            }else{\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(),}\r\n            }\r\n            \r\n            vector.push(dato)\r\n        }\r\n        \r\n        if(nodo.izquierda != null){\r\n            this.graficarNodos(nodo.izquierda,vector,datoBuscar)\r\n        }\r\n\r\n        if (nodo.derecha != null){\r\n            this.graficarNodos(nodo.derecha,vector,datoBuscar)\r\n        }\r\n\r\n        return vector\r\n    }\r\n\r\n    obtenerNodos(datoBuscar){\r\n        let vector = []\r\n\r\n        return this.graficarNodos(this.raiz,vector,datoBuscar)\r\n    }\r\n\r\n    graficarApuntadores(nodo,vector){\r\n\r\n        if(nodo.izquierda != null){\r\n            this.graficarApuntadores(nodo.izquierda,vector)\r\n            let edge = {from:nodo.dato, to:nodo.izquierda.dato}\r\n            vector.push(edge)\r\n        }\r\n\r\n        if (nodo.derecha != null){\r\n            this.graficarApuntadores(nodo.derecha,vector)\r\n            let edge = {from:nodo.dato, to:nodo.derecha.dato}\r\n            vector.push(edge)\r\n        }\r\n\r\n        return vector\r\n    }\r\n\r\n    obtenerAputadores(){\r\n        let vector = []\r\n\r\n        return this.graficarApuntadores(this.raiz,vector)\r\n    }\r\n\r\n    //Metodo Graficar\r\n    graficar(valorBuscar){\r\n        \r\n        salida = \"\"\r\n        if(this.raiz == null){\r\n            console.log(\"No hay nada aun\")\r\n            return\r\n        }\r\n        let nodo = this.raiz\r\n        let contador = 0\r\n        salida+= \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\r\n        this.graficando(nodo,valorBuscar)\r\n        salida+= \"}\"\r\n        console.log(salida)\r\n        contador = 0\r\n\r\n        return salida\r\n    }\r\n\r\n    //SubMetodo Buscar\r\n    graficando(nodo,valorBuscar){\r\n        if(nodo!= null){\r\n            if(valorBuscar == nodo.dato){\r\n                salida += \"node\"+nodo.id+\" [color=\\\"green\\\" label = \\\" iz| \"+nodo.dato+\"|\"+nodo.hash.hex()+\" |de \\\"]; \\n\"\r\n            }else{\r\n                salida += \"node\"+nodo.id+\" [label = \\\" iz| \"+nodo.dato+\"|\"+nodo.hash.hex()+\" |de \\\"]; \\n\"\r\n            }\r\n            if(nodo.derecha != null){\r\n                salida += \"node\"+nodo.id + \" -> node\" +nodo.derecha.id + \"\\n\"\r\n            }\r\n            if(nodo.izquierda != null){\r\n                salida+= \"node\"+nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\r\n            }\r\n            if(nodo.izquierda!=null){\r\n                this.graficando(nodo.izquierda,valorBuscar)\r\n            }\r\n            if(nodo.derecha != null){\r\n                this.graficando(nodo.derecha,valorBuscar)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default MerkleTree;","var fs = require('fs')\r\nclass Nodo{\r\n    constructor(valor){        \r\n        this.valor = valor;\r\n        this.siguiente = null;\r\n        this.id = null;\r\n    }\r\n}\r\n\r\nclass Pila{\r\n    constructor(){\r\n        this.cabeza = null;  \r\n        this.contador = 0;   \r\n        this.contadorPilas = 0;    \r\n    }\r\n    agregar(elemento){\r\n        this.contador ++;\r\n        let nodonuevo = new Nodo(elemento);\r\n        nodonuevo.id = this.contador;\r\n        if (this.cabeza == null){\r\n            this.cabeza = nodonuevo;\r\n            \r\n\r\n        }else{\r\n            nodonuevo.siguiente = this.cabeza;\r\n            this.cabeza = nodonuevo\r\n        }\r\n\r\n    }\r\n\r\n\r\n    eliminar(){\r\n        let inicio = this.cabeza;\r\n        this.cabeza = this.cabeza.siguiente\r\n        return inicio;\r\n    }\r\n\r\n    actualizar(valoranterior, valor){\r\n        let temporal = this.cabeza;\r\n        if (this.cabeza == null){\r\n            console.log(\"No hay nada en la lista\")\r\n            \r\n        }else{\r\n            while(temporal != null){\r\n                if (temporal.valor == valoranterior){\r\n                    temporal.valor = valor;\r\n                }\r\n                temporal = temporal.siguiente;                \r\n\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    buscar(valor){\r\n        let temporal = this.cabeza;\r\n        if (this.cabeza == null){\r\n            console.log(\"No hay nada en la lista\")\r\n            \r\n        }else{\r\n            while(temporal != null){\r\n                if (temporal.valor == valor){\r\n                    return temporal;\r\n                }\r\n                temporal = temporal.siguiente;                \r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    cargar(arreglo) {\r\n        \r\n        arreglo.map(e => {\r\n            this.agregar(e)\r\n        })\r\n    }\r\n\r\n    guardar(){\r\n        let archivojs=[];\r\n        let temporal = this.cabeza;\r\n        while (temporal != null){\r\n            archivojs[temporal.id] = temporal.valor;\r\n            temporal = temporal.siguiente;\r\n            \r\n        }\r\n       return archivojs\r\n    }\t\r\n\r\n    Recorrido(datoBuscar){\r\n        let arreglo = []\r\n        let temporal = this.cabeza;\r\n        let contador = 0\r\n        if (this.cabeza == null){\r\n            console.log(\"No hay nada en la lista\")\r\n            \r\n        }else{\r\n            while(temporal != null){\r\n                let dato = {id: contador, label: temporal.valor.toString(),}\r\n                arreglo[contador] = dato\r\n\r\n                if (temporal.valor == datoBuscar){\r\n                    let dato = {id: contador, label: temporal.valor.toString(),  color: \"lime\"}\r\n                    arreglo[contador] = dato\r\n                }\r\n                temporal = temporal.siguiente;   \r\n                contador++              \r\n\r\n            }\r\n        }\r\n        return arreglo\r\n    }\r\n\r\n    \r\n   \t\r\n }\r\n\r\n export default Pila;","//Insertcion no ordenada\r\n//Busqueda unica\r\n//Eliminacion unica\r\nvar fs = require('fs')\r\nclass Nodo{ //Clase Nodo\r\n    \r\n    //Constructor\r\n    constructor(dato){\r\n        this.siguiente = null;\r\n        this.anterior = null;\r\n        this.dato = dato;\r\n    }\r\n}\r\n\r\nclass ListaCD{  //Clase Lista Circular doble\r\n\r\n    //Constructor\r\n    constructor(){\r\n        this.cabeza = null;\r\n        this.cola = null;\r\n        this.size = 0;\r\n    }\r\n\r\n    //Metodo opcion de insertados\r\n    agregar(dato, opcion){       \r\n        switch (opcion) {\r\n            case \"Inicio\":\r\n                this.insertarInicio(dato)\r\n                break;\r\n            case \"Ordenado\":\r\n                this.agregarOrdenado(dato)\r\n                break;\r\n            case \"Final\":\r\n                this.insertFinal(dato)\r\n                break;     \r\n        }\r\n    }\r\n\r\n    //Metodo Insertar al Inicio\r\n    insertarInicio(dato){\r\n        let nodo = new Nodo(dato);\r\n        //Insertcion de primer nodo \r\n        if(this.cabeza == null){\r\n            this.cabeza = nodo;\r\n            this.cola = nodo;\r\n            this.size++;\r\n            return\r\n        }else if(this.cabeza != null && this.cola != null){\r\n            //Insercion de Nodos no primeros\r\n            this.cabeza.anterior = nodo;\r\n            nodo.siguiente = this.cabeza;\r\n            nodo.anterior = this.cola;\r\n            this.cola.siguiente = nodo\r\n            this.cabeza = nodo;\r\n            this.size++;\r\n            return\r\n        }\r\n    }\r\n\r\n    //Metodo Insertar\r\n    agregarOrdenado(dato){\r\n        let nodo = new Nodo(dato)\r\n        let aux = this.cabeza\r\n        if(this.cabeza == null){\r\n            this.cabeza = nodo;\r\n            this.cola = nodo;\r\n            this.size++;\r\n            return\r\n        }\r\n        if(dato < this.cabeza.dato){\r\n            //Insercion de Nodos no primeros\r\n            this.cabeza.anterior = nodo;\r\n            nodo.siguiente = this.cabeza;\r\n            nodo.anterior = this.cola;\r\n            this.cola.siguiente = nodo\r\n            this.cabeza = nodo;\r\n            this.size++;\r\n            return\r\n        }else if(dato >= this.cabeza.dato && dato <= this.cola.dato){\r\n            while(aux != this.cola){\r\n                if(dato >= aux.dato && dato <= aux.siguiente.dato){\r\n                    let tmp = aux.siguiente\r\n                    tmp.anterior = nodo\r\n                    aux.siguiente = nodo\r\n                    nodo.siguiente = tmp\r\n                    nodo.anterior = aux\r\n                    this.size++;\r\n                    return\r\n                }\r\n                aux = aux.siguiente\r\n            }\r\n        }else if(dato > this.cola.dato){\r\n            //Insercion de Nodos no primeros\r\n            let aux = this.cola;\r\n            aux.siguiente = nodo;\r\n            nodo.anterior = aux;\r\n            nodo.siguiente = this.cabeza;\r\n            this.cabeza.anterior = nodo;\r\n            this.cola = nodo;\r\n            this.size++;\r\n            return\r\n        }\r\n        \r\n    }\r\n\r\n    //Metodo Insertar al Final\r\n    insertFinal(dato){\r\n        let nodo = new Nodo(dato);\r\n        //Insertcion de primer nodo \r\n        if(this.cabeza == null){\r\n            this.cabeza = nodo;\r\n            this.cola = nodo;\r\n            this.size++;\r\n            return\r\n        }else if(this.cabeza != null && this.cola != null){\r\n            //Insercion de Nodos no primeros\r\n            let aux = this.cola;\r\n            aux.siguiente = nodo;\r\n            nodo.anterior = aux;\r\n            nodo.siguiente = this.cabeza;\r\n            this.cabeza.anterior = nodo;\r\n            this.cola = nodo;\r\n            this.size++;\r\n            return\r\n        }\r\n    }\r\n\r\n    //Metodo Imprimir\r\n    print(){\r\n        let aux = this.cabeza;\r\n        console.log(\"Entro a print\")\r\n        while (aux != this.cola){\r\n            console.log(aux.dato);\r\n            aux = aux.siguiente\r\n        }\r\n        if(aux == this.cola){\r\n            console.log(aux.dato);\r\n        }\r\n    }\r\n\r\n    //Metodo Buscar\r\n    buscar(dato){\r\n        let aux = this.cabeza;\r\n        let contador = 1;\r\n        while(aux.dato != dato && contador != this.size){\r\n            aux= aux.siguiente;\r\n            contador++;\r\n        }\r\n        if(aux.dato == dato){\r\n            //Dato encontrado\r\n            console.log(aux.dato + \" fue encontrado exitosamente\");\r\n        }\r\n        if (contador == this.size){\r\n            //Dato no encontrado\r\n            console.log(\"No se encontro el dato buscado\");\r\n        }\r\n    }\r\n\r\n    //Metodo Eliminar\r\n    eliminar(dato){\r\n        let aux = this.cabeza;\r\n        let contador = 1;\r\n        while(aux.dato != dato && contador != this.size){\r\n            aux= aux.siguiente;\r\n            contador++;\r\n        }\r\n        if(aux.dato == dato && aux != this.cabeza){\r\n            //Dato eliminado en Nodo no cabeza\r\n            aux.anterior.siguiente = aux.siguiente;\r\n            aux.siguiente.anterior = aux.anterior;\r\n            aux.siguiente = null;\r\n            aux.anterior = null;\r\n            console.log(aux.dato + \" fue eliminado con exito\");\r\n        }else if(aux.dato == dato && aux == this.cabeza){\r\n            //Dato eliminado en Nodo Cabeza\r\n            let tmp = aux.siguiente\r\n            aux.anterior.siguiente = aux.siguiente;\r\n            aux.siguiente.anterior = aux.anterior;\r\n            aux.siguiente = null;\r\n            aux.anterior = null;\r\n            this.cabeza = tmp\r\n            console.log(aux.dato + \" fue eliminado con exito\");\r\n        }\r\n        if (contador == this.size){\r\n            //Dato no encontrado\r\n            console.log(\"No se encontro el dato a eliminar\");\r\n        }\r\n    }\r\n\r\n    //Metodo Actualizar\r\n    actualizar(datoelim, datoins){\r\n        let aux = this.cabeza;\r\n        let contador = 1;\r\n        while(aux.dato != datoelim && contador != this.size){\r\n            aux= aux.siguiente;\r\n            contador++;\r\n        }\r\n        if(aux.dato == datoelim){\r\n            //Dato encontrado\r\n            console.log(aux.dato + \" fue encontrado exitosamente\");\r\n            aux.dato = datoins\r\n            console.log(datoelim + \" fue cambiado exitosamente a \"+aux.dato);\r\n        }\r\n        if (contador == this.size){\r\n            //Dato no encontrado\r\n            console.log(\"No se encontro el dato buscado\");\r\n        }\r\n    }\r\n\r\n    //Metodo Carga\r\n    cargar(arreglo,accion) {\r\n        arreglo.map(elemento => {\r\n            this.agregar(elemento,accion)\r\n        })\r\n    }\r\n\r\n    //Metodo Guardar\r\n    guardar() {\r\n        let archivojs = [];\r\n        let temporal = this.cabeza;\r\n        archivojs.push(temporal.dato)\r\n        temporal = temporal.siguiente\r\n        while (temporal != this.cabeza && temporal != null){\r\n            archivojs.push(temporal.dato)\r\n            temporal = temporal.siguiente\r\n        }\r\n        return archivojs\r\n    }\r\n\r\n\r\n    Recorrido(datoBuscar){\r\n        let aux = this.cabeza;\r\n        let contador = 0;\r\n\r\n        \r\n        let arreglo = []\r\n        let contadoraux = 0;\r\n        while(contador != this.size){\r\n            let dato = {id: contadoraux, label: aux.dato.toString(),}\r\n            arreglo[contadoraux] = dato\r\n\r\n            \r\n            if(aux.dato == datoBuscar){\r\n                let dato = {id: contadoraux, label: aux.dato.toString(),  color: \"lime\"}\r\n                arreglo[contadoraux] = dato\r\n            }\r\n            aux= aux.siguiente;\r\n            contador++;\r\n            contadoraux++;\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n    \r\n}\r\n\r\nexport default ListaCD;\r\n\r\n","//Forma de insercion: Desordenada\r\n//Eliminacion Unica de primer dato encontrado\r\n//Busqueda de primer metodo encontrado\r\nvar fs = require('fs');\r\nconst { ListaSimple } = require('./ListaSimple');\r\nclass Nodo{ //Clase Nodo\r\n    //Constructor\r\n    constructor(dato){\r\n        this.siguiente = null;\r\n        this.dato = dato;\r\n    }\r\n\r\n}\r\n\r\nclass ListaCS{ //Clase Lista Circular Simple\r\n    constructor(){\r\n        this.cabeza = null;\r\n        this.cola = null;\r\n        this.size = 0;\r\n    }\r\n\r\n    agregar(elemento, accion){        \r\n        switch(accion){\r\n            case \"Ordenado\":\r\n                this.agregarOrdenado(elemento);\r\n                break;\r\n            case \"Final\":\r\n                this.agregarFinal(elemento);\r\n                break;\r\n            case \"Inicio\":\r\n                this.agregarInicio(elemento);\r\n                break;   \r\n        }\r\n    }\r\n\r\n\r\n    agregarInicio(dato){\r\n        let nodo = new Nodo(dato);\r\n        if(this.cabeza == null){\r\n            this.cabeza = nodo;\r\n            this.cola = nodo;\r\n            this.size++\r\n            return\r\n        }else if(this.cabeza != null  && this.cola != null){\r\n            this.cabeza.anterior = nodo;\r\n            nodo.siguiente = this.cabeza\r\n            nodo.anterior = this.cola\r\n            this.cola.siguiente = nodo\r\n            this.cabeza = nodo\r\n            this.size++\r\n            return\r\n        }\r\n    }\r\n    \r\n    //Metodo Insertar\r\n    agregarOrdenado(dato){\r\n        let nodo = new Nodo(dato)\r\n        let aux = this.cabeza\r\n        if(this.cabeza == null){\r\n            this.cabeza = nodo;\r\n            this.cola = nodo;\r\n            this.size++;\r\n            return\r\n        }\r\n        if(dato < this.cabeza.dato){\r\n            //Insercion de Nodos no primeros\r\n            this.cabeza.anterior = nodo;\r\n            nodo.siguiente = this.cabeza;\r\n            nodo.anterior = this.cola;\r\n            this.cola.siguiente = nodo\r\n            this.cabeza = nodo;\r\n            this.size++;\r\n            return\r\n        }else if(dato >= this.cabeza.dato && dato <= this.cola.dato){\r\n            while(aux != this.cola){\r\n                if(dato >= aux.dato && dato <= aux.siguiente.dato){\r\n                    let tmp = aux.siguiente\r\n                    tmp.anterior = nodo\r\n                    aux.siguiente = nodo\r\n                    nodo.siguiente = tmp\r\n                    nodo.anterior = aux\r\n                    this.size++;\r\n                    return\r\n                }\r\n                aux = aux.siguiente\r\n            }\r\n        }else if(dato > this.cola.dato){\r\n            //Insercion de Nodos no primeros\r\n            let aux = this.cola;\r\n            aux.siguiente = nodo;\r\n            nodo.anterior = aux;\r\n            nodo.siguiente = this.cabeza;\r\n            this.cabeza.anterior = nodo;\r\n            this.cola = nodo;\r\n            this.size++;\r\n            return\r\n        }\r\n        \r\n    }\r\n\r\n    //Metodo Insertar\r\n    agregarFinal(dato){\r\n        let nodo = new Nodo(dato);\r\n        //Insercion de primer nodo\r\n        if(this.cabeza == null){\r\n            this.cabeza = nodo;\r\n            this.cola = nodo;\r\n            this.size++;\r\n        }else if(this.cabeza != null){ // Insercion de nodo No Cabeza\r\n            let aux = this.cabeza;\r\n            while(aux != this.cola){\r\n                aux = aux.siguiente;\r\n            }\r\n            aux.siguiente = nodo;\r\n            nodo.siguiente = this.cabeza;\r\n            this.cola = nodo;\r\n            this.size++;\r\n        }\r\n    }\r\n\r\n    //Metodo Imprimir\r\n    print(){\r\n        let aux = this.cabeza;\r\n        while (aux != this.cola){\r\n            console.log(aux.dato);\r\n            aux = aux.siguiente\r\n        }\r\n        if(aux == this.cola){\r\n            console.log(aux.dato);\r\n        }\r\n    }\r\n\r\n    //Metodo buscar\r\n    buscar(dato){\r\n        let aux = this.cabeza;\r\n        let contador = 1;\r\n        let tmp = aux.siguiente\r\n        while(tmp.dato != dato && contador != this.size){\r\n            aux= aux.siguiente;\r\n            tmp= tmp.siguiente;\r\n            contador++;\r\n        }\r\n        if(tmp.dato == dato){\r\n            //Dato encontrado\r\n            console.log(tmp.dato + \" fue hayado con exito\");\r\n        }\r\n        if (contador == this.size){\r\n            //Dato no encontrado\r\n            console.log(\"No se encontro el dato buscado\");\r\n        }\r\n    }\r\n\r\n    //Metodo Eliminar\r\n    eliminar(dato){\r\n        let aux = this.cabeza;\r\n        let contador = 1;\r\n        let tmp = aux.siguiente\r\n        while(tmp.dato != dato && contador != this.size){\r\n            aux= aux.siguiente;\r\n            tmp= tmp.siguiente;\r\n            contador++;\r\n        }\r\n        if(tmp.dato == dato){\r\n            //Dato Eliminado\r\n            aux.siguiente = tmp.siguiente;\r\n            tmp.siguiente = null;\r\n            console.log(tmp.dato + \" fue eliminado con exito\");\r\n        }\r\n        if (contador == this.size){\r\n            //Dato no encontrado\r\n            console.log(\"No se encontro el dato a eliminar\");\r\n        }\r\n    }\r\n\r\n    //Metodo Actualizar\r\n    actualizar(datoelim, datoinse){\r\n        let aux = this.cabeza;\r\n        let contador = 1;\r\n        let tmp = aux.siguiente\r\n        while(tmp.dato != datoelim && contador != this.size){\r\n            aux= aux.siguiente;\r\n            tmp= tmp.siguiente;\r\n            contador++;\r\n        }\r\n        if(tmp.dato == datoelim){\r\n            //Dato encontrado\r\n            console.log(tmp.dato + \" fue hayado con exito\");\r\n            tmp.dato = datoinse\r\n            console.log(datoelim + \" fue editado con exito a \" + tmp.dato);\r\n        }\r\n        if (contador == this.size){\r\n            //Dato no encontrado\r\n            console.log(\"No se encontro el dato buscado\");\r\n        }\r\n    }\r\n\r\n    //Metodo Cargar\r\n    cargar(arreglo,accion) {\r\n        arreglo.map(elemento => {\r\n            this.agregar(elemento,accion)\r\n        })\r\n    }\r\n\r\n    //Metodo Guardar\r\n    guardar() {\r\n        let archivojs = [];\r\n        let temporal = this.cabeza;\r\n        archivojs.push(temporal.dato)\r\n        temporal = temporal.siguiente\r\n        while (temporal != this.cabeza && temporal != null){\r\n            archivojs.push(temporal.dato)\r\n            temporal = temporal.siguiente\r\n        }\r\n        \r\n        return archivojs\r\n    }\r\n\r\n   \r\n\r\n    Recorrido(datoBuscar){\r\n        let aux = this.cabeza;\r\n        let contador = 0;\r\n\r\n        let arreglo = []\r\n        let contadoraux = 0;\r\n\r\n        while(contador != this.size){\r\n\r\n            let dato = {id: contadoraux, label: aux.dato.toString(),}\r\n            arreglo[contadoraux] = dato\r\n            \r\n            if(aux.dato == datoBuscar){\r\n                let dato = {id: contadoraux, label: aux.dato.toString(),  color: \"lime\"}\r\n                arreglo[contadoraux] = dato\r\n            }\r\n\r\n\r\n            aux= aux.siguiente;\r\n            contador++;\r\n            contadoraux++;\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n}\r\n\r\n\r\n//module.exports.ListaCS = ListaCS;\r\nexport default ListaCS;","class Nodo {\r\n    constructor(valor) {        \r\n        this.valor = valor;\r\n        this.siguiente = null;\r\n        this.anterior = null;\r\n    }\r\n}\r\n\r\n\r\nclass ListaDoble {\r\n    constructor() {\r\n        //inicializar atributos\r\n        this.primero = null;\r\n        this.ultimo = null;\r\n\r\n    }\r\n\r\n    agregar(elemento, accion){        \r\n        switch(accion){\r\n            case \"Ordenado\":\r\n                this.agregarOrdenado(elemento);\r\n                break;\r\n            case \"Final\":\r\n                this.agregarFinal(elemento);\r\n                break;\r\n            case \"Inicio\":\r\n                this.agregarInicio(elemento);\r\n                break;   \r\n        }\r\n    }\r\n\r\n\r\n    agregarInicio(elemento){\r\n        let nodo = new Nodo(elemento);\r\n        let temporal = this.primero;\r\n        if(this.primero == null){\r\n            this.primero = nodo;\r\n        }else{\r\n            nodo.siguiente =this.primero;\r\n            this.primero.anterior = nodo;\r\n            this.primero = nodo;\r\n        }\r\n\r\n    }\r\n\r\n    agregarOrdenado(elemento){\r\n        let nodo = new Nodo(elemento)\r\n        if(this.primero == null){\r\n            this.primero = nodo;\r\n        }else{\r\n            let temporal = this.primero;\r\n\r\n            while(temporal.siguiente != null ){\r\n                if(temporal.valor <= elemento && temporal.siguiente.valor >= elemento){\r\n                    nodo.siguiente = temporal.siguiente;\r\n                    temporal.siguiente.anterior = nodo;\r\n                    nodo.anterior = temporal;\r\n                    temporal.siguiente = nodo;   \r\n                    break;                 \r\n                }else if(temporal == this.primero && temporal.valor >= elemento){\r\n                    nodo.siguiente = this.primero;\r\n                    this.primero.anterior = nodo;\r\n                    this.primero = nodo;\r\n                    break;\r\n                }                                \r\n                temporal = temporal.siguiente;\r\n\r\n            }if(temporal.siguiente == null && temporal.valor <= elemento){\r\n                temporal.siguiente = nodo;\r\n                nodo.anterior = temporal; \r\n            }\r\n        }\r\n\r\n    }\r\n    agregarFinal(elemento){        \r\n        var temporal = this.primero;\r\n        let nodo = new Nodo(elemento);\r\n        if(this.primero == null){            \r\n            this.primero = nodo;\r\n        }else {\r\n            \r\n            while(temporal.siguiente != null) {\r\n                temporal = temporal.siguiente;                \r\n            }            \r\n            temporal.siguiente = nodo;\r\n            nodo.anterior = temporal;\r\n        }\r\n    }\r\n\r\n\r\n    eliminar(elemento){\r\n        if (this.primero == null) {\r\n            console.log(\"No hay nada en las lista\")\r\n        }\r\n        else {\r\n            let temporal = this.primero;\r\n            while (temporal != null) {\r\n                if (temporal.valor == elemento) {\r\n                    temporal = temporal.siguiente;\r\n                }\r\n                else {\r\n                    if (temporal.siguiente != null) {\r\n                        if (temporal.siguiente.valor == elemento) {\r\n                            let siguienteT = temporal.siguiente;\r\n                            temporal.siguiente = siguienteT.siguiente;\r\n                            temporal.siguiente.anterior = temporal;\r\n                            siguienteT.siguiente = null;\r\n                            return;\r\n\r\n                        }\r\n                    }\r\n                }\r\n                temporal = temporal.siguiente;\r\n            }\r\n        }\r\n    }\r\n\r\n    actualizar(reemplazo,valor){\r\n        if (this.primero == null) {\r\n            console.log(\"No hay nada en las lista\")\r\n        }\r\n        else {\r\n            let temporal = this.primero;\r\n            while (temporal != null) {\r\n                if (temporal.valor == valor) {\r\n                    temporal.valor = reemplazo;\r\n                }\r\n                temporal = temporal.siguiente;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    buscar(valor){\r\n        if (this.primero == null  ) {\r\n            console.log(\"no hay elementos en la lista\");          \r\n        }\r\n        else {\r\n            let temporal = this.primero;\r\n            while(temporal != null){ \r\n                if(temporal.valor == valor){\r\n                    return temporal;  \r\n                }\r\n                temporal = temporal.siguiente;\r\n            }\r\n        }\r\n    }\r\n\r\n    cargar(arreglo) {\r\n        \r\n        arreglo.map(elemento => {\r\n            this.agregar(elemento);\r\n        });\r\n    }\r\n\r\n    guardar() {\r\n        let archivojs= [];\r\n        let temporal = this.primero;\r\n        while (temporal != null){\r\n            archivojs.push(temporal.valor);\r\n            temporal = temporal.siguiente;\r\n            \r\n        }\r\n        return archivojs;\r\n        \r\n    }\r\n\r\n    imprimir(){\r\n        let temporal = this.primero;\r\n        while(temporal != null){\r\n            console.log(temporal.valor + \"Aqui\")\r\n            temporal = temporal.siguiente;\r\n        }\r\n    }\r\n\r\n    Recorrido(datoBuscar){\r\n        let temporal = this.primero;\r\n        let arreglo = [];\r\n        let contador = 0;\r\n        while(temporal != null){ \r\n            let dato = {id: contador, label: temporal.valor.toString(),}\r\n            arreglo[contador] = dato\r\n            \r\n            if(temporal.valor == datoBuscar){\r\n                let dato = {id: contador, label: temporal.valor.toString(),  color: \"lime\"}\r\n                arreglo[contador] = dato\r\n            }\r\n            temporal = temporal.siguiente;\r\n            contador++;\r\n        }\r\n\r\n        return arreglo\r\n\r\n    }\r\n\r\n\r\n}\r\n//module.exports.ListaDoble = ListaDoble;\r\nexport default ListaDoble;\r\n","//Clase Nodo\r\nclass Nodo{\r\n    //Constructor\r\n    constructor(dato){\r\n        this.dato = dato\r\n        this.anterior = null\r\n        this.siguiente = null\r\n        this.izquierdo = null\r\n        this.derecho = null\r\n    }\r\n}\r\n\r\n//String para graficacion\r\nvar salida = \"\"\r\n//Arreglo de uso unico\r\nvar arr = []\r\n//VariableGlobal\r\nvar idRama = 0\r\n\r\n//Clase Rama\r\nclass Rama{\r\n    //Constructor\r\n    constructor(){\r\n        this.contador = 0\r\n        this.hoja = true\r\n        this.raiz = null\r\n        this.id = 0\r\n    }\r\n\r\n    //Metodo Insertar en Rama\r\n    insertar(nodo){\r\n        //Insertar Primer Nodo\r\n        if(this.raiz == null){\r\n            this.raiz = nodo\r\n            this.contador++\r\n        }else{  //Insertar Nodo no Primero\r\n            let tmp = this.raiz\r\n            do{\r\n                if(nodo.dato<=tmp.dato){    //Insercion de dato menor igual\r\n                    this.contador++\r\n                    //Insercion en nodo no vacio\r\n                    if(tmp == this.raiz){\r\n                        this.raiz.anterior = nodo\r\n                        nodo.siguiente = this.raiz\r\n                        this.raiz.izquierdo = nodo.derecho\r\n                        this.raiz = nodo\r\n                        break\r\n                    }else{\r\n                        //Insercion entre nodos\r\n                        nodo.anterior = tmp.anterior\r\n                        nodo.siguiente = tmp\r\n                        tmp.anterior.siguiente = nodo\r\n                        tmp.anterior.derecho = nodo.izquierdo\r\n                        tmp.anterior= nodo\r\n                        tmp.izquierdo = nodo.derecho\r\n                        break\r\n                    }\r\n                //Insercion en nodos vacios\r\n                }else if(tmp.siguiente == null){\r\n                    this.contador++\r\n                    tmp.siguiente = nodo\r\n                    tmp.derecho =   nodo.izquierdo\r\n                    nodo.anterior = tmp\r\n                    nodo.siguiente = null\r\n                    break\r\n                }\r\n                tmp = tmp.siguiente\r\n            }while(tmp != null)\r\n        }\r\n    }\r\n\r\n}\r\n\r\n//Clase Arbol\r\nclass ArbolB{\r\n    //Constructor\r\n    constructor(orden){\r\n        this.raiz = null\r\n        this.orden = orden\r\n    }\r\n\r\n    //Metodo Insercion en arbol\r\n    insertar(dato){\r\n        let nodo = new Nodo(dato)\r\n        //Insercion para arbol vacio\r\n        if(this.raiz == null){\r\n            this.raiz = new Rama()\r\n            this.raiz.insertar(nodo)\r\n            this.raiz.id = idRama\r\n            idRama++\r\n            return\r\n        }else{\r\n            //Insercion para arbol no vacio\r\n            let tmp = this.add(nodo, this.raiz)\r\n            if(tmp instanceof Nodo){\r\n                this.raiz = new Rama()\r\n                this.raiz.insertar(tmp)\r\n                this.raiz.hoja = false\r\n            }\r\n        }\r\n    }\r\n\r\n    //Metodo para agregar y verificar estado de las ramas\r\n    add(nodo, rama){\r\n        //Si es un nodo hijo\r\n        if(rama.hoja){\r\n            rama.insertar(nodo)\r\n            if(rama.contador == this.orden){\r\n                //Division de rama\r\n                return this.divRam(rama)\r\n            }else{\r\n                //Retornar rama no llena\r\n                return rama\r\n            }\r\n        //Si no es un nodo hijo\r\n        }else{\r\n            let tmp = rama.raiz \r\n            do{\r\n                if(nodo.dato == tmp.dato){\r\n                    //No inserta duplicados\r\n                    return rama\r\n                }else if(nodo.dato < tmp.dato){ //Insercion de nodo menor\r\n                    let aux = this.add(nodo, tmp.izquierdo)\r\n                    if( aux instanceof Nodo){\r\n                        rama.insertar(aux)\r\n                        if(rama.contador == this.orden){\r\n                            return this.divRam(rama)\r\n                        }\r\n                    }\r\n                    return rama\r\n                }else if(tmp.siguiente == null){    //Insercion para nodo con un solo valor\r\n                    let aux = this.add(nodo, tmp.derecho)\r\n                    if(aux instanceof Nodo){\r\n                        rama.insertar(aux)\r\n                        if(rama.contador == this.orden){\r\n                            return this.divRam(rama)\r\n                        }\r\n                    }\r\n                    return rama\r\n                }\r\n                tmp = tmp.siguiente\r\n            }while(tmp != null)\r\n        }\r\n        return rama\r\n    }\r\n\r\n    //Metodo de division de rama\r\n    divRam(rama){\r\n        let der = new Rama()\r\n        let izq = new Rama()\r\n        let mitad = null\r\n        let tmp = rama.raiz\r\n        let inicio = 1\r\n        let medio = parseInt(this.orden/2) + 1\r\n        let final = this.orden\r\n        for(let i = 1; i < this.orden + 1;i++, tmp = tmp.siguiente){\r\n            let nodo = new Nodo(tmp.dato)\r\n            nodo.izquierdo = tmp.izquierdo\r\n            nodo.derecho = tmp.derecho\r\n            if(nodo.derecho != null && nodo.izquierdo != null){\r\n                izq.hoja = false\r\n                der.hoja = false\r\n            }\r\n            if(i >= inicio && i < medio){\r\n                izq.insertar(nodo)\r\n            }else if(i == medio){\r\n                mitad = nodo\r\n            }else if(i <= final && i > medio){\r\n                der.insertar(nodo)\r\n            }\r\n        }\r\n        izq.id = idRama+1\r\n        der.id = idRama+2\r\n        mitad.id = idRama\r\n        mitad.izquierdo = izq\r\n        mitad.derecho = der\r\n        idRama = idRama + 3\r\n        return mitad\r\n    }\r\n\r\n    //Metodo de impresion de Arbol\r\n    printArbol(){\r\n        if (this.raiz == null){\r\n            console.log(\"no existe arbol\")\r\n            return \r\n        }\r\n        this.subprint(this.raiz) \r\n    }\r\n\r\n    //Sub metodo de impresion de arbol\r\n    subprint(rama){\r\n        if (rama.raiz == null){\r\n            console.log(\"no hay nodos\")\r\n            return \r\n        }\r\n        let aux = rama.raiz\r\n        if(aux.izquierdo != null){\r\n            this.subprint(aux.izquierdo)\r\n        }\r\n        if(aux.derecho!=null){\r\n            this.subprint(aux.derecho)\r\n        }\r\n        if(aux.anterior == null && aux.siguiente == null){\r\n            console.log(aux.dato)\r\n            return\r\n        }\r\n        while(aux!= null){\r\n            console.log(aux.dato)\r\n            aux = aux.siguiente\r\n            if(aux != null && aux.derecho!=null){\r\n                this.subprint(aux.derecho)\r\n            }\r\n        }\r\n    }\r\n\r\n    guardar(){\r\n        let arreglo = []\r\n        if (this.raiz == null){\r\n            console.log(\"no existe arbol\")\r\n            return \r\n        }\r\n       return this.recorrido(this.raiz,arreglo) \r\n    }\r\n\r\n    //Sub metodo de impresion de arbol\r\n    recorrido(rama,arreglo){\r\n        if (rama.raiz == null){\r\n            console.log(\"no hay nodos\")\r\n            return \r\n        }\r\n        let aux = rama.raiz\r\n        if(aux.izquierdo != null){\r\n            this.recorrido(aux.izquierdo,arreglo)\r\n        }\r\n        if(aux.derecho!=null){\r\n            this.recorrido(aux.derecho,arreglo)\r\n        }\r\n        if(aux.anterior == null && aux.siguiente == null){\r\n            arreglo.push(aux.dato)\r\n            return\r\n        }\r\n        while(aux!= null){\r\n            arreglo.push(aux.dato)\r\n            aux = aux.siguiente\r\n            if(aux != null && aux.derecho!=null){\r\n                this.recorrido(aux.derecho,arreglo)\r\n            }\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n\r\n    //Metodo de busqueda\r\n    buscarArbol(dato){\r\n        if (this.raiz == null){\r\n            console.log(\"no existe arbol\")\r\n            return \r\n        }\r\n        this.buscando(this.raiz, dato) \r\n    }\r\n\r\n    //Sub metodo de busqueda\r\n    buscando(rama, dato){\r\n        if (rama.raiz == null){\r\n            console.log(\"no hay nodos\")\r\n            return \r\n        }\r\n        let aux = rama.raiz\r\n        if(aux.izquierdo != null){\r\n            this.buscando(aux.izquierdo, dato)\r\n        }\r\n        if(aux.derecho!=null){\r\n            this.buscando(aux.derecho, dato)\r\n        }\r\n        if(aux.siguiente == null){\r\n            if(aux.dato == dato){\r\n                console.log(\"Dato encontrado\" + dato)\r\n                return\r\n            }\r\n        }\r\n        while(aux!= null){\r\n            if(aux.dato == dato){\r\n                console.log(\"Dato encontrado\" + dato)\r\n                return\r\n            }\r\n            aux = aux.siguiente\r\n            if(aux != null && aux.derecho!=null){\r\n                this.buscando(aux.derecho, dato)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //Metodo eliminar\r\n    eliminar(dato){\r\n        if (this.raiz == null){\r\n            console.log(\"no existe arbol\")\r\n            return \r\n        }\r\n        let aux = this.raiz\r\n        let aux2 = aux.raiz\r\n        while (aux2 != null){\r\n            if(aux2.dato == dato && aux2.izquierdo == null && aux2.derecho == null){\r\n                if(aux2.anterior == null && aux2.siguiente != null){\r\n                    let tmp = aux2.siguiente\r\n                    aux.raiz = tmp\r\n                    aux2.siguiente = null\r\n                    tmp.anterior = null\r\n                    console.log(\"Nodo Raiz eliminado\")\r\n                    return\r\n                }else if(aux2.anterior != null && aux2.siguiente != null){\r\n                    let tmp = aux2.siguiente\r\n                    aux2.anterior.siguiente = tmp\r\n                    tmp.anterior = aux2.anterior\r\n                    aux2.anterior = null\r\n                    aux2.siguiente = null\r\n                    console.log(\"Nodo medio eliminado\")\r\n                    return\r\n                }else if(aux2.anterior != null && aux2.siguiente == null){\r\n                    let tmp = aux2.anterior\r\n                    tmp.siguiente = null\r\n                    aux2.anterior = null\r\n                    console.log(\"Nodo eliminado al final\")\r\n                    return\r\n                }else if(aux2.anterior == null && aux2.siguiente == null){\r\n                    if(aux2.izquierdo == null && aux2.derecho == null){\r\n                        this.raiz = null\r\n                        idRama = 0\r\n                        console.log(\"eliminado unico nodo\")\r\n                    }\r\n                }\r\n            }\r\n            aux2 = aux2.siguiente\r\n        }\r\n        this.eliminando(this.raiz, dato) \r\n    }\r\n\r\n    //Sub metodo eliminar\r\n    eliminando(rama, dato){\r\n        if (rama.raiz == null){\r\n            console.log(\"no hay nodos\")\r\n            return \r\n        }\r\n        let aux = rama.raiz\r\n        if(aux.izquierdo != null){\r\n            this.eliminando(aux.izquierdo, dato)\r\n        }\r\n        if(aux.derecho!=null){\r\n            this.eliminando(aux.derecho, dato)\r\n        }\r\n        if(aux.siguiente == null && aux.anterior == null){\r\n            if(aux.dato == dato){\r\n                console.log(\"Dato identificado\" + dato)\r\n                aux.dato = \"papa\"\r\n                this.elimin(this.raiz)\r\n                this.creando()\r\n                return\r\n            }\r\n        }\r\n        while(aux!= null){\r\n            if(aux.anterior != null && aux.derecho != null){\r\n                this.eliminando(aux.derecho, dato)\r\n            }\r\n            if(aux.dato == dato){\r\n                console.log(\"Dato identificado\" + dato)\r\n                aux.dato = \"papa\"\r\n                this.elimin(this.raiz)\r\n                this.creando()\r\n                return\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n    }\r\n\r\n    //Metodo de reestructuracion de arbol\r\n    creando(){\r\n        this.raiz = null\r\n        idRama = 0\r\n        for(let i = 0; i<arr.length;i++){\r\n            let dat = arr[i]\r\n            this.insertar(dat)\r\n        }\r\n        console.log(\"Arbol Creado\")\r\n        arr = []\r\n    }\r\n    \r\n    //Metodo para manejo de array de uso unico\r\n    elimin(rama){\r\n        if (rama.raiz == null){\r\n            console.log(\"no hay nodos\")\r\n            return \r\n        }\r\n        let aux = rama.raiz\r\n        if(aux.izquierdo != null){\r\n            this.elimin(aux.izquierdo)\r\n        }\r\n        if(aux.derecho!=null){\r\n            this.elimin(aux.derecho)\r\n        }\r\n        if(aux.siguiente == null && aux.anterior == null){\r\n            if(aux.dato != \"papa\"){\r\n                arr.push(aux.dato)\r\n                return\r\n            }\r\n        }\r\n        while(aux!= null){\r\n            if(aux.anterior != null && aux.derecho != null){\r\n                this.elimin(aux.derecho)\r\n            }\r\n            if(aux.dato != \"papa\"){\r\n                arr.push(aux.dato)\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n    }\r\n\r\n    //Metodo modificar\r\n    modificar(datelim, datins){\r\n        this.eliminar(datelim)\r\n        this.insertar(datins)\r\n    }\r\n\r\n    //Metodo Cargar\r\n    cargar(arreglo) {\r\n        arreglo.map(elemento => {\r\n            this.insertar(elemento);\r\n        })\r\n    }\r\n\r\n    //Metodo Graficar\r\n      //Metodo Graficar\r\n      graficar(datoBuscar){\r\n          \r\n        salida = \"\"\r\n        if(this.raiz == null){\r\n            console.log(\"No hay nada aun\")\r\n            return\r\n        }\r\n        let rama = this.raiz\r\n        salida+= \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\r\n        this.graficando(rama,datoBuscar)\r\n        salida+= \"}\"\r\n        console.log(salida)\r\n\r\n        return salida\r\n    }\r\n\r\n    //SubMetodo Graficar\r\n    graficando(rama,datoBuscar){\r\n        if (rama.raiz == null){\r\n            console.log(\"no hay nodos\")\r\n            return \r\n        }\r\n        let aux = rama.raiz\r\n        if(aux.izquierdo != null){\r\n            this.graficando(aux.izquierdo,datoBuscar)\r\n        }\r\n        if(aux.derecho!=null){\r\n            this.graficando(aux.derecho,datoBuscar)\r\n        }\r\n        if(aux.siguiente == null){\r\n            if(datoBuscar == aux.dato){\r\n                salida += \"node\"+rama.id+\" [color=\\\"green\\\" label = \\\" iz| \"+aux.dato+\" |de \\\"]; \\n\"\r\n            }else{\r\n                salida += \"node\"+rama.id+\" [label = \\\" iz| \"+aux.dato+\" |de \\\"]; \\n\"\r\n            }\r\n            if(aux.derecho != null){\r\n                salida+= \"node\"+rama.id + \" -> node\" + aux.derecho.id + \"\\n\"\r\n            }\r\n            if(aux.izquierdo != null){\r\n                salida+= \"node\"+rama.id + \" -> node\" + aux.izquierdo.id + \"\\n\"\r\n            }\r\n        }\r\n        if(aux.siguiente != null){\r\n            if(aux.izquierdo==null && aux.derecho == null){\r\n                salida += \"node\"+rama.id+\" [label = \\\" iz| \"\r\n                let encuentra = false\r\n                while(aux!=null){\r\n                    if(datoBuscar == aux.dato){\r\n                        encuentra = true\r\n                    }\r\n                    salida += aux.dato+ \" | \"\r\n                    aux = aux.siguiente\r\n                }\r\n                if(encuentra== true){\r\n                    salida += \"de \\\"color = \\\"green\\\"] ; \\n\"\r\n                }else{\r\n                    salida += \"de \\\"]; \\n\"\r\n                }\r\n            }else if(aux.izquierdo!=null && aux.derecho != null){\r\n                salida += \"node\"+rama.id+\" [label = \\\" iz| \"\r\n                let encuentra = false\r\n                while(aux!=null){\r\n                    if(datoBuscar == aux.dato){\r\n                        encuentra = true\r\n                    }\r\n                    salida += aux.dato+ \" | \"\r\n                    aux = aux.siguiente\r\n                }\r\n                if(encuentra== true){\r\n                    salida += \"de \\\"color = \\\"green\\\"] ; \\n\"\r\n                }else{\r\n                    salida += \"de \\\"]; \\n\"\r\n                }\r\n                aux = rama.raiz\r\n                if(aux.derecho != null){\r\n                    salida+= \"node\"+rama.id + \" -> node\" + rama.raiz.derecho.id + \"\\n\"\r\n                }\r\n                if(aux.izquierdo != null){\r\n                    salida+= \"node\"+rama.id + \" -> node\" + rama.raiz.izquierdo.id + \"\\n\"\r\n                }\r\n                aux = rama.raiz\r\n                aux = aux.siguiente\r\n                while(aux!=null){\r\n                    salida += \"node\"+rama.id + \" -> node\" + aux.derecho.id + \"\\n\"\r\n                    aux = aux.siguiente\r\n                }\r\n            }\r\n            aux = rama.raiz\r\n            aux = aux.siguiente\r\n            while(aux !=null){\r\n                if(aux != null && aux.derecho!=null){\r\n                    this.graficando(aux.derecho,datoBuscar)\r\n                }\r\n                aux = aux.siguiente\r\n            }\r\n        }    \r\n    }\r\n\r\n \r\n\r\n    \r\n}\r\n\r\nexport default ArbolB;","class Nodo {\r\n    constructor(valor) {\r\n        this.valor = valor;\r\n        this.anterior = null;\r\n        this.siguiente = null;\r\n        this.rama_Izq = null;\r\n        this.rama_Der = null;\r\n        this.id = null; // id nuevo \r\n    }\r\n}\r\n\r\nlet permiso = false\r\nvar salida = \"\"\r\n\r\nclass Rama {\r\n    constructor() {\r\n        this.hoja = true;\r\n        this.indice = null;\r\n        this.ramaContinua = null;\r\n        this.contador = 0; /// Calcular Maximos y minimos\r\n        this.ramaPadre = null;\r\n        this.idRama = null;\r\n    }\r\n\r\n    agregarNodo(nodo) {\r\n        if (this.indice == null) {\r\n            this.indice = nodo;\r\n            this.contador++;\r\n        } else {\r\n            let temporal = this.indice;\r\n            do {\r\n                if (nodo.valor <= temporal.valor) {\r\n                    this.contador++;\r\n                    if (temporal == this.indice) {\r\n                        temporal.anterior = nodo;\r\n                        nodo.siguiente = temporal;\r\n                        temporal.rama_Izq = nodo.rama_Der;\r\n                        this.indice = nodo;\r\n                        break;\r\n                    } else {//en caso de que no sea el indice se inserta en medio de los valores respectivos\r\n                        nodo.anterior = temporal.anterior;\r\n                        nodo.siguiente = temporal;\r\n                        temporal.anterior.siguiente = nodo;\r\n                        temporal.anterior = nodo;\r\n\r\n                        temporal.anterior.rama_Der = nodo.rama_Izq;\r\n                        temporal.rama_Izq = nodo.rama_Der;\r\n                        break;\r\n\r\n                    }\r\n                }// insertar al final\r\n                else if (temporal.siguiente == null) {\r\n                    this.contador++;\r\n                    temporal.siguiente = nodo;\r\n                    temporal.rama_Der = nodo.rama_Izq;\r\n                    nodo.anterior = temporal;\r\n                    break;\r\n                }\r\n                temporal = temporal.siguiente;\r\n            } while (temporal != null);\r\n        }\r\n    }\r\n}\r\n\r\nclass ArbolBplus {\r\n    constructor(orden) {\r\n        this.orden = orden;\r\n        this.NodoAux = null;\r\n        this.raiz = null;\r\n        this.cuentaRamas = 0;\r\n\r\n    }\r\n/*-----------------------------------------------\r\n-------------Inicio bloque Agregar --------------\r\n-----------------------------------------------*/\r\n    agregar(valor) {\r\n        let nodo = new Nodo(valor);\r\n        this.cuentaNodos++;\r\n        nodo.id = this.cuentaNodos;\r\n        this._agregar(nodo, this.raiz)\r\n\r\n    }\r\n\r\n\r\n    _agregar(nodo, ramaAux) {\r\n        if (this.raiz == null) {\r\n            this.raiz = new Rama();\r\n            this.cuentaRamas++;\r\n            this.raiz.id = this.cuentaRamas;\r\n            this.raiz.agregarNodo(nodo);\r\n\r\n        } else if (ramaAux.hoja) {\r\n            ramaAux.agregarNodo(nodo);\r\n            if (ramaAux.contador == this.orden) {\r\n                this.dividirRama(ramaAux);\r\n                this.raiz.idRama = this.raiz.indice.idRama;\r\n            }\r\n        } else if (ramaAux.hoja == false) {\r\n            this.buscarInsercion(nodo, ramaAux);\r\n        }\r\n    }\r\n\r\n    buscarInsercion(nodo, rama) {\r\n        let temp = rama.indice;\r\n        for (let i = 1; i <= rama.contador; i++, temp = temp.siguiente) {\r\n            if (nodo.valor < temp.valor) {\r\n                this._agregar(nodo, temp.rama_Izq);\r\n                break;\r\n            } else if (temp.siguiente == null) {\r\n                this._agregar(nodo, temp.rama_Der);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    dividirRama(ramaAux) {\r\n        let valorMedio = parseInt(this.orden / 2) + 1\r\n        this.cuentaRamas ++;\r\n        let rama_derAux = new Rama();\r\n        rama_derAux.id = this.cuentaRamas;\r\n        rama_derAux.idRama = this.cuentaRamas;\r\n        this.cuentaRamas++;\r\n        let rama_izAux = new Rama();\r\n        rama_izAux.id = this.cuentaRamas;  \r\n        rama_izAux.idRama = this.cuentaRamas; \r\n        this.cuentaRamas ++;     \r\n        let medio = null;\r\n        let temp = ramaAux.indice;\r\n        let hoja = false;\r\n        let nuevaRaiz = null;\r\n\r\n        if (ramaAux.ramaPadre == null) {\r\n            nuevaRaiz = new Rama()\r\n            nuevaRaiz.id = ramaAux.id;\r\n        }    \r\n        if(temp.rama_Der != null || temp.rama_Izq != null){\r\n            ramaAux.hoja = false\r\n        }\r\n        if (ramaAux.hoja) {\r\n            hoja = true;          \r\n        }\r\n\r\n        if(ramaAux.ramaPadre != null){\r\n            if(ramaAux.ramaPadre.indice.rama_Izq.hoja == true){\r\n                let tempContinua = ramaAux.ramaPadre.indice;\r\n                while(tempContinua != null){\r\n                    if(tempContinua.siguiente == null){\r\n                        tempContinua.rama_Izq.ramaContinua = rama_izAux;\r\n                        }\r\n                        tempContinua = tempContinua.siguiente;\r\n                    }           \r\n        }\r\n        }\r\n\r\n        for (let i = 1; i <= this.orden; i++, temp = temp.siguiente) {\r\n            let nodo = new Nodo(temp.valor);\r\n            nodo.rama_Izq = temp.rama_Izq;\r\n            nodo.rama_Der = temp.rama_Der;            \r\n/* Si el nodo tiene hijos, aparte de ingresar los datos, \r\nreacomodo sus hijos en los espacios de las divisiones*/\r\n            if (i < valorMedio) {\r\n                if(nodo.rama_Izq != null){\r\n                    nodo.rama_Izq.ramaPadre = rama_izAux;\r\n                }\r\n                if(nodo.rama_Der != null){\r\n                    nodo.rama_Der.ramaPadre = rama_izAux;\r\n                }\r\n                rama_izAux.agregarNodo(nodo);               \r\n\r\n            } else if (i > valorMedio) {\r\n                if(nodo.rama_Izq != null){\r\n                    nodo.rama_Izq.ramaPadre = rama_derAux;\r\n                }\r\n                if(nodo.rama_Der != null){\r\n                    nodo.rama_Der.ramaPadre = rama_derAux;\r\n                }\r\n                rama_derAux.agregarNodo(nodo);\r\n\r\n            } else if (i = valorMedio) {\r\n                if (hoja) {\r\n                    if(nodo.rama_Izq != null){\r\n                        nodo.rama_Izq.ramaPadre = rama_derAux;\r\n                    }\r\n                    if(nodo.rama_Der != null){\r\n                        nodo.rama_Der.ramaPadre = rama_derAux;\r\n                    }\r\n                    rama_derAux.agregarNodo(nodo);\r\n                    medio = new Nodo(temp.valor);\r\n                    medio.rama_Izq = rama_izAux;\r\n                    medio.rama_Der = rama_derAux;\r\n                } else if (hoja == false) {\r\n                    medio = new Nodo(temp.valor);\r\n                    medio.rama_Izq = rama_izAux;\r\n                    medio.rama_Der = rama_derAux;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(rama_derAux.indice.rama_Izq != null || rama_derAux.indice.rama_Der != null){\r\n            rama_derAux.hoja = false;\r\n        }\r\n        if(rama_izAux.indice.rama_Izq != null || rama_izAux.indice.rama_Der != null){\r\n            rama_izAux.hoja = false;\r\n        }\r\n\r\n        if (nuevaRaiz != null) {       \r\n            rama_derAux.ramaPadre = nuevaRaiz;\r\n            rama_izAux.ramaPadre = nuevaRaiz;\r\n            this.cuentaNodos ++;\r\n            medio.id = this.cuentaNodos;                \r\n            nuevaRaiz.agregarNodo(medio);           \r\n            //nuevaRaiz.indice.rama_Izq = rama_izAux;\r\n            //nuevaRaiz.indice.rama_Der = rama_derAux;\r\n            if (hoja) {\r\n                nuevaRaiz.indice.rama_Izq.ramaContinua = nuevaRaiz.indice.rama_Der;\r\n            }\r\n            nuevaRaiz.hoja = false;\r\n            this.raiz = nuevaRaiz;\r\n        } else {\r\n            medio.rama_Izq.ramaPadre = ramaAux.ramaPadre;\r\n            medio.rama_Der.ramaPadre = ramaAux.ramaPadre;\r\n            this.cuentaNodos ++;\r\n            medio.id = this.cuentaNodos;\r\n            ramaAux.ramaPadre.agregarNodo(medio);//ContadorNodoRamaPadre\r\n            if (hoja) {\r\n                medio.rama_Izq.ramaContinua = medio.rama_Der;\r\n            }\r\n            if (ramaAux.ramaPadre.contador == this.orden) {\r\n                this.dividirRama(ramaAux.ramaPadre)\r\n            }\r\n        }\r\n        medio.idRama = this.cuentaRamas -2;\r\n    }    \r\n/*-----------------------------------------------\r\n---------------Fin bloque Agregar ---------------\r\n-----------------------------------------------*/\r\n\r\n    eliminar(valor){    \r\n        let arbolAux  = this.raiz;\r\n        this._eliminar(valor, arbolAux);\r\n    }\r\n\r\n_eliminar(valor, ramaAux){\r\n    if(ramaAux.hoja != true){\r\n        this._eliminar(valor, ramaAux.indice.rama_Izq)\r\n    }else if(ramaAux.hoja == true){\r\n        this.raiz = null;\r\n        while(ramaAux != null){\r\n            let nodotemp = ramaAux.indice;     \r\n            for(let i = 1; i <= ramaAux.contador; i ++,nodotemp = nodotemp.siguiente){\r\n                if(nodotemp.valor == valor){\r\n                    continue\r\n                }else{\r\n                    this.agregar(nodotemp.valor)\r\n                }                     \r\n            }ramaAux = ramaAux.ramaContinua\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nactualizar(valor, valorNuevo){\r\n    this.eliminar(valor)\r\n    this.agregar(valorNuevo)\r\n}\r\n\r\nbuscar(valor){      \r\n    let Encontrado = this._buscar(valor, this.raiz)  \r\n    console.log(Encontrado.valor + \"Aqui esta\")\r\n}\r\n\r\n_buscar(valor, ramaAux){\r\n    let temporal = ramaAux.indice;\r\n    for(let  i = 1; i<=ramaAux.contador; i++, temporal = temporal.siguiente){\r\n        if(temporal.valor > valor){\r\n            if(ramaAux.hoja == false){\r\n               let nodo = this._buscar(valor, temporal.rama_Izq)\r\n               return nodo;\r\n            }\r\n        }else if(temporal.valor == valor){\r\n            if(ramaAux.hoja == false){\r\n               let  nodo1 = this._buscar(valor, temporal.rama_Der)\r\n                if(nodo1 instanceof Nodo){\r\n                    return nodo1\r\n                }\r\n                let nodo2 = this._buscar(valor, temporal.rama_Izq)\r\n                if(nodo2 instanceof Nodo){\r\n                    return nodo2\r\n                }\r\n            }else if(ramaAux.hoja == true){\r\n                return temporal;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncargar(arreglo) {\r\n    let arreglo1 = arreglo;\r\n    arreglo1.map(elemento => {\r\n        this.agregar(elemento);\r\n    });\r\n}\r\n\r\n\r\nrecorrer(){\r\n    let arreglo = [];\r\n    this._recorrer(arreglo,this.raiz)\r\n    console.log(arreglo)\r\n}\r\n\r\n_recorrer(arreglo, ramaAux){\r\n    if(ramaAux.hoja == false){\r\n        this._recorrer(arreglo, ramaAux.indice.rama_Izq)\r\n    }else if(ramaAux.hoja == true){\r\n        let contador = 0;\r\n        while(ramaAux != null){\r\n            let nodotemp = ramaAux.indice;     \r\n            for(let i = 1; i <= ramaAux.contador; i ++,nodotemp = nodotemp.siguiente){                    \r\n                arreglo[contador] = nodotemp.valor;\r\n                contador ++;\r\n            }ramaAux = ramaAux.ramaContinua\r\n        }\r\n    }\r\n}\r\n\r\n //Metodo Graficar\r\n graficar(){\r\n    salida = \"\"\r\n    if(this.raiz == null){\r\n        console.log(\"No hay nada aun\")\r\n        return\r\n    }\r\n    let rama = this.raiz\r\n    salida+= \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\r\n    this.graficando(rama)\r\n    salida+= \"}\"\r\n    console.log(salida)\r\n    return salida\r\n}\r\n\r\n//SubMetodo Graficar\r\ngraficando(rama){\r\n    if (rama.indice == null){\r\n        console.log(\"no hay nodos\")\r\n        return \r\n    }\r\n    let aux = rama.indice\r\n    if(aux.rama_Izq != null){\r\n        this.graficando(aux.rama_Izq)\r\n    }\r\n    if(aux.rama_Der!=null){\r\n        this.graficando(aux.rama_Der)\r\n    }\r\n    if(aux.siguiente == null){\r\n        salida += \"node\"+rama.idRama+\" [label = \\\" iz| \"+aux.valor+\" |de \\\"]; \\n\"\r\n        if(aux.rama_Der != null){\r\n            salida+= \"node\"+rama.idRama + \" -> node\" + aux.rama_Der.idRama + \"\\n\"\r\n        }\r\n        if(aux.rama_Izq != null){\r\n            salida+= \"node\"+rama.idRama + \" -> node\" + aux.rama_Izq.idRama + \"\\n\"\r\n        }\r\n    }\r\n    if(aux.siguiente != null){\r\n        if(aux.rama_Izq==null && aux.rama_Der == null){\r\n            salida += \"node\"+rama.idRama+\" [label = \\\" iz| \"\r\n            while(aux!=null){\r\n                salida += aux.valor+ \" | \"\r\n                aux = aux.siguiente\r\n            }\r\n            salida += \"de \\\"]; \\n\"\r\n        }else if(aux.rama_Izq!=null && aux.rama_Der != null){\r\n            salida += \"node\"+rama.idRama+\" [label = \\\" iz| \"\r\n            while(aux!=null){\r\n                salida += aux.valor+ \" | \"\r\n                aux = aux.siguiente\r\n            }\r\n            salida += \"de \\\"]; \\n\"\r\n            aux = rama.indice\r\n            if(aux.rama_Der != null){\r\n                salida+= \"node\"+rama.idRama + \" -> node\" + rama.indice.rama_Der.idRama + \"\\n\"\r\n            }\r\n            if(aux.rama_Izq != null){\r\n                salida+= \"node\"+rama.idRama + \" -> node\" + rama.indice.rama_Izq.idRama + \"\\n\"\r\n            }\r\n            aux = rama.indice\r\n            aux = aux.siguiente\r\n            while(aux!=null){\r\n                salida += \"node\"+rama.idRama + \" -> node\" + aux.rama_Der.idRama + \"\\n\"\r\n                aux = aux.siguiente\r\n            }\r\n        }\r\n        aux = rama.indice\r\n        aux = aux.siguiente\r\n        while(aux !=null){\r\n            if(aux != null && aux.rama_Der!=null){\r\n                this.graficando(aux.rama_Der)\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n        if(rama.hoja == true && permiso == false){\r\n            while(rama.ramaContinua != null){\r\n                if(rama.ramaContinua != null){\r\n                    salida += \"node\"+rama.idRama + \" -> node\" + rama.ramaContinua.idRama + \"\\n\"\r\n                }\r\n                rama = rama.ramaContinua\r\n            }\r\n            permiso = true\r\n        }\r\n    }    \r\n    \r\n}\r\n\r\n\r\nguardar(){\r\n    let arreglo = [];\r\n    this._recorrer(arreglo,this.raiz)\r\n   return arreglo\r\n}\r\n\r\n}\r\nexport default ArbolBplus;\r\n//module.exports.ArbolBplus = ArbolBplus;","\r\nimport { Button, Header, Icon, Modal,Menu,Input,Select } from 'semantic-ui-react'\r\nimport './modal.css'\r\nimport React, { Component } from 'react'\r\nimport Cola from '../estructuras/EstructurasLineales/Cola'\r\nimport ColaPrioridad from '../estructuras/EstructurasLineales/ColaPrioridad'\r\nimport ABB from '../estructuras/Estructuras_Arboreas/ABB'\r\nimport ArbolAVL from '../estructuras/Estructuras_Arboreas/AVL'\r\n\r\nimport Pila from '../estructuras/EstructurasLineales/Pila'\r\nimport ListaCirD from '../estructuras/EstructurasLineales/ListaCirD'\r\nimport ListaCS from '../estructuras/EstructurasLineales/ListaCirS'\r\n\r\n\r\nimport ListaSimple from '../estructuras/EstructurasLineales/ListaSimple'\r\nimport ListaDoble from '../estructuras/EstructurasLineales/ListaDoble'\r\n\r\nimport MerkleTree from '../estructuras/Estructuras_Arboreas/merkleTree'\r\nimport ArbolB from '../estructuras/Estructuras_Arboreas/ArbolB'\r\n\r\nimport ArbolBplus from '../estructuras/Estructuras_Arboreas/ArbolBplus'\r\n\r\nconst countryOptions = [\r\n    { key: 'ini', value: 'Inicio', text: 'Inicio' },\r\n    { key: 'fin', value: 'Final', text: 'Final' },\r\n    { key: 'ord', value: 'Ordenado', text: 'Ordenado' },\r\n    \r\n  ]\r\n\r\nexport default class Agregar extends Component {\r\n\r\n    state={\r\n           open: false,\r\n           textoDato: \"\" ,\r\n           prioridad: \"\",\r\n           opciones: null\r\n    }\r\n\r\n\r\n    swtEdd=()=>{\r\n        let nombre = this.props.nombre\r\n        let edd = this.props.edd\r\n        let dato = this.state.textoDato\r\n        let prioridad = this.state.prioridad\r\n        let opciones = this.state.opciones\r\n        switch(nombre){\r\n            case \"Pila\" :\r\n                if(edd == null){\r\n                    edd = new Pila();\r\n                }\r\n                edd.agregar(dato)\r\n                break\r\n            case \"Cola\":\r\n                if(edd == null){\r\n                    edd = new Cola();\r\n                }\r\n                edd.Agregar(dato)\r\n                break\r\n            case \"Cola de prioridad\":\r\n                if(edd == null){\r\n                    edd = new ColaPrioridad();\r\n                }\r\n                edd.Agregar(dato,prioridad)\r\n                break\r\n            case \"Lista simplemente enlazada\":\r\n    \r\n                if(edd == null){\r\n                    edd = new ListaSimple();\r\n                }\r\n                edd.agregar(dato,opciones)\r\n                break\r\n    \r\n            case \"Lista doblemente enlazada\":\r\n    \r\n                if(edd == null){\r\n                    edd = new ListaDoble();\r\n                }\r\n                edd.agregar(dato,opciones)\r\n                break\r\n    \r\n            case \"Lista circular simplemente enlazada\":\r\n    \r\n                if(edd == null){\r\n                    edd = new ListaCS();\r\n                }\r\n                edd.agregar(dato,opciones)\r\n                break\r\n    \r\n            case \"Lista circular doblemente enlazada\":\r\n    \r\n                if(edd == null){\r\n                    edd = new ListaCirD();\r\n                }\r\n                edd.agregar(dato,opciones) \r\n                break\r\n            case \"Arbol ABB\":\r\n    \r\n                if(edd == null){\r\n                    edd = new ABB();\r\n                }\r\n                edd.insertar(dato) \r\n                break\r\n            case \"Arbol AVL\":\r\n    \r\n                if(edd == null){\r\n                    edd = new ArbolAVL();\r\n                }\r\n                edd.agregar(dato) \r\n                edd.recorridoPre(edd.raiz)\r\n                break\r\n            case \"Arbol B\":\r\n    \r\n                if(edd == null){\r\n                    edd = new ArbolB(this.state.opciones);\r\n                }\r\n                edd.insertar(dato) \r\n                break\r\n            case \"Arbol B+\":\r\n\r\n                if(edd == null){\r\n                    edd = new ArbolBplus(this.state.opciones);\r\n                }\r\n                edd.agregar(dato)\r\n            break\r\n            case \"Arbol Merkle\":\r\n\r\n                if(edd == null){\r\n                    edd = new MerkleTree(this.state.opciones);\r\n                }\r\n            edd.insertar(dato)\r\n            break\r\n            default:\r\n                break;\r\n        }\r\n        this.props.obtenerDatos(edd);\r\n    }\r\n\r\n    obtenerText = e =>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    render() {\r\n       if(this.props.nombre=== \"Cola de prioridad\"){\r\n        return (\r\n            <Modal\r\n                className=\"modalAgregar\"\r\n                basic\r\n                onClose={() => this.setState({open: false})}\r\n                onOpen={() =>  this.setState({open: true})}\r\n                open={this.state.open}\r\n                size='small'\r\n                trigger={<Menu.Item>Agregar</Menu.Item>}\r\n                >\r\n                <Header icon>\r\n                    <Icon name='add' />\r\n                    Agregar Dato\r\n                </Header>\r\n                <Modal.Content>\r\n                        <Input className=\"inputAgregar\" type=\"text\" name=\"textoDato\" value={this.state.textoDato}  fluid placeholder=\"agregar dato\" onChange={this.obtenerText}/>\r\n                        <br/>\r\n                        <Input className=\"inputAgregar\" type=\"text\" name=\"prioridad\" value={this.state.prioridad}  fluid placeholder=\"agregar prioridad\" onChange={this.obtenerText}/>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() =>  this.setState({open: false})}>\r\n                    <Icon name='remove' /> No\r\n                    </Button>\r\n                    <Button className=\"buttonAgregar\" color='green' inverted onClick={this.swtEdd}>\r\n                    <Icon name='checkmark' /> Si\r\n                    </Button>\r\n                </Modal.Actions>\r\n                </Modal>\r\n        )\r\n\r\n       }else if(this.props.nombre=== \"Lista simplemente enlazada\" ||\r\n                this.props.nombre=== \"Lista doblemente enlazada\" ||\r\n                this.props.nombre=== \"Lista circular simplemente enlazada\" ||\r\n                this.props.nombre=== \"Lista circular doblemente enlazada\" ||\r\n                this.props.nombre === \"Arbol B\"){\r\n        return (\r\n            <Modal\r\n                className=\"modalAgregar\"\r\n                basic\r\n                onClose={() => this.setState({open: false})}\r\n                onOpen={() =>  this.setState({open: true})}\r\n                open={this.state.open}\r\n                size='small'\r\n                trigger={<Menu.Item>Agregar</Menu.Item>}\r\n                >\r\n                <Header icon>\r\n                    <Icon name='add' />\r\n                    Agregar Dato\r\n                </Header>\r\n                <Modal.Content>\r\n                <Input placeholder='Seleccionar' name=\"opciones\" options={countryOptions} value={this.state.opciones} onChange={this.obtenerText} fluid/> \r\n                <br/>\r\n                <Input className=\"inputAgregar\" type=\"text\" name=\"textoDato\" value={this.state.textoDato}  fluid placeholder=\"agregar dato\" onChange={this.obtenerText}/>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() =>  this.setState({open: false})}>\r\n                    <Icon name='remove' /> No\r\n                    </Button>\r\n                    <Button className=\"buttonAgregar\" color='green' inverted onClick={this.swtEdd}>\r\n                    <Icon name='checkmark' /> Si\r\n                    </Button>\r\n                </Modal.Actions>\r\n                </Modal>\r\n        )\r\n       }else{\r\n        return (\r\n            <Modal\r\n                className=\"modalAgregar\"\r\n                basic\r\n                onClose={() => this.setState({open: false})}\r\n                onOpen={() =>  this.setState({open: true})}\r\n                open={this.state.open}\r\n                size='small'\r\n                trigger={<Menu.Item>Agregar</Menu.Item>}\r\n                >\r\n                <Header icon>\r\n                    <Icon name='add' />\r\n                    Agregar Dato\r\n                </Header>\r\n                <Modal.Content>\r\n                <Input className=\"inputAgregar\" type=\"text\" name=\"textoDato\" value={this.state.textoDato}  fluid placeholder=\"agregar dato\" onChange={this.obtenerText}/>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() =>  this.setState({open: false})}>\r\n                    <Icon name='remove' /> No\r\n                    </Button>\r\n                    <Button className=\"buttonAgregar\" color='green' inverted onClick={this.swtEdd}>\r\n                    <Icon name='checkmark' /> Si\r\n                    </Button>\r\n                </Modal.Actions>\r\n                </Modal>\r\n        )\r\n       }\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport { Button, Header, Icon, Modal,Menu,Input } from 'semantic-ui-react'\r\n\r\n\r\n\r\n\r\nexport default class Eliminar extends Component {\r\n\r\n    state={\r\n        open: false,\r\n        textoDato: \"\" \r\n    }\r\n\r\n    swtEdd=()=>{\r\n        let nombre = this.props.nombre\r\n        let edd = this.props.edd\r\n        let dato = this.state.textoDato\r\n        switch(nombre){\r\n            case \"Pila\" :\r\n                edd.eliminar(dato)\r\n                break\r\n            case \"Cola\":\r\n                edd.eliminar(dato)\r\n                break\r\n            case \"Cola de prioridad\":\r\n                edd.eliminar(dato)\r\n                break\r\n            case \"Lista simplemente enlazada\":\r\n                edd.eliminar(dato)\r\n                break\r\n    \r\n            case \"Lista doblemente enlazada\":\r\n                edd.eliminar(dato)\r\n                break\r\n    \r\n            case \"Lista circular simplemente enlazada\":\r\n    \r\n                edd.eliminar(dato)\r\n                break\r\n    \r\n            case \"Lista circular doblemente enlazada\":\r\n                edd.eliminar(dato)\r\n                break\r\n            case \"Arbol ABB\":\r\n                edd.eliminando(dato);\r\n                break\r\n            case \"Arbol AVL\":\r\n                edd.eliminar(dato)\r\n                break\r\n             case \"Arbol B\":\r\n                edd.eliminar(dato)\r\n                break\r\n            case \"Arbol B+\":\r\n                edd.eliminar(dato)\r\n                break\r\n             case \"Arbol Merkle\":\r\n                edd.Eliminar(dato)\r\n                break\r\n            default:\r\n                break;\r\n        }\r\n        this.props.obtenerDatos(edd);\r\n    }\r\n\r\n    obtenerText = e =>{\r\n       this.setState({\r\n           [e.target.name]: e.target.value\r\n       })\r\n       }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                basic\r\n                onClose={() => this.setState({open: false})}\r\n                onOpen={() => this.setState({open: true})}\r\n                open={this.state.open}\r\n                size='small'\r\n                trigger={<Menu.Item>Eliminar</Menu.Item>}\r\n                >\r\n                <Header icon>\r\n                    <Icon name='trash' />\r\n                    Eliminar Dato\r\n                </Header>\r\n                <Modal.Content>\r\n                        <Input type=\"text\" fluid name=\"textoDato\" value={this.state.textoDato} onChange={this.obtenerText} placeholder=\"Eliminanr dato\"/>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() => this.setState({open: false})}>\r\n                    <Icon name='remove' /> No\r\n                    </Button>\r\n                    <Button color='green' inverted onClick={this.swtEdd}>\r\n                    <Icon name='checkmark' /> Yes\r\n                    </Button>\r\n                </Modal.Actions>\r\n                </Modal>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Button, Header, Icon, Modal,Menu,Input } from 'semantic-ui-react'\r\n\r\nexport default class Actualizar extends Component {\r\n\r\n    state={\r\n        open: false,\r\n        datoAnterior: \"\" ,\r\n        datoNuevo: \"\"\r\n }\r\n\r\n    swtEdd=()=>{\r\n        let nombre = this.props.nombre\r\n        let edd = this.props.edd\r\n        let datoAnterior = this.state.datoAnterior\r\n        let datoNuevo = this.state.datoNuevo\r\n        switch(nombre){\r\n            case \"Pila\" :\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n            case \"Cola\":\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n            case \"Cola de prioridad\":\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n            case \"Lista simplemente enlazada\":\r\n\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n\r\n            case \"Lista doblemente enlazada\":\r\n\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n\r\n            case \"Lista circular simplemente enlazada\":\r\n\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n\r\n            case \"Lista circular doblemente enlazada\":\r\n\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n            case \"Arbol ABB\":\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n            case \"Arbol AVL\":\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n            case \"Arbol B\":\r\n                edd.modificar(datoAnterior,datoNuevo)\r\n                break\r\n            case \"Arbol B+\":\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n            break\r\n            case \"Arbol Merkle\":\r\n                edd.modificar(datoAnterior,datoNuevo)\r\n            break\r\n            default:\r\n                break;\r\n        }\r\n        this.props.obtenerDatos(edd);\r\n    }\r\n\r\n obtenerText = e =>{\r\n    this.setState({\r\n        [e.target.name]: e.target.value\r\n    })\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal\r\n            basic\r\n            onClose={() =>this.setState({open: false})}\r\n            onOpen={() => this.setState({open: true})}\r\n            open={this.state.open}\r\n            size='small'\r\n            trigger={<Menu.Item>Actualizar</Menu.Item>}\r\n            >\r\n            <Header icon>\r\n                <Icon name='edit' />\r\n                Actualizar Dato\r\n            </Header>\r\n            <Modal.Content>\r\n                    <Input type=\"text\" name=\"datoAnterior\" value={this.state.datoAnterior} fluid placeholder=\"Dato Anterior\" onChange={this.obtenerText}/>\r\n                    <br/>\r\n                    <Input type=\"text\" name=\"datoNuevo\" value={this.state.datoNuevo} fluid placeholder=\"Dato Nuevo\" onChange={this.obtenerText}/>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button basic color='red' inverted onClick={() => this.setState({open: false})}>\r\n                <Icon name='remove' /> No\r\n                </Button>\r\n                <Button color='green' inverted onClick={this.swtEdd}>\r\n                <Icon name='checkmark' /> Yes\r\n                </Button>\r\n            </Modal.Actions>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport Graph from \"react-graph-vis\";\r\n\r\nexport default function GraficaListas(props) {\r\n\r\n    let nodosAfuera = props.edd.Recorrido()\r\n    if(props.buscar != \"\"){\r\n      nodosAfuera = props.edd.Recorrido(props.buscar)\r\n    }\r\n    let uniones = edgeF()\r\n\r\n\r\n    function edgeF(){\r\n      let edgefuera = []\r\n      for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n        let edge = {from:i, to:i+1}\r\n        edgefuera[i] = edge\r\n        \r\n      }\r\n\r\n      if(props.nombre == \"Lista doblemente enlazada\"){\r\n          let contador = nodosAfuera.length-1\r\n          for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n              let edge = {from:i+1, to:i}\r\n              edgefuera[contador] = edge\r\n              contador++\r\n          }\r\n          \r\n      }\r\n\r\n      return edgefuera\r\n    }\r\n\r\n    console.log(nodosAfuera)\r\n    console.log(uniones)\r\n\r\n    const graph = {\r\n        nodes: nodosAfuera.map((node, index, arr) => {\r\n          const angle = 2 * (index / arr.length +0.75 );\r\n          node.x = 9000 * angle;\r\n          node.y = 10 * angle;\r\n          if (index % 2 === 0) {\r\n            node.value = index + 1;\r\n          }\r\n          return node;\r\n        }),\r\n\r\n        edges: uniones\r\n      };\r\n     \r\n\r\n\r\n\r\n      const diseño = {\r\n          direction: 'LR'\r\n      }\r\n\r\n      const options = {\r\n        physics: false,\r\n        edges: {\r\n            color: \"white\",\r\n            width: 2,\r\n            shadow: true\r\n          },\r\n          nodes:{\r\n            shape:\"box\",\r\n            color: \"red\",\r\n            font: {\r\n              size: 32,\r\n              color: \"#ffffff\",\r\n            },\r\n            borderWidth: 2,\r\n            shadow: true\r\n        },\r\n        interaction: {\r\n          navigationButtons: true,\r\n          keyboard: true,\r\n        }\r\n        ,\r\n        height: \"500px\"\r\n      };\r\n     \r\n      const events = {\r\n        select: function(event) {\r\n          var { nodes, edges } = event;\r\n        }\r\n      };\r\n      return (\r\n        <Graph\r\n          graph={graph}\r\n          options={options}\r\n          events={events}\r\n          getNetwork={network => {\r\n            //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n          }}\r\n        />\r\n      );\r\n}\r\n","import React from 'react'\r\nimport Graph from \"react-graph-vis\";\r\n\r\nexport default function GraficaListaCircular(props) {\r\n\r\n    let nodosAfuera = props.edd.Recorrido()\r\n    if(props.buscar != \"\"){\r\n      nodosAfuera = props.edd.Recorrido(props.buscar)\r\n    }\r\n    let edgefuera =[]\r\n\r\n    for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n        let edge = {from:i, to:i+1}\r\n        edgefuera[i] = edge\r\n\r\n        if(i == nodosAfuera.length-2){\r\n            let edge = {from:nodosAfuera.length-1, to:0}\r\n            edgefuera[nodosAfuera.length-1] = edge\r\n        }\r\n        \r\n    }\r\n\r\n    if(props.nombre == \"Lista circular doblemente enlazada\"){\r\n        let contador = nodosAfuera.length\r\n        for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n            let edge = {from:i+1, to:i}\r\n            edgefuera[contador] = edge\r\n            contador++\r\n            if(i == nodosAfuera.length-2){\r\n                let edge = {from:0, to:nodosAfuera.length-1}\r\n                edgefuera[contador] = edge\r\n            }\r\n        }\r\n    }\r\n    console.log(edgefuera)\r\n\r\n    const graph = {\r\n        nodes: nodosAfuera.map((node, index, arr) => {\r\n            const angle = 2 * Math.PI * (index / arr.length + 0.75);\r\n            node.x = 1000 * Math.cos(angle);\r\n            node.y = 1000 * Math.sin(angle);\r\n            if (index % 2 === 0) {\r\n              node.value = index + 1;\r\n            }\r\n            return node;\r\n        }),\r\n\r\n        edges: edgefuera\r\n      };\r\n     \r\n\r\n\r\n      const options = {\r\n        physics: false,\r\n        edges: {\r\n            color: \"white\",\r\n            width: 2,\r\n            shadow: true\r\n          },\r\n        nodes:{\r\n            shape:\"box\",\r\n            color: \"red\",\r\n            font: {\r\n              size: 32,\r\n              color: \"#ffffff\",\r\n            },\r\n            borderWidth: 2,\r\n            shadow: true\r\n        },\r\n        height: \"500px\"\r\n      };\r\n     \r\n      const events = {\r\n        select: function(event) {\r\n          var { nodes, edges } = event;\r\n        }\r\n      };\r\n      return (\r\n        <Graph\r\n          graph={graph}\r\n          options={options}\r\n          events={events}\r\n          getNetwork={network => {\r\n            //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n          }}\r\n        />\r\n      );\r\n}\r\n","import React from 'react'\r\nimport {\r\n    BarChart,\r\n    Bar,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend\r\n  } from \"recharts\";\r\n\r\nimport './GraficoOrdenamiento.css'\r\n\r\n\r\n\r\n  let data;\r\n\r\n\r\nlet duration = 10000; \r\n\r\n\r\nexport default function GraficoOrdenamientos(props) {\r\n    \r\n  data = props.arreglo\r\n\r\n    return (\r\n        <div className=\"grafico\">\r\n        \r\n        <BarChart\r\n          width={1000}\r\n          height={600}\r\n          data={data} \r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5\r\n          }}\r\n          \r\n        >\r\n         \r\n          <XAxis dataKey=\"valor\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Bar dataKey=\"ASCII\" fill=\"#82ca9d\" animationDuration={duration}/>\r\n        </BarChart>\r\n    \r\n        \r\n        </div>\r\n      );\r\n}\r\n","import React, { Component } from 'react'\r\nimport GraficaListas from './GraficaListas'\r\nimport GraficaListaCircular from './GraficaListaCircular'\r\nimport GraficoOrdenamientos from './GraficoOrdenamientos'\r\n\r\nexport default class Dibujar extends Component {\r\n  render() {\r\n     if(this.props.nombre == \"Lista circular simplemente enlazada\" || this.props.nombre == \"Lista circular doblemente enlazada\"){\r\n      return (\r\n        <div>\r\n            <GraficaListaCircular nombre={this.props.nombre} buscar={this.props.valorBusqueda} edd={this.props.estructura}/>\r\n        </div>\r\n      )\r\n    \r\n    }else if(this.props.nombre == \"Ordenamiento Selección\" ||\r\n    this.props.nombre == \"Ordenamiento Inserción\" ||\r\n    this.props.nombre == \"Ordenamiento Burbuja\" ||\r\n    this.props.nombre == \"Ordenamiento Rapido\"){\r\n      return(\r\n        <div>\r\n        <br/>\r\n        <GraficoOrdenamientos arreglo={this.props.estructura}/> \r\n        </div>\r\n      ) \r\n    }\r\n    else{\r\n      return (\r\n        <div>\r\n             <GraficaListas nombre={this.props.nombre}  buscar={this.props.valorBusqueda} edd={this.props.estructura}/> \r\n        </div>\r\n      )\r\n    } \r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Button, Header, Icon, Modal,Menu,Input } from 'semantic-ui-react'\r\n\r\nexport default class Buscar extends Component {\r\n    state={\r\n        open: false,\r\n        textoDato: \"\" \r\n    }\r\n\r\n    retornarValor = () =>{\r\n        this.props.busqueda(this.state.textoDato)\r\n    }\r\n\r\n    obtenerText = e =>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n            basic\r\n            onClose={() =>  this.setState({open: false})}\r\n            onOpen={() =>  this.setState({open: true})}\r\n            open={this.state.open}\r\n            size='small'\r\n            trigger={<Menu.Item>Buscar</Menu.Item>}\r\n            >\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Buscar Dato\r\n            </Header>\r\n            <Modal.Content>\r\n                    <Input type=\"text\" fluid name='textoDato' value={this.state.textoDato} onChange={this.obtenerText} placeholder=\"buscar dato\" icon=\"search\"/>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button basic color='red' inverted onClick={() =>  this.setState({open: false})}>\r\n                <Icon name='remove' /> No\r\n                </Button>\r\n                <Button color='green' inverted onClick={this.retornarValor}>\r\n                <Icon name='checkmark' /> Yes\r\n                </Button>\r\n            </Modal.Actions>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\n","export default function Seleccion(arr){\r\n    \r\n    let menor, posicion, tmp\r\n    for (let index = 0; index < arr.length-1; index++) {\r\n         menor = arr[index]\r\n         posicion = index;\r\n        for (let y = index+1; y < arr.length; y++) {\r\n            \r\n            if(arr[y].ASCII< menor.ASCII){\r\n                menor = arr[y]\r\n                posicion = y\r\n            }\r\n            \r\n        }\r\n  \r\n        if(posicion != index){\r\n            tmp = arr[index]\r\n            arr[index] = arr[posicion];\r\n            arr[posicion] = tmp;\r\n        }\r\n  \r\n    }\r\n    \r\n    return arr\r\n  }","export default function Insercion(arr){\r\n    let derecha, aux\r\n    for (let x = 0; x < arr.length; x++) {\r\n        derecha = x\r\n        aux = arr[x]\r\n        while((derecha>0) && (arr[derecha-1].ASCII > aux.ASCII)){\r\n            arr[derecha] = arr[derecha-1]\r\n            derecha--\r\n        }\r\n\r\n        arr[derecha] = aux\r\n    }\r\n\r\n    return arr\r\n}","//Funcion de Ordenamiento rapido\r\nexport default function ordRapido(arreglo){\r\n    //Posible Arreglo de un solo dato\r\n    if (arreglo.length === 1){\r\n        return arreglo;\r\n    }\r\n    const pivote = arreglo[arreglo.length - 1]\r\n    const partIzq = []\r\n    const partDer = []\r\n    //Iterador\r\n    for (const el of arreglo.slice(0, arreglo.length - 1)){\r\n        el.ASCII<pivote.ASCII ? partIzq.push(el) : partDer.push(el)\r\n    }\r\n    //Construccion de salida\r\n    if(partIzq.length>0 && partDer.length > 0){\r\n        return [ ...ordRapido(partIzq) , pivote , ...ordRapido(partDer)]\r\n    } else if(partIzq.length> 0){\r\n        return [...ordRapido(partIzq) , pivote]\r\n    } else{\r\n        return [pivote , ...ordRapido(partDer)]\r\n    }\r\n}","var fs = require('fs')\r\nclass Ordenamiento{\r\n    constructor(){\r\n        this.arreglo = null;\r\n        this.contadorArreglos = 0;\r\n    }\r\n    ordenar(datos){\r\n        this.arreglo = datos;\r\n        for (let i = 0; i< datos.length-1; i++){\r\n            for(let j = 0; j< datos.length-1; j++ ){\r\n                if(datos[j].ASCII> datos[j+1].ASCII){\r\n                    let temporal = datos[j];\r\n                    datos[j] = datos[j+1];\r\n                    datos[j+1] = temporal;\r\n                }\r\n            }\r\n        }\r\n        this.arreglo = datos;\r\n        return datos\r\n    }\r\n\r\n    cargar(archivo){\r\n        let datos = JSON.parse[datos];\r\n        let arreglo = datos[\"valores\"];\r\n        this.ordenar(arreglo)\r\n\r\n    }\r\n\r\n    guardar(){\r\n        let contadorListas\r\n        contadorListas ++;\r\n        let archivojs;\r\n        archivojs[\"Datos\"] = this.arreglo;        \r\n       \r\n        let json = JSON.stringify(archivojs)\r\n        let nombre = \"Ordenamiento\" + contadorListas;\r\n        fs.writeFile(nombre, json)\r\n\r\n    }\r\n}\r\n\r\nexport default Ordenamiento;","import React from 'react'\r\nimport { Graphviz } from 'graphviz-react';\r\n\r\n\r\n\r\nexport default function GraficarArboles(props) {\r\n    let dot = props.estructura.graficar();\r\n\r\n    if(props.valorBusqueda != \"\"){\r\n        dot =  props.estructura.graficar(props.valorBusqueda);\r\n      }\r\n\r\n    return (\r\n        <div>\r\n            <Graphviz dot={dot} options={{zoom:true,height: 2000,width: 2000}} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport Graph from \"react-graph-vis\";\r\n\r\nexport default function GraficarArbol(props) {\r\n\r\n    let nodosAfuera = props.estructura.obtenerNodos()\r\n\r\n    if(props.buscar != \"\"){\r\n      nodosAfuera = props.estructura.obtenerNodos(props.valorBusqueda)\r\n    }\r\n\r\n    let uniones =  props.estructura.obtenerAputadores()\r\n\r\n  /*   function edgeF(){\r\n      let edgefuera = []\r\n      for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n        let edge = {from:i, to:i+1}\r\n        edgefuera[i] = edge\r\n        \r\n      }\r\n\r\n      if(props.nombre == \"Lista doblemente\"){\r\n          let contador = nodosAfuera.length-1\r\n          for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n              let edge = {from:i+1, to:i}\r\n              edgefuera[contador] = edge\r\n              contador++\r\n          }\r\n          \r\n      }\r\n\r\n      return edgefuera\r\n    } */\r\n\r\n    /* console.log(nodosAfuera)\r\n    console.log(uniones) */\r\n\r\n    const graph = {\r\n        nodes: nodosAfuera,\r\n\r\n        edges: uniones\r\n      };\r\n     \r\n\r\n      const options = {\r\n        layout: {\r\n            hierarchical: {\r\n              direction: \"UD\",\r\n              sortMethod: \"directed\",\r\n            },\r\n        },\r\n        physics: false,\r\n        edges: {\r\n          color: \"white\",\r\n          width: 2,\r\n          shadow: true\r\n        },\r\n        nodes:{\r\n            shape:\"box\",\r\n            color: \"red\",\r\n            font: {\r\n              size: 32,\r\n              color: \"#ffffff\",\r\n            },\r\n            borderWidth: 2,\r\n            shadow: true\r\n        },\r\n        interaction: {\r\n          navigationButtons: true,\r\n          keyboard: true,\r\n        }\r\n        ,\r\n        height: \"500px\"\r\n      };\r\n     \r\n      const events = {\r\n        select: function(event) {\r\n          var { nodes, edges } = event;\r\n        }\r\n      };\r\n      return (\r\n        <Graph\r\n          graph={graph}\r\n          options={options}\r\n          events={events}\r\n          getNetwork={network => {\r\n            //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n          }}\r\n        />\r\n      );\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Menu } from 'semantic-ui-react'\r\nimport Cargar from './Cargar'\r\nimport Agregar from './Agregar'\r\nimport Eliminar from './Eliminar'\r\nimport Actualizar from './Actualizar'\r\nimport {Link} from 'react-router-dom'\r\nimport Dibujar from './Dibujar';\r\nimport Buscar from './Buscar'\r\n\r\nimport Seleccion from '../estructuras/Ordenamientos/Seleccion'\r\nimport Insercion from '../estructuras/Ordenamientos/Insercion'\r\nimport ordRapido from '../estructuras/Ordenamientos/OrdRapido'\r\nimport Ordenamiento from '../estructuras/Ordenamientos/OrdBurbuja'\r\n\r\nimport GraficarArboles from './GraficarArboles'\r\nimport GraficarArbol from './GraficarArbol'\r\n\r\n\r\nimport './NavbarInter.css'\r\n\r\n\r\nlet count = 0;\r\nexport default class NavbarInter extends Component {\r\n    state = {\r\n      estrutura : null,\r\n      busqueda: \"\",\r\n      nombre: '',\r\n      fileDownloadUrl: null\r\n     }\r\n\r\n\r\n     componentDidMount(){\r\n       this.setState({nombre: this.props.location.state.nombre})\r\n     }\r\n    \r\n    handleItemClick = (e, { name }) => this.setState({ activeItem: name })\r\n     \r\n    obtenerDatos = (edd) =>{\r\n      this.setState({\r\n        estrutura: edd\r\n      })\r\n    }\r\n\r\n    obtenerBusqueda = (datoBuscar) =>{\r\n      this.setState({\r\n        busqueda: datoBuscar\r\n      })\r\n    }\r\n\r\n\r\n    ordenarDatos=()=>{\r\n      let arregloOrdenado = []\r\n        switch (this.state.nombre) {\r\n          case \"Ordenamiento Selección\":\r\n            arregloOrdenado = Seleccion(this.state.estrutura);\r\n            break;\r\n          \r\n          case \"Ordenamiento Inserción\":\r\n            arregloOrdenado = Insercion(this.state.estrutura);\r\n            break;\r\n          case \"Ordenamiento Burbuja\":\r\n            let burbuja = new Ordenamiento()\r\n            arregloOrdenado = burbuja.ordenar(this.state.estrutura); \r\n            break;\r\n          case \"Ordenamiento Rapido\":\r\n              arregloOrdenado = ordRapido(this.state.estrutura);\r\n            break;\r\n          default:\r\n            break;\r\n          \r\n        }\r\n\r\n        this.setState({\r\n          estrutura: arregloOrdenado\r\n        })\r\n    }\r\n\r\n    desencolar=()=>{\r\n        switch (this.state.nombre) {\r\n          case \"Cola\":\r\n            this.state.estrutura.Pop()\r\n            break;\r\n          \r\n          case \"Cola de prioridad\":\r\n            this.state.estrutura.Pop()\r\n            break;\r\n          case \"Pila\":\r\n            this.state.estrutura.eliminar()\r\n            break;\r\n          default:\r\n            break;\r\n          \r\n        }\r\n\r\n        this.setState({\r\n          estrutura: this.state.estrutura\r\n        })\r\n    }\r\n\r\n\r\n   guardarOrdenamiento=(event) =>{\r\n\r\n     event.preventDefault();\r\n      let archivoJSON = JSON.stringify({valores: this.state.estrutura}, null,4)\r\n      const blob = new Blob([archivoJSON])\r\n\r\n      const fileDownloadUrl = URL.createObjectURL(blob);\r\n      this.setState ({fileDownloadUrl: fileDownloadUrl}, \r\n        () => {\r\n          this.dofileDownload.click(); \r\n          URL.revokeObjectURL(fileDownloadUrl);  // free up storage--no longer needed.\r\n          this.setState({fileDownloadUrl: \"\"})\r\n      })    \r\n\r\n  }\r\n\r\n  guardarEstructuras=(event) =>{\r\n\r\n    event.preventDefault();\r\n     let archivoJSON = JSON.stringify({nombre:this.state.nombre,valores: this.state.estrutura.guardar()}, null,4)\r\n     const blob = new Blob([archivoJSON])\r\n\r\n     const fileDownloadUrl = URL.createObjectURL(blob);\r\n     this.setState ({fileDownloadUrl: fileDownloadUrl}, \r\n       () => {\r\n         this.dofileDownload.click(); \r\n         URL.revokeObjectURL(fileDownloadUrl);  // free up storage--no longer needed.\r\n         this.setState({fileDownloadUrl: \"\"})\r\n     })    \r\n\r\n }\r\n\r\n    render() {\r\n      const { activeItem } = this.state\r\n  \r\n      if(this.state.estrutura == null){\r\n        return (\r\n          <div>\r\n              <Menu className=\"ui tpo inverted attached menu\">\r\n                <Menu.Item>\r\n                            <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n                </Menu.Item>\r\n                <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n                <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n                <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                <Buscar  busqueda={this.obtenerBusqueda}  key={count++}/>\r\n              <Menu.Menu position='right'>\r\n                <Menu.Item name=\"Guardar\" icon='save'  onClick={this.handleItemClick, this.guardarEstructuras}>\r\n                </Menu.Item>\r\n                \r\n              </Menu.Menu>\r\n            </Menu>\r\n            <a className=\"hidden\"\r\n              download={this.state.nombre+\".json\"}\r\n              href={this.state.fileDownloadUrl}\r\n              ref={e=>this.dofileDownload = e}\r\n              >download it</a>\r\n            <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n            \r\n          </div>\r\n        )\r\n\r\n\r\n\r\n      }else{\r\n        if(this.state.nombre == \"Ordenamiento Selección\" ||\r\n           this.state.nombre == \"Ordenamiento Inserción\" ||\r\n           this.state.nombre == \"Ordenamiento Burbuja\" ||\r\n           this.state.nombre == \"Ordenamiento Rapido\" ){\r\n          return (\r\n            <div>\r\n                <Menu className=\"ui tpo inverted attached menu\">\r\n                  <Menu.Item>\r\n                              <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n                  </Menu.Item>\r\n                  <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Menu.Item name=\"Ordenar\" icon='chart bar' \r\n                    onClick={this.handleItemClick, this.ordenarDatos}>\r\n                  </Menu.Item>\r\n                <Menu.Menu position='right'>\r\n                  <Menu.Item name=\"Guardar\" icon='save' onClick={this.handleItemClick, this.guardarOrdenamiento}>\r\n                    \r\n                  </Menu.Item>\r\n                  \r\n                </Menu.Menu>\r\n              </Menu>\r\n              <br/>\r\n              <a className=\"hidden\"\r\n              download={this.state.nombre+\".json\"}\r\n              href={this.state.fileDownloadUrl}\r\n              ref={e=>this.dofileDownload = e}\r\n              >download it</a>\r\n               <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n               {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n              <Dibujar nombre={this.state.nombre} estructura={this.state.estrutura}  key={count++}/>\r\n            </div>\r\n          )\r\n        }else if(this.state.nombre == \"Arbol ABB\"\r\n              ||this.state.nombre == \"Arbol AVL\"){\r\n          return (\r\n            <div>\r\n                <Menu className=\"ui tpo inverted attached menu\">\r\n                  <Menu.Item>\r\n                              <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n                  </Menu.Item>\r\n                  <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n                  <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/> \r\n                  <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Buscar busqueda={this.obtenerBusqueda} key={count++}/>\r\n                <Menu.Menu position='right'>\r\n                  <Menu.Item name=\"Guardar\" icon='save'  onClick={this.handleItemClick, this.guardarEstructuras}>\r\n                  </Menu.Item>\r\n                  \r\n                </Menu.Menu>\r\n              </Menu>\r\n              <br/>\r\n              <a className=\"hidden\"\r\n              download={this.state.nombre+\".json\"}\r\n              href={this.state.fileDownloadUrl}\r\n              ref={e=>this.dofileDownload = e}\r\n              >download it</a>\r\n               <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n               {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n               <GraficarArbol nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/>\r\n            </div>\r\n          )\r\n        }else if(this.state.nombre == \"Arbol B\"\r\n        ||this.state.nombre == \"Arbol B+\"\r\n        ||this.state.nombre == \"Arbol Merkle\"\r\n        ){\r\n    return (\r\n      <div>\r\n          <Menu className=\"ui tpo inverted attached menu\">\r\n            <Menu.Item>\r\n                        <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n            </Menu.Item>\r\n            <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n            <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n            <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/> \r\n            <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n            <Buscar busqueda={this.obtenerBusqueda} key={count++}/>\r\n          <Menu.Menu position='right'>\r\n            <Menu.Item name=\"Guardar\" icon='save'  onClick={this.handleItemClick, this.guardarEstructuras}>\r\n            </Menu.Item>\r\n            \r\n          </Menu.Menu>\r\n        </Menu>\r\n        <br/>\r\n        <a className=\"hidden\"\r\n              download={this.state.nombre+\".json\"}\r\n              href={this.state.fileDownloadUrl}\r\n              ref={e=>this.dofileDownload = e}\r\n              >download it</a>\r\n         <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n         {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n         <GraficarArboles nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/>\r\n      </div>\r\n    )\r\n  }else if(this.state.nombre == \"Pila\"\r\n              || this.state.nombre == \"Cola\"\r\n              || this.state.nombre == \"Cola de prioridad\"){\r\n          return (\r\n            <div>\r\n                <Menu className=\"ui tpo inverted attached menu\">\r\n                  <Menu.Item>\r\n                              <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n                  </Menu.Item>\r\n                  <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n                  <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/> \r\n                  <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Buscar busqueda={this.obtenerBusqueda} key={count++}/>\r\n                  <Menu.Item name=\"Desencolar\" \r\n                    onClick={this.handleItemClick, this.desencolar}>\r\n                  </Menu.Item>\r\n                <Menu.Menu position='right'>\r\n                  <Menu.Item name=\"Guardar\" icon='save'  onClick={this.handleItemClick, this.guardarEstructuras}>\r\n                  </Menu.Item>\r\n                  \r\n                </Menu.Menu>\r\n              </Menu>\r\n              <br/>\r\n              <a className=\"hidden\"\r\n              download={this.state.nombre+\".json\"}\r\n              href={this.state.fileDownloadUrl}\r\n              ref={e=>this.dofileDownload = e}\r\n              >download it</a>\r\n\r\n               <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n               {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n              <Dibujar nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/>\r\n            </div>\r\n          )\r\n        }else{\r\n          return (\r\n            <div>\r\n                <Menu className=\"ui tpo inverted attached menu\">\r\n                  <Menu.Item>\r\n                              <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n                  </Menu.Item>\r\n                  <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n                  <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/> \r\n                  <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Buscar busqueda={this.obtenerBusqueda} key={count++}/>\r\n                <Menu.Menu position='right'>\r\n                  <Menu.Item name=\"Guardar\" icon='save'  onClick={this.handleItemClick, this.guardarEstructuras}>\r\n                  </Menu.Item>\r\n                  \r\n                </Menu.Menu>\r\n              </Menu>\r\n              <br/>\r\n              <a className=\"hidden\"\r\n              download={this.state.nombre+\".json\"}\r\n              href={this.state.fileDownloadUrl}\r\n              ref={e=>this.dofileDownload = e}\r\n              >download it</a>\r\n            \r\n               <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n               {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n              <Dibujar nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/>\r\n            </div>\r\n          )\r\n        }\r\n      }\r\n    }\r\n}\r\n","\r\n\r\nimport React from 'react'\r\nimport './App.css';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\r\nimport Navbar from './components/Navbar';\r\nimport Divisiones from './components/Divisiones';\r\nimport NavbarInter from './components/NavbarInter'; \r\nvar sectionStyle = {\r\n  backgroundImage: \"url( https://res.cloudinary.com/practicaldev/image/fetch/s--AILWL9dz--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/6vnsxy7g486k12yp4bhd.jpg )\"\r\n};\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style={sectionStyle}>\r\n      <Router>\r\n      <Route exact path=\"/tytusds/20211SVAC/G03/build/\" render={() =>{\r\n        return <div> \r\n          <Navbar/>\r\n          <Divisiones/> \r\n        </div>\r\n      }}>\r\n        </Route>\r\n\r\n        <Route exact path=\"/tytusds/20211SVAC/G03/build/estructura\" component={NavbarInter}/>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}